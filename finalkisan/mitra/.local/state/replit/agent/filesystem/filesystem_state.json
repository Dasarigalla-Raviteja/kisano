{"file_contents":{"replit.md":{"content":"# Kisan - Agricultural Support App\n\n## Overview\nKisan is a comprehensive agricultural support application built with React, TypeScript, and Vite. The name \"Kisan\" means \"farmer\" in several South Asian languages, reflecting its purpose as a digital platform for farmers and agricultural professionals.\n\n## Project Structure\nThis is a React + TypeScript application using:\n- **Framework**: React 18.3.1 with TypeScript\n- **Build Tool**: Vite 5.4.19\n- **UI Library**: Radix UI components with Tailwind CSS\n- **Routing**: React Router DOM 6.30.1\n- **State Management**: TanStack Query (React Query) 5.83.0\n- **Mobile**: Capacitor 7.4.3 for iOS/Android builds\n\n## Key Features\n- Plant disease diagnosis with camera capture\n- Weather information and forecasts  \n- Market prices and agricultural advisory\n- Shop for agricultural products and treatments\n- Soil health monitoring\n- Fertilizer guidance\n- User profiles and order management\n- Multi-language support\n\n## Development Setup\n- Server runs on port 5000 (configured for Replit environment)\n- Vite dev server configured with `host: \"0.0.0.0\"` and `allowedHosts: true`\n- HMR (Hot Module Reload) enabled for development\n\n## Architecture\n- **Pages**: Individual route components in `/src/pages/`\n- **Components**: Reusable UI components in `/src/components/`\n- **Assets**: Images and media files in `/src/assets/`\n- **Utilities**: Helper functions in `/src/lib/`\n- **Hooks**: Custom React hooks in `/src/hooks/`\n\n## Current State (September 6, 2025)\n- ✅ Dependencies installed successfully\n- ✅ Vite development server running on port 5000\n- ✅ React Router configured with comprehensive routing\n- ✅ UI components from Radix UI integrated\n- ✅ Deployment configured for Replit autoscale\n- ✅ Project ready for development and testing\n\n## Deployment\nConfigured for Replit autoscale deployment:\n- Build command: `npm run build`\n- Serves static files on port 5000 in production\n- Optimized for stateless web application deployment","size_bytes":1981},"kisan/README.md":{"content":"# Welcome to your Lovable project\n\n## Project info\n\n**URL**: https://lovable.dev/projects/dedd10bc-e4b5-4e63-af47-01942e33b069\n\n## How can I edit this code?\n\nThere are several ways of editing your application.\n\n**Use Lovable**\n\nSimply visit the [Lovable Project](https://lovable.dev/projects/dedd10bc-e4b5-4e63-af47-01942e33b069) and start prompting.\n\nChanges made via Lovable will be committed automatically to this repo.\n\n**Use your preferred IDE**\n\nIf you want to work locally using your own IDE, you can clone this repo and push changes. Pushed changes will also be reflected in Lovable.\n\nThe only requirement is having Node.js & npm installed - [install with nvm](https://github.com/nvm-sh/nvm#installing-and-updating)\n\nFollow these steps:\n\n```sh\n# Step 1: Clone the repository using the project's Git URL.\ngit clone <YOUR_GIT_URL>\n\n# Step 2: Navigate to the project directory.\ncd <YOUR_PROJECT_NAME>\n\n# Step 3: Install the necessary dependencies.\nnpm i\n\n# Step 4: Start the development server with auto-reloading and an instant preview.\nnpm run dev\n```\n\n**Edit a file directly in GitHub**\n\n- Navigate to the desired file(s).\n- Click the \"Edit\" button (pencil icon) at the top right of the file view.\n- Make your changes and commit the changes.\n\n**Use GitHub Codespaces**\n\n- Navigate to the main page of your repository.\n- Click on the \"Code\" button (green button) near the top right.\n- Select the \"Codespaces\" tab.\n- Click on \"New codespace\" to launch a new Codespace environment.\n- Edit files directly within the Codespace and commit and push your changes once you're done.\n\n## What technologies are used for this project?\n\nThis project is built with:\n\n- Vite\n- TypeScript\n- React\n- shadcn-ui\n- Tailwind CSS\n\n## How can I deploy this project?\n\nSimply open [Lovable](https://lovable.dev/projects/dedd10bc-e4b5-4e63-af47-01942e33b069) and click on Share -> Publish.\n\n## Can I connect a custom domain to my Lovable project?\n\nYes, you can!\n\nTo connect a domain, navigate to Project > Settings > Domains and click Connect Domain.\n\nRead more here: [Setting up a custom domain](https://docs.lovable.dev/tips-tricks/custom-domain#step-by-step-guide)\n","size_bytes":2149},"kisan/capacitor.config.ts":{"content":"import type { CapacitorConfig } from '@capacitor/cli';\n\nconst config: CapacitorConfig = {\n  appId: 'app.lovable.dedd10bce4b54e63af4701942e33b069',\n  appName: 'hariyali-mitra-aid',\n  webDir: 'dist',\n  server: {\n    url: 'https://dedd10bc-e4b5-4e63-af47-01942e33b069.lovableproject.com?forceHideBadge=true',\n    cleartext: true\n  },\n  plugins: {\n    Camera: {\n      permissions: [\"camera\", \"photos\"]\n    },\n    PushNotifications: {\n      presentationOptions: [\"badge\", \"sound\", \"alert\"]\n    }\n  }\n};\n\nexport default config;","size_bytes":521},"kisan/eslint.config.js":{"content":"import js from \"@eslint/js\";\nimport globals from \"globals\";\nimport reactHooks from \"eslint-plugin-react-hooks\";\nimport reactRefresh from \"eslint-plugin-react-refresh\";\nimport tseslint from \"typescript-eslint\";\n\nexport default tseslint.config(\n  { ignores: [\"dist\"] },\n  {\n    extends: [js.configs.recommended, ...tseslint.configs.recommended],\n    files: [\"**/*.{ts,tsx}\"],\n    languageOptions: {\n      ecmaVersion: 2020,\n      globals: globals.browser,\n    },\n    plugins: {\n      \"react-hooks\": reactHooks,\n      \"react-refresh\": reactRefresh,\n    },\n    rules: {\n      ...reactHooks.configs.recommended.rules,\n      \"react-refresh/only-export-components\": [\n        \"warn\",\n        { allowConstantExport: true },\n      ],\n      \"@typescript-eslint/no-unused-vars\": \"off\",\n    },\n  }\n);\n","size_bytes":789},"kisan/postcss.config.js":{"content":"export default {\n  plugins: {\n    tailwindcss: {},\n    autoprefixer: {},\n  },\n}\n","size_bytes":80},"kisan/replit.md":{"content":"# Hariyali Mitra - Farm Assistant Application\n\n## Project Overview\nHariyali Mitra is a comprehensive farming assistance application built with React, TypeScript, and Vite. It provides farmers with:\n- Plant disease diagnosis through AI-powered image analysis\n- Agricultural marketplace for buying/selling produce\n- Community features and expert guidance\n- Localized content and multi-language support\n\n## Technology Stack\n- **Frontend**: React 18.3.1 with TypeScript\n- **Build Tool**: Vite 5.4.19\n- **UI Framework**: shadcn/ui components with Tailwind CSS\n- **Routing**: React Router DOM 6.30.1\n- **State Management**: TanStack React Query\n- **Mobile**: Capacitor for hybrid app development\n- **Styling**: Tailwind CSS with custom animations\n\n## Current Setup\n**Status**: ✅ Successfully configured for Replit environment\n**Development Server**: Running on port 5000\n**Last Updated**: September 5, 2025\n\n### Development Configuration\n- Vite dev server configured for Replit (host: 0.0.0.0, port: 5000)\n- All hosts allowed for proper iframe rendering in Replit\n- Hot module replacement enabled for development\n\n### Deployment Configuration\n- **Target**: Autoscale (static site deployment)\n- **Build Command**: `npm run build`\n- **Preview Command**: `npm run preview`\n- **Build Output**: Static files in `dist/` directory\n\n## Project Structure\n```\nsrc/\n├── components/     # Reusable UI components (shadcn/ui)\n├── pages/         # Application pages/routes\n├── hooks/         # Custom React hooks\n├── lib/           # Utilities and configurations\n└── assets/        # Images and static assets\n```\n\n## Key Features Implemented\n1. **Landing & Onboarding**: Multi-step user introduction\n2. **Authentication**: Login/signup system\n3. **Plant Diagnosis**: Camera capture and AI analysis\n4. **Marketplace**: Shopping cart and checkout flow\n5. **Profile Management**: User profile editing\n6. **Community Features**: Guides and treatments\n\n## Development Workflow\n- **Start Development**: Workflow \"Frontend Server\" is configured\n- **Build for Production**: `npm run build`\n- **Preview Production**: `npm run preview`\n\n## Recent Changes\n- September 5, 2025: Initial Replit environment setup completed\n- Migrated from GitHub import to functional Replit project\n- Configured Vite for proper host handling in Replit environment\n- Set up deployment configuration for autoscale deployment","size_bytes":2402},"kisan/tailwind.config.ts":{"content":"import type { Config } from \"tailwindcss\";\n\nexport default {\n\tdarkMode: [\"class\"],\n\tcontent: [\n\t\t\"./pages/**/*.{ts,tsx}\",\n\t\t\"./components/**/*.{ts,tsx}\",\n\t\t\"./app/**/*.{ts,tsx}\",\n\t\t\"./src/**/*.{ts,tsx}\",\n\t],\n\tprefix: \"\",\n\ttheme: {\n\t\tcontainer: {\n\t\t\tcenter: true,\n\t\t\tpadding: '1rem',\n\t\t\tscreens: {\n\t\t\t\t'sm': '640px',\n\t\t\t\t'md': '768px',\n\t\t\t\t'lg': '1024px',\n\t\t\t\t'xl': '1280px',\n\t\t\t\t'2xl': '1400px'\n\t\t\t}\n\t\t},\n\t\textend: {\n\t\t\tfontFamily: {\n\t\t\t\t'inter': ['Inter', 'sans-serif'],\n\t\t\t\t'sans': ['Inter', 'system-ui', 'sans-serif'],\n\t\t\t},\n\t\t\tcolors: {\n\t\t\t\tborder: 'hsl(var(--border))',\n\t\t\t\tinput: 'hsl(var(--input))',\n\t\t\t\tring: 'hsl(var(--ring))',\n\t\t\t\tbackground: 'hsl(var(--background))',\n\t\t\t\tforeground: 'hsl(var(--foreground))',\n\t\t\t\tprimary: {\n\t\t\t\t\tDEFAULT: 'hsl(var(--primary))',\n\t\t\t\t\tforeground: 'hsl(var(--primary-foreground))'\n\t\t\t\t},\n\t\t\t\tsecondary: {\n\t\t\t\t\tDEFAULT: 'hsl(var(--secondary))',\n\t\t\t\t\tforeground: 'hsl(var(--secondary-foreground))'\n\t\t\t\t},\n\t\t\t\tdestructive: {\n\t\t\t\t\tDEFAULT: 'hsl(var(--destructive))',\n\t\t\t\t\tforeground: 'hsl(var(--destructive-foreground))'\n\t\t\t\t},\n\t\t\t\tmuted: {\n\t\t\t\t\tDEFAULT: 'hsl(var(--muted))',\n\t\t\t\t\tforeground: 'hsl(var(--muted-foreground))'\n\t\t\t\t},\n\t\t\t\taccent: {\n\t\t\t\t\tDEFAULT: 'hsl(var(--accent))',\n\t\t\t\t\tforeground: 'hsl(var(--accent-foreground))'\n\t\t\t\t},\n\t\t\t\tpopover: {\n\t\t\t\t\tDEFAULT: 'hsl(var(--popover))',\n\t\t\t\t\tforeground: 'hsl(var(--popover-foreground))'\n\t\t\t\t},\n\t\t\t\tcard: {\n\t\t\t\t\tDEFAULT: 'hsl(var(--card))',\n\t\t\t\t\tforeground: 'hsl(var(--card-foreground))'\n\t\t\t\t},\n\t\t\t\t// Agricultural color system\n\t\t\t\t'agri-primary': 'hsl(var(--primary-green))',\n\t\t\t\t'agri-secondary': 'hsl(var(--secondary-green))',\n\t\t\t\t'agri-accent': 'hsl(var(--accent-green))',\n\t\t\t\t'agri-light': 'hsl(var(--light-green))',\n\t\t\t\t'agri-success': 'hsl(var(--success-green))',\n\t\t\t\t'agri-warning': 'hsl(var(--warning-orange))',\n\t\t\t\t'agri-danger': 'hsl(var(--danger-red))',\n\t\t\t\t'agri-info': 'hsl(var(--info-blue))',\n\t\t\t\t'agri-light-blue': 'hsl(var(--light-blue))',\n\t\t\t\t'agri-purple': 'hsl(var(--purple))',\n\t\t\t\t'agri-light-purple': 'hsl(var(--light-purple))',\n\t\t\t\t'agri-cream': 'hsl(var(--cream))',\n\t\t\t\t'agri-light-cream': 'hsl(var(--light-cream))',\n\t\t\t\t'agri-gray': 'hsl(var(--gray))',\n\t\t\t\t'agri-light-gray': 'hsl(var(--light-gray))',\n\t\t\t\t'text-primary': 'hsl(var(--text-primary))',\n\t\t\t\t'text-secondary': 'hsl(var(--text-secondary))',\n\t\t\t},\n\t\t\tborderRadius: {\n\t\t\t\tlg: 'var(--radius)',\n\t\t\t\tmd: 'calc(var(--radius) - 2px)',\n\t\t\t\tsm: 'calc(var(--radius) - 4px)'\n\t\t\t},\n\t\t\tkeyframes: {\n\t\t\t\t'accordion-down': {\n\t\t\t\t\tfrom: {\n\t\t\t\t\t\theight: '0'\n\t\t\t\t\t},\n\t\t\t\t\tto: {\n\t\t\t\t\t\theight: 'var(--radix-accordion-content-height)'\n\t\t\t\t\t}\n\t\t\t\t},\n\t\t\t\t'accordion-up': {\n\t\t\t\t\tfrom: {\n\t\t\t\t\t\theight: 'var(--radix-accordion-content-height)'\n\t\t\t\t\t},\n\t\t\t\t\tto: {\n\t\t\t\t\t\theight: '0'\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t},\n\t\t\tanimation: {\n\t\t\t\t'accordion-down': 'accordion-down 0.2s ease-out',\n\t\t\t\t'accordion-up': 'accordion-up 0.2s ease-out'\n\t\t\t}\n\t\t}\n\t},\n\tplugins: [require(\"tailwindcss-animate\")],\n} satisfies Config;\n","size_bytes":2944},"kisan/vite.config.ts":{"content":"import { defineConfig } from \"vite\";\nimport react from \"@vitejs/plugin-react-swc\";\nimport path from \"path\";\nimport { componentTagger } from \"lovable-tagger\";\n\n// https://vitejs.dev/config/\nexport default defineConfig(({ mode }) => ({\n  server: {\n    host: \"0.0.0.0\",\n    port: 5000,\n    strictPort: true,\n    allowedHosts: true,\n    hmr: {\n      clientPort: 443,\n      port: 5000\n    }\n  },\n  plugins: [\n    react(),\n    mode === 'development' &&\n    componentTagger(),\n  ].filter(Boolean),\n  resolve: {\n    alias: {\n      \"@\": path.resolve(__dirname, \"./src\"),\n    },\n  },\n}));\n","size_bytes":579},"kisan/src/App.css":{"content":"#root {\n  max-width: 1280px;\n  margin: 0 auto;\n  padding: 2rem;\n  text-align: center;\n}\n\n.logo {\n  height: 6em;\n  padding: 1.5em;\n  will-change: filter;\n  transition: filter 300ms;\n}\n.logo:hover {\n  filter: drop-shadow(0 0 2em #646cffaa);\n}\n.logo.react:hover {\n  filter: drop-shadow(0 0 2em #61dafbaa);\n}\n\n@keyframes logo-spin {\n  from {\n    transform: rotate(0deg);\n  }\n  to {\n    transform: rotate(360deg);\n  }\n}\n\n@media (prefers-reduced-motion: no-preference) {\n  a:nth-of-type(2) .logo {\n    animation: logo-spin infinite 20s linear;\n  }\n}\n\n.card {\n  padding: 2em;\n}\n\n.read-the-docs {\n  color: #888;\n}\n","size_bytes":606},"kisan/src/App.tsx":{"content":"import { Toaster } from \"@/components/ui/toaster\";\nimport { Toaster as Sonner } from \"@/components/ui/sonner\";\nimport { TooltipProvider } from \"@/components/ui/tooltip\";\nimport { QueryClient, QueryClientProvider } from \"@tanstack/react-query\";\nimport { BrowserRouter, Routes, Route } from \"react-router-dom\";\nimport Landing from \"./pages/Landing\";\nimport Splash from \"./pages/Splash\";\nimport Onboarding from \"./pages/Onboarding\";\nimport Signup from \"./pages/Signup\";\nimport Login from \"./pages/Login\";\nimport Home from \"./pages/Home\";\nimport Diagnose from \"./pages/Diagnose\";\nimport CameraCapture from \"./pages/CameraCapture\";\nimport AnalyzePlant from \"./pages/AnalyzePlant\";\nimport DiagnoseResults from \"./pages/DiagnoseResults\";\nimport Shop from \"./pages/Shop\";\nimport Orders from \"./pages/Orders\";\nimport Profile from \"./pages/Profile\";\nimport ProfileEdit from \"./pages/ProfileEdit\";\nimport Treatments from \"./pages/Treatments\";\nimport Guides from \"./pages/Guides\";\nimport NearbyShops from \"./pages/NearbyShops\";\nimport SellProduce from \"./pages/SellProduce\";\nimport Cart from \"./pages/Cart\";\nimport Checkout from \"./pages/Checkout\";\nimport OrderSuccess from \"./pages/OrderSuccess\";\nimport SoilHealth from \"./pages/SoilHealth\";\nimport Weather from \"./pages/Weather\";\nimport FertilizerGuide from \"./pages/FertilizerGuide\";\nimport Advisory from \"./pages/Advisory\";\nimport MarketPrices from \"./pages/MarketPrices\";\nimport MyFertilizerGuidance from \"./pages/MyFertilizerGuidance\";\nimport NotFound from \"./pages/NotFound\";\n\nconst queryClient = new QueryClient();\n\nconst App = () => (\n  <QueryClientProvider client={queryClient}>\n    <TooltipProvider>\n      <Toaster />\n      <Sonner />\n      <BrowserRouter>\n        <Routes>\n          <Route path=\"/\" element={<Landing />} />\n          <Route path=\"/splash\" element={<Splash />} />\n          <Route path=\"/onboarding\" element={<Onboarding />} />\n          <Route path=\"/signup\" element={<Signup />} />\n          <Route path=\"/login\" element={<Login />} />\n          <Route path=\"/home\" element={<Home />} />\n          <Route path=\"/diagnose\" element={<Diagnose />} />\n          <Route path=\"/diagnose/capture\" element={<CameraCapture />} />\n          <Route path=\"/diagnose/analyze\" element={<AnalyzePlant />} />\n          <Route path=\"/diagnose/results\" element={<DiagnoseResults />} />\n          <Route path=\"/shop\" element={<Shop />} />\n          <Route path=\"/orders\" element={<Orders />} />\n          <Route path=\"/profile\" element={<Profile />} />\n          <Route path=\"/profile/edit\" element={<ProfileEdit />} />\n          <Route path=\"/treatments\" element={<Treatments />} />\n          <Route path=\"/guides\" element={<Guides />} />\n          <Route path=\"/shops\" element={<NearbyShops />} />\n          <Route path=\"/sell\" element={<SellProduce />} />\n          <Route path=\"/sell/new\" element={<SellProduce />} />\n          <Route path=\"/cart\" element={<Cart />} />\n          <Route path=\"/checkout\" element={<Checkout />} />\n          <Route path=\"/order-success\" element={<OrderSuccess />} />\n          <Route path=\"/soil-health\" element={<SoilHealth />} />\n          <Route path=\"/weather\" element={<Weather />} />\n          <Route path=\"/fertilizer-guide\" element={<FertilizerGuide />} />\n          <Route path=\"/advisory\" element={<Advisory />} />\n          <Route path=\"/market-prices\" element={<MarketPrices />} />\n          <Route path=\"/my-fertilizer-guidance\" element={<MyFertilizerGuidance />} />\n          {/* ADD ALL CUSTOM ROUTES ABOVE THE CATCH-ALL \"*\" ROUTE */}\n          <Route path=\"*\" element={<NotFound />} />\n        </Routes>\n      </BrowserRouter>\n    </TooltipProvider>\n  </QueryClientProvider>\n);\n\nexport default App;\n","size_bytes":3700},"kisan/src/index.css":{"content":"@import url('https://fonts.googleapis.com/css2?family=Inter:wght@300;400;500;600;700;800;900&display=swap');\n\n@tailwind base;\n@tailwind components;\n@tailwind utilities;\n\n/* KisanMitra Agricultural App Design System */\n\n@layer base {\n  :root {\n    /* Agricultural Color Palette */\n    --primary-green: 158 64% 52%; /* #10B981 */\n    --secondary-green: 160 84% 39%; /* #059669 */\n    --accent-green: 157 69% 38%; /* #047857 */\n    --light-green: 155 100% 97%; /* #ECFDF5 */\n    --success-green: 142 71% 45%; /* #22C55E */\n    \n    /* Functional Colors */\n    --warning-orange: 38 92% 50%; /* #F59E0B */\n    --danger-red: 0 84% 60%; /* #EF4444 */\n    --info-blue: 217 91% 60%; /* #3B82F6 */\n    --light-blue: 214 100% 97%; /* #DBEAFE */\n    --purple: 262 83% 58%; /* #8B5CF6 */\n    --light-purple: 250 100% 97%; /* #EDE9FE */\n    \n    /* Neutral Colors */\n    --text-primary: 220 14% 96%; /* #F8FAFC */\n    --text-secondary: 215 25% 27%; /* #374151 */\n    --gray: 215 20% 65%; /* #9CA3AF */\n    --light-gray: 210 40% 96%; /* #F1F5F9 */\n    --cream: 43 74% 91%; /* #FAF7F0 */\n    --light-cream: 45 100% 97%; /* #FEF7ED */\n    \n    /* Gradients */\n    --gradient-primary: linear-gradient(135deg, hsl(var(--primary-green)), hsl(var(--secondary-green)));\n    --gradient-hero: linear-gradient(135deg, hsl(var(--primary-green)), hsl(var(--accent-green)));\n    --gradient-splash: linear-gradient(180deg, hsl(var(--primary-green)), hsl(var(--accent-green)));\n    --gradient-mesh: linear-gradient(135deg, hsl(var(--primary-green)), hsl(var(--secondary-green)), hsl(var(--success-green)));\n    --gradient-glass: linear-gradient(135deg, hsla(var(--primary-green), 0.1), hsla(var(--secondary-green), 0.1));\n    \n    /* Shadows */\n    --shadow-soft: 0 1px 3px 0 hsla(var(--text-secondary), 0.1), 0 1px 2px 0 hsla(var(--text-secondary), 0.06);\n    --shadow-medium: 0 4px 6px -1px hsla(var(--text-secondary), 0.1), 0 2px 4px -1px hsla(var(--text-secondary), 0.06);\n    --shadow-large: 0 10px 15px -3px hsla(var(--text-secondary), 0.1), 0 4px 6px -2px hsla(var(--text-secondary), 0.05);\n    --shadow-glow: 0 0 20px hsla(var(--primary-green), 0.3);\n    --shadow-inner: inset 0 2px 4px 0 hsla(var(--text-secondary), 0.06);\n    \n    /* Animations */\n    --transition-fast: all 0.15s ease-out;\n    --transition-smooth: all 0.3s cubic-bezier(0.4, 0, 0.2, 1);\n    --transition-spring: all 0.5s cubic-bezier(0.34, 1.56, 0.64, 1);\n    \n    /* Spacing System */\n    --space-xs: 0.25rem; /* 4px */\n    --space-sm: 0.5rem;  /* 8px */\n    --space-md: 1rem;    /* 16px */\n    --space-lg: 1.5rem;  /* 24px */\n    --space-xl: 2rem;    /* 32px */\n    --space-2xl: 3rem;   /* 48px */\n    \n    /* Border Radius */\n    --radius-sm: 0.375rem; /* 6px */\n    --radius-md: 0.75rem;  /* 12px */\n    --radius-lg: 1rem;     /* 16px */\n    --radius-xl: 1.25rem;  /* 20px */\n    --radius-full: 9999px;\n    \n    /* Standard design tokens */\n    --background: var(--text-primary);\n    --foreground: var(--text-secondary);\n    --card: var(--text-primary);\n    --card-foreground: var(--text-secondary);\n    --popover: var(--text-primary);\n    --popover-foreground: var(--text-secondary);\n    --primary: var(--primary-green);\n    --primary-foreground: var(--text-primary);\n    --secondary: var(--light-gray);\n    --secondary-foreground: var(--text-secondary);\n    --muted: var(--light-gray);\n    --muted-foreground: var(--gray);\n    --accent: var(--light-green);\n    --accent-foreground: var(--text-secondary);\n    --destructive: var(--danger-red);\n    --destructive-foreground: var(--text-primary);\n    --border: 214.3 31.8% 91.4%;\n    --input: 214.3 31.8% 91.4%;\n    --ring: var(--primary-green);\n    --radius: var(--radius-md);\n  }\n\n  .dark {\n    --background: 222.2 84% 4.9%;\n    --foreground: 210 40% 98%;\n\n    --card: 222.2 84% 4.9%;\n    --card-foreground: 210 40% 98%;\n\n    --popover: 222.2 84% 4.9%;\n    --popover-foreground: 210 40% 98%;\n\n    --primary: 210 40% 98%;\n    --primary-foreground: 222.2 47.4% 11.2%;\n\n    --secondary: 217.2 32.6% 17.5%;\n    --secondary-foreground: 210 40% 98%;\n\n    --muted: 217.2 32.6% 17.5%;\n    --muted-foreground: 215 20.2% 65.1%;\n\n    --accent: 217.2 32.6% 17.5%;\n    --accent-foreground: 210 40% 98%;\n\n    --destructive: 0 62.8% 30.6%;\n    --destructive-foreground: 210 40% 98%;\n\n    --border: 217.2 32.6% 17.5%;\n    --input: 217.2 32.6% 17.5%;\n    --ring: 212.7 26.8% 83.9%;\n    --sidebar-background: 240 5.9% 10%;\n    --sidebar-foreground: 240 4.8% 95.9%;\n    --sidebar-primary: 224.3 76.3% 48%;\n    --sidebar-primary-foreground: 0 0% 100%;\n    --sidebar-accent: 240 3.7% 15.9%;\n    --sidebar-accent-foreground: 240 4.8% 95.9%;\n    --sidebar-border: 240 3.7% 15.9%;\n    --sidebar-ring: 217.2 91.2% 59.8%;\n  }\n}\n\n@layer base {\n  * {\n    @apply border-border;\n  }\n\n  body {\n    @apply bg-background text-foreground font-inter;\n    font-family: 'Inter', -apple-system, BlinkMacSystemFont, system-ui, sans-serif;\n  }\n}\n\n@layer components {\n  /* Agricultural App Components */\n  .glass-card {\n    @apply backdrop-blur-lg bg-white/80 border border-white/20 shadow-lg;\n  }\n  \n  .gradient-primary {\n    background: var(--gradient-primary);\n  }\n  \n  .gradient-hero {\n    background: var(--gradient-hero);\n  }\n  \n  .gradient-splash {\n    background: var(--gradient-splash);\n  }\n  \n  .gradient-mesh {\n    background: var(--gradient-mesh);\n  }\n  \n  .gradient-glass {\n    background: var(--gradient-glass);\n  }\n  \n  .shadow-glow {\n    box-shadow: var(--shadow-glow);\n  }\n  \n  .shadow-soft {\n    box-shadow: var(--shadow-soft);\n  }\n  \n  .shadow-medium {\n    box-shadow: var(--shadow-medium);\n  }\n  \n  .shadow-large {\n    box-shadow: var(--shadow-large);\n  }\n  \n  .transition-smooth {\n    transition: var(--transition-smooth);\n  }\n  \n  .transition-spring {\n    transition: var(--transition-spring);\n  }\n  \n  /* Button Variants */\n  .btn-primary {\n    @apply bg-primary hover:bg-primary/90 text-primary-foreground font-semibold py-4 px-6 rounded-xl transition-all duration-300 transform hover:scale-105 active:scale-95 shadow-md hover:shadow-lg;\n  }\n  \n  .btn-secondary {\n    @apply bg-white border-2 border-primary text-primary hover:bg-primary hover:text-white font-semibold py-4 px-6 rounded-xl transition-all duration-300 transform hover:scale-105 active:scale-95;\n  }\n  \n  .btn-glass {\n    @apply glass-card text-primary hover:bg-white/90 font-semibold py-4 px-6 rounded-xl transition-all duration-300 transform hover:scale-105 active:scale-95;\n  }\n  \n  /* Agricultural Theme Components */\n  .plant-card {\n    @apply bg-white rounded-2xl p-6 shadow-medium hover:shadow-large transition-all duration-300 border border-gray-100 hover:border-primary/20;\n  }\n  \n  .weather-card {\n    @apply bg-gradient-to-br from-blue-50 to-blue-100 rounded-2xl p-6 shadow-medium border border-blue-200;\n  }\n  \n  .tip-card {\n    @apply bg-gradient-to-r from-yellow-50 to-orange-50 rounded-2xl p-6 shadow-medium border-l-4 border-yellow-400;\n  }\n  \n  .diagnosis-card {\n    @apply bg-white rounded-2xl p-6 shadow-large border border-gray-100;\n  }\n  \n  /* Floating Animation */\n  .float-animation {\n    animation: float 3s ease-in-out infinite;\n  }\n  \n  .pulse-glow {\n    animation: pulse-glow 2s ease-in-out infinite;\n  }\n  \n  .grow-animation {\n    animation: grow 2s ease-out forwards;\n  }\n  \n  /* Mobile Optimizations */\n  .mobile-container {\n    @apply max-w-sm mx-auto min-h-screen bg-background relative overflow-hidden;\n  }\n  \n  .mobile-header {\n    @apply flex items-center justify-between p-4 bg-white shadow-soft sticky top-0 z-10;\n  }\n  \n  .mobile-content {\n    @apply px-4 pb-24;\n  }\n  \n  .mobile-bottom-nav {\n    @apply fixed bottom-0 left-1/2 transform -translate-x-1/2 w-full max-w-sm bg-white border-t border-gray-200 shadow-large;\n  }\n  \n  /* Agriculture Color Utilities */\n  .text-agri-primary { color: hsl(var(--primary-green)); }\n  .text-agri-secondary { color: hsl(var(--secondary-green)); }\n  .text-agri-accent { color: hsl(var(--accent-green)); }\n  .text-agri-success { color: hsl(var(--success-green)); }\n  .text-agri-warning { color: hsl(var(--warning-orange)); }\n  .text-agri-danger { color: hsl(var(--danger-red)); }\n  .text-agri-info { color: hsl(var(--info-blue)); }\n  .text-agri-purple { color: hsl(var(--purple)); }\n  \n  .bg-agri-primary { background-color: hsl(var(--primary-green)); }\n  .bg-agri-secondary { background-color: hsl(var(--secondary-green)); }\n  .bg-agri-accent { background-color: hsl(var(--accent-green)); }\n  .bg-agri-light { background-color: hsl(var(--light-green)); }\n  .bg-agri-success { background-color: hsl(var(--success-green)); }\n  .bg-agri-warning { background-color: hsl(var(--warning-orange)); }\n  .bg-agri-danger { background-color: hsl(var(--danger-red)); }\n  .bg-agri-info { background-color: hsl(var(--info-blue)); }\n  .bg-agri-light-blue { background-color: hsl(var(--light-blue)); }\n  .bg-agri-purple { background-color: hsl(var(--purple)); }\n  .bg-agri-light-purple { background-color: hsl(var(--light-purple)); }\n  .bg-agri-cream { background-color: hsl(var(--cream)); }\n  .bg-agri-light-cream { background-color: hsl(var(--light-cream)); }\n}\n\n@layer utilities {\n  /* Keyframe Animations */\n  @keyframes float {\n    0%, 100% {\n      transform: translateY(0px);\n    }\n    50% {\n      transform: translateY(-10px);\n    }\n  }\n  \n  @keyframes pulse-glow {\n    0%, 100% {\n      box-shadow: 0 0 5px hsla(var(--primary-green), 0.5);\n    }\n    50% {\n      box-shadow: 0 0 20px hsla(var(--primary-green), 0.8);\n    }\n  }\n  \n  @keyframes grow {\n    0% {\n      transform: scale(0) rotate(-180deg);\n      opacity: 0;\n    }\n    100% {\n      transform: scale(1) rotate(0deg);\n      opacity: 1;\n    }\n  }\n  \n  @keyframes slideUp {\n    0% {\n      transform: translateY(100%);\n      opacity: 0;\n    }\n    100% {\n      transform: translateY(0);\n      opacity: 1;\n    }\n  }\n  \n  @keyframes fadeIn {\n    0% {\n      opacity: 0;\n      transform: translateY(20px);\n    }\n    100% {\n      opacity: 1;\n      transform: translateY(0);\n    }\n  }\n  \n  @keyframes typing {\n    0% { width: 0; }\n    100% { width: 100%; }\n  }\n  \n  @keyframes shimmer {\n    0% {\n      background-position: -200% 0;\n    }\n    100% {\n      background-position: 200% 0;\n    }\n  }\n  \n  .animate-slide-up {\n    animation: slideUp 0.5s ease-out;\n  }\n  \n  .animate-fade-in {\n    animation: fadeIn 0.6s ease-out;\n  }\n  \n  .animate-typing {\n    animation: typing 2s steps(20, end);\n  }\n  \n  .animate-shimmer {\n    background: linear-gradient(90deg, transparent, rgba(255,255,255,0.4), transparent);\n    background-size: 200% 100%;\n    animation: shimmer 1.5s infinite;\n  }\n}","size_bytes":10545},"kisan/src/main.tsx":{"content":"import { createRoot } from 'react-dom/client'\nimport App from './App.tsx'\nimport './index.css'\n\ncreateRoot(document.getElementById(\"root\")!).render(<App />);\n","size_bytes":158},"kisan/src/vite-env.d.ts":{"content":"/// <reference types=\"vite/client\" />\n","size_bytes":38},"kisan/src/components/LanguageSwitcher.tsx":{"content":"import { useState } from 'react';\nimport { Globe } from 'lucide-react';\nimport {\n  Select,\n  SelectContent,\n  SelectItem,\n  SelectTrigger,\n  SelectValue,\n} from '@/components/ui/select';\n\nconst languages = [\n  { code: 'en', name: 'English', nativeName: 'English' },\n  { code: 'hi', name: 'Hindi', nativeName: 'हिंदी' },\n  { code: 'pa', name: 'Punjabi', nativeName: 'ਪੰਜਾਬੀ' },\n  { code: 'mr', name: 'Marathi', nativeName: 'मराठी' },\n  { code: 'te', name: 'Telugu', nativeName: 'తెలుగు' },\n];\n\nconst LanguageSwitcher = () => {\n  const [selectedLanguage, setSelectedLanguage] = useState('en');\n\n  return (\n    <Select value={selectedLanguage} onValueChange={setSelectedLanguage}>\n      <SelectTrigger className=\"w-auto min-w-[120px] bg-white/80 backdrop-blur-sm border-white/20 shadow-soft\">\n        <div className=\"flex items-center space-x-2\">\n          <Globe className=\"w-4 h-4 text-agri-primary\" />\n          <SelectValue />\n        </div>\n      </SelectTrigger>\n      <SelectContent className=\"bg-white/95 backdrop-blur-lg border-white/20 shadow-large\">\n        {languages.map((lang) => (\n          <SelectItem\n            key={lang.code}\n            value={lang.code}\n            className=\"hover:bg-agri-light/50 transition-colors\"\n          >\n            <div className=\"flex flex-col\">\n              <span className=\"font-medium\">{lang.name}</span>\n              <span className=\"text-xs text-muted-foreground\">{lang.nativeName}</span>\n            </div>\n          </SelectItem>\n        ))}\n      </SelectContent>\n    </Select>\n  );\n};\n\nexport default LanguageSwitcher;","size_bytes":1621},"kisan/src/components/NotificationPanel.tsx":{"content":"\nimport { useState } from 'react';\nimport { X, Bell, Package, TrendingUp, AlertCircle, CheckCircle, Clock, MessageCircle } from 'lucide-react';\nimport { Button } from '@/components/ui/button';\nimport { Badge } from '@/components/ui/badge';\n\ninterface NotificationPanelProps {\n  isOpen: boolean;\n  onClose: () => void;\n}\n\nconst NotificationPanel = ({ isOpen, onClose }: NotificationPanelProps) => {\n  const [notifications] = useState([\n    {\n      id: 1,\n      type: 'market_request',\n      title: 'Market Request Accepted!',\n      message: 'FreshMart has accepted your tomatoes order for ₹800',\n      time: '2 minutes ago',\n      icon: CheckCircle,\n      iconColor: 'text-green-600',\n      bgColor: 'bg-green-50',\n      unread: true\n    },\n    {\n      id: 2,\n      type: 'price_alert',\n      title: 'Price Alert',\n      message: 'Tomato prices increased by ₹3/kg in your area',\n      time: '1 hour ago',\n      icon: TrendingUp,\n      iconColor: 'text-blue-600',\n      bgColor: 'bg-blue-50',\n      unread: true\n    },\n    {\n      id: 3,\n      type: 'treatment_reminder',\n      title: 'Treatment Reminder',\n      message: 'Time to apply fungicide to your wheat crop',\n      time: '3 hours ago',\n      icon: AlertCircle,\n      iconColor: 'text-orange-600',\n      bgColor: 'bg-orange-50',\n      unread: true\n    },\n    {\n      id: 4,\n      type: 'order_delivered',\n      title: 'Order Delivered',\n      message: 'Your fertilizer order has been delivered successfully',\n      time: 'Yesterday',\n      icon: Package,\n      iconColor: 'text-green-600',\n      bgColor: 'bg-green-50',\n      unread: false\n    },\n    {\n      id: 5,\n      type: 'buyer_inquiry',\n      title: 'New Buyer Inquiry',\n      message: 'Someone is interested in your green chilies listing',\n      time: '2 days ago',\n      icon: MessageCircle,\n      iconColor: 'text-purple-600',\n      bgColor: 'bg-purple-50',\n      unread: false\n    },\n    {\n      id: 6,\n      type: 'weather_alert',\n      title: 'Weather Alert',\n      message: 'Heavy rain expected tomorrow. Protect your crops',\n      time: '2 days ago',\n      icon: AlertCircle,\n      iconColor: 'text-red-600',\n      bgColor: 'bg-red-50',\n      unread: false\n    }\n  ]);\n\n  if (!isOpen) return null;\n\n  const unreadCount = notifications.filter(n => n.unread).length;\n\n  return (\n    <div className=\"fixed inset-0 bg-black/50 z-50 flex justify-end\">\n      <div className=\"bg-white w-full max-w-sm h-full overflow-hidden shadow-xl animate-slide-in-right\">\n        {/* Header */}\n        <div className=\"bg-gradient-to-r from-green-500 to-green-600 p-4 text-white\">\n          <div className=\"flex items-center justify-between\">\n            <div className=\"flex items-center space-x-2\">\n              <Bell className=\"w-6 h-6\" />\n              <h2 className=\"text-xl font-bold\">Notifications</h2>\n              {unreadCount > 0 && (\n                <Badge className=\"bg-red-500 text-white\">\n                  {unreadCount}\n                </Badge>\n              )}\n            </div>\n            <button\n              onClick={onClose}\n              className=\"p-1 rounded-full hover:bg-white/20 transition-colors\"\n            >\n              <X className=\"w-6 h-6\" />\n            </button>\n          </div>\n        </div>\n\n        {/* Notifications List */}\n        <div className=\"flex-1 overflow-y-auto max-h-[calc(100vh-200px)]\">\n          <div className=\"p-4 space-y-4 pb-20\">\n            {notifications.map((notification) => (\n              <div\n                key={notification.id}\n                className={`p-4 rounded-xl border transition-all hover:shadow-md ${\n                  notification.unread \n                    ? 'border-green-200 bg-green-50/50' \n                    : 'border-gray-200 bg-white'\n                }`}\n              >\n                <div className=\"flex items-start space-x-3\">\n                  <div className={`w-10 h-10 ${notification.bgColor} rounded-full flex items-center justify-center flex-shrink-0`}>\n                    <notification.icon className={`w-5 h-5 ${notification.iconColor}`} />\n                  </div>\n                  \n                  <div className=\"flex-1 min-w-0\">\n                    <div className=\"flex items-start justify-between\">\n                      <h4 className=\"font-semibold text-gray-900 text-sm\">\n                        {notification.title}\n                      </h4>\n                      {notification.unread && (\n                        <div className=\"w-2 h-2 bg-green-500 rounded-full flex-shrink-0 mt-1\"></div>\n                      )}\n                    </div>\n                    \n                    <p className=\"text-sm text-gray-600 mt-1 leading-relaxed\">\n                      {notification.message}\n                    </p>\n                    \n                    <div className=\"flex items-center space-x-1 mt-2\">\n                      <Clock className=\"w-3 h-3 text-gray-400\" />\n                      <span className=\"text-xs text-gray-400\">{notification.time}</span>\n                    </div>\n                  </div>\n                </div>\n              </div>\n            ))}\n          </div>\n        </div>\n\n        {/* Footer */}\n        <div className=\"border-t border-gray-200 p-4\">\n          <Button \n            variant=\"outline\" \n            className=\"w-full\"\n            onClick={onClose}\n          >\n            Mark All as Read\n          </Button>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default NotificationPanel;\n","size_bytes":5467},"kisan/src/hooks/use-mobile.tsx":{"content":"import * as React from \"react\"\n\nconst MOBILE_BREAKPOINT = 768\n\nexport function useIsMobile() {\n  const [isMobile, setIsMobile] = React.useState<boolean | undefined>(undefined)\n\n  React.useEffect(() => {\n    const mql = window.matchMedia(`(max-width: ${MOBILE_BREAKPOINT - 1}px)`)\n    const onChange = () => {\n      setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    }\n    mql.addEventListener(\"change\", onChange)\n    setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    return () => mql.removeEventListener(\"change\", onChange)\n  }, [])\n\n  return !!isMobile\n}\n","size_bytes":565},"kisan/src/hooks/use-toast.ts":{"content":"import * as React from \"react\"\n\nimport type {\n  ToastActionElement,\n  ToastProps,\n} from \"@/components/ui/toast\"\n\nconst TOAST_LIMIT = 1\nconst TOAST_REMOVE_DELAY = 1000000\n\ntype ToasterToast = ToastProps & {\n  id: string\n  title?: React.ReactNode\n  description?: React.ReactNode\n  action?: ToastActionElement\n}\n\nconst actionTypes = {\n  ADD_TOAST: \"ADD_TOAST\",\n  UPDATE_TOAST: \"UPDATE_TOAST\",\n  DISMISS_TOAST: \"DISMISS_TOAST\",\n  REMOVE_TOAST: \"REMOVE_TOAST\",\n} as const\n\nlet count = 0\n\nfunction genId() {\n  count = (count + 1) % Number.MAX_SAFE_INTEGER\n  return count.toString()\n}\n\ntype ActionType = typeof actionTypes\n\ntype Action =\n  | {\n      type: ActionType[\"ADD_TOAST\"]\n      toast: ToasterToast\n    }\n  | {\n      type: ActionType[\"UPDATE_TOAST\"]\n      toast: Partial<ToasterToast>\n    }\n  | {\n      type: ActionType[\"DISMISS_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n  | {\n      type: ActionType[\"REMOVE_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n\ninterface State {\n  toasts: ToasterToast[]\n}\n\nconst toastTimeouts = new Map<string, ReturnType<typeof setTimeout>>()\n\nconst addToRemoveQueue = (toastId: string) => {\n  if (toastTimeouts.has(toastId)) {\n    return\n  }\n\n  const timeout = setTimeout(() => {\n    toastTimeouts.delete(toastId)\n    dispatch({\n      type: \"REMOVE_TOAST\",\n      toastId: toastId,\n    })\n  }, TOAST_REMOVE_DELAY)\n\n  toastTimeouts.set(toastId, timeout)\n}\n\nexport const reducer = (state: State, action: Action): State => {\n  switch (action.type) {\n    case \"ADD_TOAST\":\n      return {\n        ...state,\n        toasts: [action.toast, ...state.toasts].slice(0, TOAST_LIMIT),\n      }\n\n    case \"UPDATE_TOAST\":\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === action.toast.id ? { ...t, ...action.toast } : t\n        ),\n      }\n\n    case \"DISMISS_TOAST\": {\n      const { toastId } = action\n\n      // ! Side effects ! - This could be extracted into a dismissToast() action,\n      // but I'll keep it here for simplicity\n      if (toastId) {\n        addToRemoveQueue(toastId)\n      } else {\n        state.toasts.forEach((toast) => {\n          addToRemoveQueue(toast.id)\n        })\n      }\n\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === toastId || toastId === undefined\n            ? {\n                ...t,\n                open: false,\n              }\n            : t\n        ),\n      }\n    }\n    case \"REMOVE_TOAST\":\n      if (action.toastId === undefined) {\n        return {\n          ...state,\n          toasts: [],\n        }\n      }\n      return {\n        ...state,\n        toasts: state.toasts.filter((t) => t.id !== action.toastId),\n      }\n  }\n}\n\nconst listeners: Array<(state: State) => void> = []\n\nlet memoryState: State = { toasts: [] }\n\nfunction dispatch(action: Action) {\n  memoryState = reducer(memoryState, action)\n  listeners.forEach((listener) => {\n    listener(memoryState)\n  })\n}\n\ntype Toast = Omit<ToasterToast, \"id\">\n\nfunction toast({ ...props }: Toast) {\n  const id = genId()\n\n  const update = (props: ToasterToast) =>\n    dispatch({\n      type: \"UPDATE_TOAST\",\n      toast: { ...props, id },\n    })\n  const dismiss = () => dispatch({ type: \"DISMISS_TOAST\", toastId: id })\n\n  dispatch({\n    type: \"ADD_TOAST\",\n    toast: {\n      ...props,\n      id,\n      open: true,\n      onOpenChange: (open) => {\n        if (!open) dismiss()\n      },\n    },\n  })\n\n  return {\n    id: id,\n    dismiss,\n    update,\n  }\n}\n\nfunction useToast() {\n  const [state, setState] = React.useState<State>(memoryState)\n\n  React.useEffect(() => {\n    listeners.push(setState)\n    return () => {\n      const index = listeners.indexOf(setState)\n      if (index > -1) {\n        listeners.splice(index, 1)\n      }\n    }\n  }, [state])\n\n  return {\n    ...state,\n    toast,\n    dismiss: (toastId?: string) => dispatch({ type: \"DISMISS_TOAST\", toastId }),\n  }\n}\n\nexport { useToast, toast }\n","size_bytes":3895},"kisan/src/lib/cart.ts":{"content":"// Cart state management using localStorage\nexport interface CartItem {\n  id: string;\n  name: string;\n  brand: string;\n  price: number;\n  originalPrice: number;\n  quantity: number;\n  size: string;\n  category: string;\n  features: string[];\n  inStock: boolean;\n}\n\nexport interface Order {\n  id: string;\n  status: 'processing' | 'shipped' | 'delivered' | 'cancelled';\n  items: CartItem[];\n  subtotal: number;\n  discount: number;\n  deliveryFee: number;\n  total: number;\n  orderDate: string;\n  estimatedDelivery?: string;\n  deliveryDate?: string;\n  address: string;\n  paymentMethod: string;\n}\n\nclass CartManager {\n  private static instance: CartManager;\n  private cartKey = 'hariyali_mitra_cart';\n  private ordersKey = 'hariyali_mitra_orders';\n\n  static getInstance(): CartManager {\n    if (!CartManager.instance) {\n      CartManager.instance = new CartManager();\n    }\n    return CartManager.instance;\n  }\n\n  // Cart operations\n  getCart(): CartItem[] {\n    try {\n      const cart = localStorage.getItem(this.cartKey);\n      return cart ? JSON.parse(cart) : [];\n    } catch {\n      return [];\n    }\n  }\n\n  addToCart(product: any): void {\n    const cart = this.getCart();\n    const existingItem = cart.find(item => item.id === product.id);\n\n    if (existingItem) {\n      existingItem.quantity += 1;\n    } else {\n      const cartItem: CartItem = {\n        id: product.id,\n        name: product.name,\n        brand: product.brand,\n        price: product.price,\n        originalPrice: product.originalPrice,\n        quantity: 1,\n        size: product.size,\n        category: product.category,\n        features: product.features,\n        inStock: product.inStock\n      };\n      cart.push(cartItem);\n    }\n\n    localStorage.setItem(this.cartKey, JSON.stringify(cart));\n    this.notifyCartChange();\n  }\n\n  removeFromCart(productId: string): void {\n    const cart = this.getCart();\n    const existingItem = cart.find(item => item.id === productId);\n\n    if (existingItem && existingItem.quantity > 1) {\n      existingItem.quantity -= 1;\n    } else {\n      const index = cart.findIndex(item => item.id === productId);\n      if (index > -1) {\n        cart.splice(index, 1);\n      }\n    }\n\n    localStorage.setItem(this.cartKey, JSON.stringify(cart));\n    this.notifyCartChange();\n  }\n\n  updateQuantity(productId: string, quantity: number): void {\n    if (quantity <= 0) {\n      this.deleteItem(productId);\n      return;\n    }\n\n    const cart = this.getCart();\n    const existingItem = cart.find(item => item.id === productId);\n\n    if (existingItem) {\n      existingItem.quantity = quantity;\n      localStorage.setItem(this.cartKey, JSON.stringify(cart));\n      this.notifyCartChange();\n    }\n  }\n\n  deleteItem(productId: string): void {\n    const cart = this.getCart();\n    const filteredCart = cart.filter(item => item.id !== productId);\n    localStorage.setItem(this.cartKey, JSON.stringify(filteredCart));\n    this.notifyCartChange();\n  }\n\n  clearCart(): void {\n    localStorage.removeItem(this.cartKey);\n    this.notifyCartChange();\n  }\n\n  getCartCount(): number {\n    return this.getCart().reduce((total, item) => total + item.quantity, 0);\n  }\n\n  getCartTotal(): number {\n    return this.getCart().reduce((total, item) => total + (item.price * item.quantity), 0);\n  }\n\n  getCartSubtotal(): number {\n    return this.getCart().reduce((total, item) => total + (item.price * item.quantity), 0);\n  }\n\n  getCartSavings(): number {\n    return this.getCart().reduce((total, item) => total + ((item.originalPrice - item.price) * item.quantity), 0);\n  }\n\n  // Order operations\n  getOrders(): Order[] {\n    try {\n      const orders = localStorage.getItem(this.ordersKey);\n      return orders ? JSON.parse(orders) : [];\n    } catch {\n      return [];\n    }\n  }\n\n  createOrder(orderData: {\n    address: string;\n    paymentMethod: string;\n    discount?: number;\n  }): Order {\n    const cart = this.getCart();\n    if (cart.length === 0) {\n      throw new Error('Cart is empty');\n    }\n\n    const subtotal = this.getCartSubtotal();\n    const discount = orderData.discount || 0;\n    const deliveryFee = subtotal >= 500 ? 0 : 40;\n    const total = subtotal - discount + deliveryFee;\n\n    const orderId = 'ORD' + Date.now();\n    const orderDate = new Date().toISOString();\n    const estimatedDelivery = new Date(Date.now() + 24 * 60 * 60 * 1000).toISOString(); // Tomorrow\n\n    const order: Order = {\n      id: orderId,\n      status: 'processing',\n      items: [...cart],\n      subtotal,\n      discount,\n      deliveryFee,\n      total,\n      orderDate,\n      estimatedDelivery,\n      address: orderData.address,\n      paymentMethod: orderData.paymentMethod\n    };\n\n    const orders = this.getOrders();\n    orders.unshift(order); // Add to beginning\n    localStorage.setItem(this.ordersKey, JSON.stringify(orders));\n\n    // Clear cart after successful order\n    this.clearCart();\n\n    return order;\n  }\n\n  updateOrderStatus(orderId: string, status: Order['status']): void {\n    const orders = this.getOrders();\n    const order = orders.find(o => o.id === orderId);\n    \n    if (order) {\n      order.status = status;\n      if (status === 'delivered') {\n        order.deliveryDate = new Date().toISOString();\n      }\n      localStorage.setItem(this.ordersKey, JSON.stringify(orders));\n    }\n  }\n\n  // Event system for cart changes\n  private notifyCartChange(): void {\n    window.dispatchEvent(new CustomEvent('cartChanged'));\n  }\n\n  // Subscribe to cart changes\n  onCartChange(callback: () => void): () => void {\n    const handler = () => callback();\n    window.addEventListener('cartChanged', handler);\n    \n    // Return unsubscribe function\n    return () => window.removeEventListener('cartChanged', handler);\n  }\n}\n\nexport const cartManager = CartManager.getInstance();","size_bytes":5744},"kisan/src/lib/utils.ts":{"content":"import { clsx, type ClassValue } from \"clsx\"\nimport { twMerge } from \"tailwind-merge\"\n\nexport function cn(...inputs: ClassValue[]) {\n  return twMerge(clsx(inputs))\n}\n","size_bytes":166},"kisan/src/lib/weather.ts":{"content":"// Weather service for fetching real weather data from OpenWeatherMap API\n\nexport interface WeatherData {\n  location: string;\n  temperature: number;\n  description: string;\n  humidity: number;\n  windSpeed: number;\n  icon: string;\n  feelsLike: number;\n  pressure: number;\n  visibility: number;\n  uvIndex: number;\n  sunrise: number;\n  sunset: number;\n}\n\nexport interface DailyForecast {\n  date: string;\n  dayName: string;\n  temperature: {\n    max: number;\n    min: number;\n  };\n  description: string;\n  icon: string;\n  humidity: number;\n  windSpeed: number;\n  precipitation: number;\n}\n\nexport interface WeatherAlert {\n  title: string;\n  description: string;\n  severity: 'minor' | 'moderate' | 'severe' | 'extreme';\n  type: string;\n}\n\nclass WeatherService {\n  private apiKey: string;\n  private baseUrl = 'https://api.openweathermap.org/data/2.5';\n\n  constructor() {\n    // In Replit, environment variables are available as VITE_ prefixed variables\n    // Or we'll use a hardcoded approach for demo\n    this.apiKey = import.meta.env.VITE_OPENWEATHER_API_KEY || 'demo_key';\n  }\n\n  // Get API key - will be initialized in constructor\n  private getApiKey(): string {\n    // For now, let's use a demo approach while the environment variable is being set up\n    // We'll return the demo key and show sample data\n    return this.apiKey || 'demo_key';\n  }\n\n  // Get current weather by coordinates\n  async getCurrentWeather(lat: number, lon: number): Promise<WeatherData> {\n    try {\n      const apiKey = this.getApiKey();\n      const response = await fetch(\n        `${this.baseUrl}/weather?lat=${lat}&lon=${lon}&appid=${apiKey}&units=metric`\n      );\n      \n      if (!response.ok) {\n        throw new Error(`Weather API error: ${response.status}`);\n      }\n      \n      const data = await response.json();\n      \n      return {\n        location: `${data.name}, ${data.sys.country}`,\n        temperature: Math.round(data.main.temp),\n        description: data.weather[0].description,\n        humidity: data.main.humidity,\n        windSpeed: data.wind.speed,\n        icon: data.weather[0].icon,\n        feelsLike: Math.round(data.main.feels_like),\n        pressure: data.main.pressure,\n        visibility: data.visibility / 1000, // Convert to km\n        uvIndex: 0, // Will be fetched from UV API if needed\n        sunrise: data.sys.sunrise,\n        sunset: data.sys.sunset\n      };\n    } catch (error) {\n      console.error('Error fetching current weather:', error);\n      throw error;\n    }\n  }\n\n  // Get 7-day forecast\n  async getForecast(lat: number, lon: number): Promise<DailyForecast[]> {\n    try {\n      const apiKey = this.getApiKey();\n      const response = await fetch(\n        `${this.baseUrl}/forecast?lat=${lat}&lon=${lon}&appid=${apiKey}&units=metric`\n      );\n      \n      if (!response.ok) {\n        throw new Error(`Forecast API error: ${response.status}`);\n      }\n      \n      const data = await response.json();\n      \n      // Group by day and take one forecast per day\n      const dailyForecasts: DailyForecast[] = [];\n      const processedDates = new Set();\n      \n      data.list.forEach((item: any) => {\n        const date = new Date(item.dt * 1000);\n        const dateString = date.toISOString().split('T')[0];\n        \n        if (!processedDates.has(dateString) && dailyForecasts.length < 7) {\n          const dayName = date.toLocaleDateString('en-US', { weekday: 'short' });\n          \n          dailyForecasts.push({\n            date: dateString,\n            dayName,\n            temperature: {\n              max: Math.round(item.main.temp_max),\n              min: Math.round(item.main.temp_min)\n            },\n            description: item.weather[0].description,\n            icon: item.weather[0].icon,\n            humidity: item.main.humidity,\n            windSpeed: item.wind.speed,\n            precipitation: item.rain ? item.rain['3h'] || 0 : 0\n          });\n          \n          processedDates.add(dateString);\n        }\n      });\n      \n      return dailyForecasts;\n    } catch (error) {\n      console.error('Error fetching forecast:', error);\n      throw error;\n    }\n  }\n\n  // Get weather by city name\n  async getWeatherByCity(city: string): Promise<WeatherData> {\n    try {\n      const apiKey = this.getApiKey();\n      const response = await fetch(\n        `${this.baseUrl}/weather?q=${encodeURIComponent(city)}&appid=${apiKey}&units=metric`\n      );\n      \n      if (!response.ok) {\n        throw new Error(`Weather API error: ${response.status}`);\n      }\n      \n      const data = await response.json();\n      \n      return {\n        location: `${data.name}, ${data.sys.country}`,\n        temperature: Math.round(data.main.temp),\n        description: data.weather[0].description,\n        humidity: data.main.humidity,\n        windSpeed: data.wind.speed,\n        icon: data.weather[0].icon,\n        feelsLike: Math.round(data.main.feels_like),\n        pressure: data.main.pressure,\n        visibility: data.visibility / 1000,\n        uvIndex: 0,\n        sunrise: data.sys.sunrise,\n        sunset: data.sys.sunset\n      };\n    } catch (error) {\n      console.error('Error fetching weather by city:', error);\n      throw error;\n    }\n  }\n\n  // Get current location using browser's geolocation API\n  async getCurrentLocation(): Promise<{ lat: number; lon: number }> {\n    return new Promise((resolve, reject) => {\n      if (!navigator.geolocation) {\n        reject(new Error('Geolocation not supported'));\n        return;\n      }\n\n      navigator.geolocation.getCurrentPosition(\n        (position) => {\n          resolve({\n            lat: position.coords.latitude,\n            lon: position.coords.longitude\n          });\n        },\n        (error) => {\n          reject(error);\n        },\n        {\n          enableHighAccuracy: true,\n          timeout: 10000,\n          maximumAge: 300000 // 5 minutes\n        }\n      );\n    });\n  }\n\n  // Get weather icon URL\n  getWeatherIconUrl(icon: string): string {\n    return `https://openweathermap.org/img/wn/${icon}@2x.png`;\n  }\n\n  // Get weather alerts (if available)\n  async getWeatherAlerts(lat: number, lon: number): Promise<WeatherAlert[]> {\n    try {\n      const apiKey = this.getApiKey();\n      // Using One Call API for alerts (requires different endpoint)\n      const response = await fetch(\n        `https://api.openweathermap.org/data/3.0/onecall?lat=${lat}&lon=${lon}&appid=${apiKey}&units=metric`\n      );\n      \n      if (!response.ok) {\n        return []; // No alerts or API issue\n      }\n      \n      const data = await response.json();\n      \n      if (!data.alerts) {\n        return [];\n      }\n      \n      return data.alerts.map((alert: any) => ({\n        title: alert.event,\n        description: alert.description,\n        severity: alert.severity || 'moderate',\n        type: alert.tags?.[0] || 'general'\n      }));\n    } catch (error) {\n      console.error('Error fetching weather alerts:', error);\n      return [];\n    }\n  }\n\n  // Generate farming advice based on weather\n  generateFarmingAdvice(weather: WeatherData): string {\n    const { temperature, humidity, description } = weather;\n    \n    if (description.includes('rain')) {\n      return 'Rain expected - avoid spraying chemicals and consider indoor farm work.';\n    }\n    \n    if (temperature > 35) {\n      return 'High temperature - increase irrigation and provide shade for crops.';\n    }\n    \n    if (temperature < 5) {\n      return 'Cold weather - protect sensitive crops and check livestock shelter.';\n    }\n    \n    if (humidity > 80) {\n      return 'High humidity - monitor crops for fungal diseases and improve ventilation.';\n    }\n    \n    if (humidity < 30) {\n      return 'Low humidity - increase watering frequency and consider mulching.';\n    }\n    \n    return 'Good weather conditions for farming activities. Plan your field work accordingly.';\n  }\n}\n\nexport const weatherService = new WeatherService();","size_bytes":7875},"kisan/src/pages/Advisory.tsx":{"content":"import { useState, useEffect } from 'react';\nimport { \n  BookOpen,\n  Bookmark,\n  ChevronRight,\n  Calendar,\n  CheckCircle,\n  Clock,\n  Droplets,\n  Beaker,\n  Leaf,\n  Star,\n  TrendingUp\n} from 'lucide-react';\nimport { useNavigate } from 'react-router-dom';\nimport { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';\nimport { Button } from '@/components/ui/button';\n\nconst Advisory = () => {\n  const navigate = useNavigate();\n  const [savedGuidance, setSavedGuidance] = useState<string[]>([]);\n  const [appliedGuidance, setAppliedGuidance] = useState<string[]>(() => {\n    const applied = localStorage.getItem('kisanmitra_applied_guidance');\n    return applied ? JSON.parse(applied) : [];\n  });\n\n  // Load saved fertilizer guidance\n  useEffect(() => {\n    const saved = localStorage.getItem('kisanmitra_saved_fertilizer_guides');\n    setSavedGuidance(saved ? JSON.parse(saved) : []);\n  }, []);\n\n  const cropData = {\n    'tomato': {\n      name: 'Tomato',\n      image: '🍅',\n      season: 'Kharif/Rabi',\n      fertilizers: [\n        { name: 'NPK (10:26:26)', quantity: '200 kg/acre', timing: 'At planting' },\n        { name: 'Urea (46% N)', quantity: '50 kg/acre', timing: '20 days after transplant' },\n        { name: 'Calcium Nitrate', quantity: '25 kg/acre', timing: 'Flowering stage' }\n      ]\n    },\n    'wheat': {\n      name: 'Wheat',\n      image: '🌾',\n      season: 'Rabi',\n      fertilizers: [\n        { name: 'DAP (18:46:0)', quantity: '150 kg/acre', timing: 'At sowing' },\n        { name: 'Urea (46% N)', quantity: '65 kg/acre', timing: '1st irrigation (21 days)' },\n        { name: 'Urea (46% N)', quantity: '65 kg/acre', timing: '2nd irrigation (45 days)' }\n      ]\n    },\n    'rice': {\n      name: 'Rice',\n      image: '🌾',\n      season: 'Kharif',\n      fertilizers: [\n        { name: 'NPK (12:32:16)', quantity: '125 kg/acre', timing: 'Before transplanting' },\n        { name: 'Urea (46% N)', quantity: '45 kg/acre', timing: '15 days after transplant' },\n        { name: 'Urea (46% N)', quantity: '45 kg/acre', timing: 'At panicle initiation' }\n      ]\n    },\n    'cotton': {\n      name: 'Cotton',\n      image: '☁️',\n      season: 'Kharif',\n      fertilizers: [\n        { name: 'NPK (17:17:17)', quantity: '100 kg/acre', timing: 'At sowing' },\n        { name: 'Urea (46% N)', quantity: '60 kg/acre', timing: '30-35 days after sowing' },\n        { name: 'MOP (60% K2O)', quantity: '35 kg/acre', timing: 'At flowering' }\n      ]\n    },\n    'maize': {\n      name: 'Maize',\n      image: '🌽',\n      season: 'Kharif/Rabi',\n      fertilizers: [\n        { name: 'NPK (12:32:16)', quantity: '125 kg/acre', timing: 'At sowing' },\n        { name: 'Urea (46% N)', quantity: '65 kg/acre', timing: '25-30 days after sowing' },\n        { name: 'Urea (46% N)', quantity: '65 kg/acre', timing: 'Pre-tasseling stage' }\n      ]\n    }\n  };\n\n  const toggleAppliedStatus = (cropId: string) => {\n    const updatedApplied = appliedGuidance.includes(cropId)\n      ? appliedGuidance.filter(id => id !== cropId)\n      : [...appliedGuidance, cropId];\n    \n    setAppliedGuidance(updatedApplied);\n    localStorage.setItem('kisanmitra_applied_guidance', JSON.stringify(updatedApplied));\n  };\n\n  const savedCrops = savedGuidance.map(id => ({\n    id,\n    ...cropData[id as keyof typeof cropData]\n  })).filter(crop => crop.name); // Filter out any invalid entries\n\n  return (\n    <div className=\"min-h-screen bg-gradient-to-br from-green-50 to-blue-50\">\n      {/* Header */}\n      <div className=\"bg-white shadow-sm border-b border-green-100 sticky top-0 z-10\">\n        <div className=\"px-6 py-4\">\n          <div className=\"flex items-center space-x-4\">\n            <div className=\"p-3 bg-blue-100 rounded-xl\">\n              <BookOpen className=\"w-7 h-7 text-blue-600\" />\n            </div>\n            <div>\n              <h1 className=\"text-2xl font-bold text-gray-900\">Advisory</h1>\n              <p className=\"text-sm text-gray-600\">Your saved agricultural guidance</p>\n            </div>\n          </div>\n        </div>\n      </div>\n\n      {/* Content */}\n      <div className=\"px-6 py-8 space-y-8\">\n        {/* My Fertilizer Guidance Card - Always clickable like Market Prices */}\n        <Card \n          className=\"bg-white rounded-3xl shadow-lg border border-gray-100 overflow-hidden cursor-pointer hover:shadow-xl transition-shadow duration-200\"\n          onClick={() => navigate('/my-fertilizer-guidance')}\n        >\n          <CardContent className=\"p-6\">\n            <div className=\"flex items-center space-x-4\">\n              <div className=\"p-3 bg-green-100 rounded-xl\">\n                <Beaker className=\"w-6 h-6 text-green-600\" />\n              </div>\n              <div className=\"flex-1\">\n                <h3 className=\"font-bold text-gray-900 text-lg\">My Fertilizer Guidance</h3>\n                <p className=\"text-gray-500 text-sm\">\n                  {savedCrops.length > 0 \n                    ? `${savedCrops.length} saved crop${savedCrops.length !== 1 ? 's' : ''} • ${appliedGuidance.length} applied`\n                    : 'Save fertilizer guidance to see them here'\n                  }\n                </p>\n              </div>\n              <div className=\"flex items-center space-x-2\">\n                {savedCrops.length > 0 && (\n                  <div className=\"text-xs bg-green-100 text-green-700 px-2 py-1 rounded-full font-medium\">\n                    {savedCrops.length}\n                  </div>\n                )}\n                <ChevronRight className=\"w-5 h-5 text-gray-400\" />\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n\n        {/* Market Prices Card */}\n        <Card \n          className=\"bg-white rounded-3xl shadow-lg border border-gray-100 overflow-hidden cursor-pointer hover:shadow-xl transition-shadow duration-200\"\n          onClick={() => navigate('/market-prices')}\n        >\n          <CardContent className=\"p-6\">\n            <div className=\"flex items-center space-x-4\">\n              <div className=\"p-3 bg-blue-100 rounded-xl\">\n                <TrendingUp className=\"w-6 h-6 text-blue-600\" />\n              </div>\n              <div className=\"flex-1\">\n                <h3 className=\"font-bold text-gray-900 text-lg\">Market Prices</h3>\n                <p className=\"text-gray-500 text-sm\">Today's mandi rates and trends</p>\n              </div>\n              <div className=\"flex items-center space-x-2\">\n                <div className=\"text-xs bg-green-100 text-green-700 px-2 py-1 rounded-full font-medium\">\n                  Live\n                </div>\n                <ChevronRight className=\"w-5 h-5 text-gray-400\" />\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n\n      </div>\n    </div>\n  );\n};\n\nexport default Advisory;","size_bytes":6768},"kisan/src/pages/AnalyzePlant.tsx":{"content":"import { useState, useEffect } from 'react';\nimport { useNavigate } from 'react-router-dom';\nimport { \n  ArrowLeft, \n  Brain, \n  CheckCircle,\n  Sparkles,\n  Target,\n  Zap,\n  Eye,\n  Scan\n} from 'lucide-react';\nimport { Progress } from '@/components/ui/progress';\n\nconst AnalyzePlant = () => {\n  const navigate = useNavigate();\n  const [analysisProgress, setAnalysisProgress] = useState(0);\n  const [currentStage, setCurrentStage] = useState(0);\n  const [plantImage, setPlantImage] = useState<string | null>(null);\n\n  const analysisStages = [\n    { name: 'Scanning Image', icon: Scan, progress: 20 },\n    { name: 'Detecting Plant Features', icon: Eye, progress: 40 },\n    { name: 'Identifying Patterns', icon: Target, progress: 60 },\n    { name: 'Analyzing Health Issues', icon: Brain, progress: 80 },\n    { name: 'Generating Report', icon: Zap, progress: 100 }\n  ];\n\n  useEffect(() => {\n    // Get the captured image\n    const image = localStorage.getItem('plant_image');\n    setPlantImage(image);\n\n    // Simulate AI analysis with realistic timing\n    let progress = 0;\n    let stageIndex = 0;\n    \n    const interval = setInterval(() => {\n      progress += Math.random() * 8 + 2; // 2-10% increments\n      \n      if (progress >= analysisStages[stageIndex]?.progress) {\n        setCurrentStage(stageIndex + 1);\n        stageIndex++;\n      }\n      \n      setAnalysisProgress(Math.min(progress, 100));\n      \n      if (progress >= 100) {\n        clearInterval(interval);\n        setTimeout(() => {\n          // Store analysis results\n          const results = {\n            disease: 'Late Blight',\n            confidence: 87,\n            affectedArea: 'Leaves and stems',\n            stage: 'Early to moderate',\n            severity: 'medium',\n            detectedDate: new Date().toISOString()\n          };\n          localStorage.setItem('diagnosis_results', JSON.stringify(results));\n          navigate('/diagnose/results');\n        }, 1000);\n      }\n    }, 200);\n\n    return () => clearInterval(interval);\n  }, [navigate]);\n\n  return (\n    <div className=\"mobile-container\">\n      {/* Header */}\n      <div className=\"mobile-header bg-agri-cream\">\n        <div className=\"flex items-center space-x-3\">\n          <button \n            onClick={() => navigate('/diagnose')}\n            className=\"p-2 hover:bg-agri-light rounded-full transition-colors\"\n          >\n            <ArrowLeft className=\"w-6 h-6 text-agri-accent\" />\n          </button>\n          <h1 className=\"text-xl font-bold text-agri-accent\">AI Analysis</h1>\n        </div>\n      </div>\n\n      <div className=\"mobile-content flex flex-col items-center justify-center min-h-[60vh] space-y-8 pt-4\">\n        {/* Image Preview with Analysis Effect */}\n        <div className=\"relative\">\n          <div className=\"w-48 h-36 bg-gray-100 rounded-2xl overflow-hidden shadow-medium\">\n            {plantImage ? (\n              <img \n                src={plantImage} \n                alt=\"Plant being analyzed\" \n                className=\"w-full h-full object-cover\"\n              />\n            ) : (\n              <div className=\"w-full h-full bg-gradient-to-br from-green-100 to-green-200 flex items-center justify-center\">\n                <Sparkles className=\"w-12 h-12 text-agri-primary\" />\n              </div>\n            )}\n          </div>\n          \n          {/* Scanning Animation Overlay */}\n          <div className=\"absolute inset-0 pointer-events-none\">\n            <div className=\"absolute inset-2 border-2 border-agri-primary/30 rounded-xl\" />\n            <div \n              className=\"absolute left-2 right-2 h-0.5 bg-gradient-to-r from-transparent via-agri-primary to-transparent animate-pulse\"\n              style={{ \n                top: `${20 + (analysisProgress * 0.6)}%`,\n                transition: 'top 0.3s ease-out'\n              }}\n            />\n          </div>\n          \n          {/* AI Processing Indicator */}\n          <div className=\"absolute -top-2 -right-2 w-8 h-8 bg-agri-primary rounded-full flex items-center justify-center shadow-glow\">\n            <Brain className=\"w-4 h-4 text-white animate-pulse\" />\n          </div>\n        </div>\n\n        {/* Analysis Progress */}\n        <div className=\"text-center w-full max-w-xs\">\n          <div className=\"relative mb-6\">\n            <div className=\"w-24 h-24 mx-auto mb-6 relative\">\n              <div className=\"w-24 h-24 border-4 border-agri-light rounded-full flex items-center justify-center\">\n                <div className=\"relative\">\n                  <Sparkles className=\"w-10 h-10 text-agri-primary animate-pulse\" />\n                  <div className=\"absolute inset-0 animate-spin\">\n                    <div className=\"w-10 h-10 border-2 border-transparent border-t-agri-primary rounded-full\" />\n                  </div>\n                </div>\n              </div>\n              <div className=\"absolute inset-0 border-4 border-agri-primary border-t-transparent rounded-full animate-spin\" \n                   style={{ animationDuration: '2s' }} />\n            </div>\n            \n            <h2 className=\"text-2xl font-bold text-agri-accent mb-2\">\n              AI Analyzing Your Plant...\n            </h2>\n            <p className=\"text-agri-gray mb-6\">\n              Our advanced AI is examining your plant for any health issues\n            </p>\n            \n            {/* Progress Bar */}\n            <div className=\"space-y-4\">\n              <Progress value={analysisProgress} className=\"w-full h-3\" />\n              <div className=\"text-2xl font-bold text-agri-primary\">\n                {Math.round(analysisProgress)}%\n              </div>\n            </div>\n          </div>\n        </div>\n\n        {/* Analysis Stages */}\n        <div className=\"w-full max-w-xs space-y-3\">\n          {analysisStages.map((stage, index) => {\n            const StageIcon = stage.icon;\n            const isCompleted = currentStage > index;\n            const isCurrent = currentStage === index;\n            \n            return (\n              <div key={index} className={`flex items-center space-x-3 p-3 rounded-xl transition-all duration-300 ${\n                isCompleted ? 'bg-agri-light' : \n                isCurrent ? 'bg-agri-primary/10 border border-agri-primary/20' : \n                'bg-gray-50'\n              }`}>\n                <div className={`w-8 h-8 rounded-full flex items-center justify-center transition-all duration-300 ${\n                  isCompleted ? 'bg-agri-success' : \n                  isCurrent ? 'bg-agri-primary animate-pulse' : \n                  'bg-gray-300'\n                }`}>\n                  {isCompleted ? (\n                    <CheckCircle className=\"w-5 h-5 text-white\" />\n                  ) : (\n                    <StageIcon className={`w-4 h-4 ${\n                      isCurrent ? 'text-white' : 'text-gray-500'\n                    }`} />\n                  )}\n                </div>\n                <span className={`text-sm font-medium transition-colors duration-300 ${\n                  isCompleted ? 'text-agri-success' : \n                  isCurrent ? 'text-agri-primary' : \n                  'text-gray-500'\n                }`}>\n                  {stage.name}\n                  {isCurrent && <span className=\"ml-2 animate-pulse\">...</span>}\n                  {isCompleted && <span className=\"ml-2\">✓</span>}\n                </span>\n              </div>\n            );\n          })}\n        </div>\n\n        {/* Processing Info */}\n        <div className=\"bg-blue-50 rounded-xl p-4 w-full max-w-xs border border-blue-200\">\n          <div className=\"text-center\">\n            <p className=\"text-sm text-blue-800\">\n              <strong>Processing Power:</strong> 15 TB agricultural database\n            </p>\n            <p className=\"text-xs text-blue-600 mt-1\">\n              Analyzing against 10,000+ plant disease patterns\n            </p>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default AnalyzePlant;","size_bytes":7931},"kisan/src/pages/CameraCapture.tsx":{"content":"import { useState, useRef, useCallback } from 'react';\nimport { useNavigate } from 'react-router-dom';\nimport { \n  Camera, \n  Upload, \n  ArrowLeft, \n  RefreshCw,\n  Check,\n  X,\n  Sparkles\n} from 'lucide-react';\nimport { Button } from '@/components/ui/button';\nimport { toast } from '@/components/ui/use-toast';\n\nconst CameraCapture = () => {\n  const navigate = useNavigate();\n  const videoRef = useRef<HTMLVideoElement>(null);\n  const canvasRef = useRef<HTMLCanvasElement>(null);\n  const fileInputRef = useRef<HTMLInputElement>(null);\n  const [stream, setStream] = useState<MediaStream | null>(null);\n  const [capturedImage, setCapturedImage] = useState<string | null>(null);\n  const [isCamera, setIsCamera] = useState(true);\n\n  const startCamera = useCallback(async () => {\n    try {\n      const mediaStream = await navigator.mediaDevices.getUserMedia({\n        video: { facingMode: 'environment' }\n      });\n      setStream(mediaStream);\n      if (videoRef.current) {\n        videoRef.current.srcObject = mediaStream;\n      }\n    } catch (error) {\n      console.error('Error accessing camera:', error);\n      toast({\n        title: \"Camera Error\",\n        description: \"Unable to access camera. Please check permissions.\",\n        variant: \"destructive\"\n      });\n    }\n  }, []);\n\n  const stopCamera = useCallback(() => {\n    if (stream) {\n      stream.getTracks().forEach(track => track.stop());\n      setStream(null);\n    }\n  }, [stream]);\n\n  const capturePhoto = useCallback(() => {\n    if (videoRef.current && canvasRef.current) {\n      const canvas = canvasRef.current;\n      const video = videoRef.current;\n      const context = canvas.getContext('2d');\n      \n      if (context) {\n        canvas.width = video.videoWidth;\n        canvas.height = video.videoHeight;\n        context.drawImage(video, 0, 0);\n        \n        const imageDataUrl = canvas.toDataURL('image/jpeg', 0.8);\n        setCapturedImage(imageDataUrl);\n        stopCamera();\n      }\n    }\n  }, [stopCamera]);\n\n  const handleFileUpload = (event: React.ChangeEvent<HTMLInputElement>) => {\n    const file = event.target.files?.[0];\n    if (file) {\n      const reader = new FileReader();\n      reader.onload = (e) => {\n        setCapturedImage(e.target?.result as string);\n        setIsCamera(false);\n      };\n      reader.readAsDataURL(file);\n    }\n  };\n\n  const proceedWithAnalysis = () => {\n    if (capturedImage) {\n      // Store image in localStorage for the diagnosis process\n      localStorage.setItem('plant_image', capturedImage);\n      navigate('/diagnose/analyze');\n    }\n  };\n\n  const retakePhoto = () => {\n    setCapturedImage(null);\n    if (isCamera) {\n      startCamera();\n    }\n  };\n\n  // Start camera when component mounts\n  useState(() => {\n    if (isCamera) {\n      startCamera();\n    }\n  });\n\n  return (\n    <div className=\"mobile-container\">\n      {/* Header */}\n      <div className=\"mobile-header bg-agri-cream\">\n        <div className=\"flex items-center space-x-3\">\n          <button \n            onClick={() => {\n              stopCamera();\n              navigate('/diagnose');\n            }}\n            className=\"p-2 hover:bg-agri-light rounded-full transition-colors\"\n          >\n            <ArrowLeft className=\"w-6 h-6 text-agri-accent\" />\n          </button>\n          <h1 className=\"text-xl font-bold text-agri-accent\">\n            {capturedImage ? 'Review Image' : 'Capture Plant Image'}\n          </h1>\n        </div>\n      </div>\n\n      <div className=\"mobile-content space-y-6 pt-4\">\n        {!capturedImage ? (\n          <>\n            {/* Camera View */}\n            <div className=\"relative bg-black rounded-2xl overflow-hidden aspect-[4/3]\">\n              {isCamera ? (\n                <video\n                  ref={videoRef}\n                  autoPlay\n                  playsInline\n                  className=\"w-full h-full object-cover\"\n                />\n              ) : (\n                <div className=\"w-full h-full flex items-center justify-center bg-agri-light\">\n                  <Upload className=\"w-16 h-16 text-agri-primary\" />\n                </div>\n              )}\n              \n              {/* Camera Overlay */}\n              <div className=\"absolute inset-0 pointer-events-none\">\n                <div className=\"absolute inset-6 border-2 border-white/50 rounded-2xl\" />\n                <div className=\"absolute top-4 left-4 bg-black/20 rounded-full px-3 py-1\">\n                  <div className=\"flex items-center space-x-2\">\n                    <div className=\"w-2 h-2 bg-red-500 rounded-full animate-pulse\" />\n                    <span className=\"text-white text-sm\">Live</span>\n                  </div>\n                </div>\n              </div>\n            </div>\n\n            {/* Controls */}\n            <div className=\"space-y-4\">\n              {/* Capture Methods */}\n              <div className=\"flex space-x-4\">\n                <Button\n                  onClick={() => {\n                    setIsCamera(true);\n                    startCamera();\n                  }}\n                  variant={isCamera ? \"default\" : \"outline\"}\n                  className=\"flex-1\"\n                >\n                  <Camera className=\"w-4 h-4 mr-2\" />\n                  Camera\n                </Button>\n                <Button\n                  onClick={() => {\n                    setIsCamera(false);\n                    stopCamera();\n                    fileInputRef.current?.click();\n                  }}\n                  variant={!isCamera ? \"default\" : \"outline\"}\n                  className=\"flex-1\"\n                >\n                  <Upload className=\"w-4 h-4 mr-2\" />\n                  Gallery\n                </Button>\n              </div>\n\n              {/* Capture Button */}\n              {isCamera && stream && (\n                <div className=\"flex justify-center\">\n                  <button\n                    onClick={capturePhoto}\n                    className=\"w-20 h-20 bg-white border-4 border-agri-primary rounded-full flex items-center justify-center shadow-lg transform transition-transform active:scale-95\"\n                  >\n                    <div className=\"w-16 h-16 bg-agri-primary rounded-full flex items-center justify-center\">\n                      <Camera className=\"w-8 h-8 text-white\" />\n                    </div>\n                  </button>\n                </div>\n              )}\n            </div>\n\n            {/* Hidden file input */}\n            <input\n              ref={fileInputRef}\n              type=\"file\"\n              accept=\"image/*\"\n              onChange={handleFileUpload}\n              className=\"hidden\"\n            />\n          </>\n        ) : (\n          <>\n            {/* Captured Image Preview */}\n            <div className=\"space-y-4\">\n              <div className=\"relative rounded-2xl overflow-hidden\">\n                <img\n                  src={capturedImage}\n                  alt=\"Captured plant\"\n                  className=\"w-full aspect-[4/3] object-cover\"\n                />\n                <div className=\"absolute top-4 right-4 bg-agri-success rounded-full p-2\">\n                  <Check className=\"w-5 h-5 text-white\" />\n                </div>\n              </div>\n\n              {/* Image Quality Check */}\n              <div className=\"bg-agri-light rounded-xl p-4\">\n                <div className=\"flex items-center space-x-3 mb-3\">\n                  <Sparkles className=\"w-5 h-5 text-agri-primary\" />\n                  <span className=\"font-semibold text-agri-accent\">Image Quality Check</span>\n                </div>\n                <div className=\"space-y-2\">\n                  <div className=\"flex items-center justify-between\">\n                    <span className=\"text-sm text-agri-gray\">Clarity</span>\n                    <span className=\"text-sm font-medium text-agri-success\">Good ✓</span>\n                  </div>\n                  <div className=\"flex items-center justify-between\">\n                    <span className=\"text-sm text-agri-gray\">Lighting</span>\n                    <span className=\"text-sm font-medium text-agri-success\">Good ✓</span>\n                  </div>\n                  <div className=\"flex items-center justify-between\">\n                    <span className=\"text-sm text-agri-gray\">Plant Focus</span>\n                    <span className=\"text-sm font-medium text-agri-success\">Good ✓</span>\n                  </div>\n                </div>\n              </div>\n\n              {/* Action Buttons */}\n              <div className=\"flex space-x-4\">\n                <Button\n                  onClick={retakePhoto}\n                  variant=\"outline\"\n                  className=\"flex-1\"\n                >\n                  <RefreshCw className=\"w-4 h-4 mr-2\" />\n                  Retake\n                </Button>\n                <Button\n                  onClick={proceedWithAnalysis}\n                  className=\"flex-1 bg-agri-primary hover:bg-agri-secondary\"\n                >\n                  <Sparkles className=\"w-4 h-4 mr-2\" />\n                  Analyze\n                </Button>\n              </div>\n            </div>\n          </>\n        )}\n\n        {/* Tips */}\n        <div className=\"bg-yellow-50 rounded-xl p-4 border border-yellow-200\">\n          <h3 className=\"font-semibold text-yellow-800 mb-2\">📸 Best Photo Tips:</h3>\n          <ul className=\"space-y-1 text-sm text-yellow-700\">\n            <li>• Focus on affected leaves or areas</li>\n            <li>• Ensure good natural lighting</li>\n            <li>• Keep image clear and close-up</li>\n            <li>• Avoid shadows and reflections</li>\n          </ul>\n        </div>\n      </div>\n\n      <canvas ref={canvasRef} className=\"hidden\" />\n    </div>\n  );\n};\n\nexport default CameraCapture;","size_bytes":9725},"kisan/src/pages/Cart.tsx":{"content":"import { useState, useEffect } from 'react';\nimport { useNavigate } from 'react-router-dom';\nimport { \n  ArrowLeft, \n  Plus, \n  Minus, \n  Trash2,\n  Tag,\n  Truck,\n  ShoppingBag,\n  Shield\n} from 'lucide-react';\nimport { Button } from '@/components/ui/button';\nimport { Input } from '@/components/ui/input';\nimport { Badge } from '@/components/ui/badge';\nimport { cartManager, CartItem } from '@/lib/cart';\n\nconst Cart = () => {\n  const navigate = useNavigate();\n  const [promoCode, setPromoCode] = useState('');\n  const [appliedPromo, setAppliedPromo] = useState('');\n  \n  const [cartItems, setCartItems] = useState<CartItem[]>([]);\n\n  useEffect(() => {\n    loadCart();\n    const unsubscribe = cartManager.onCartChange(() => {\n      loadCart();\n    });\n    return unsubscribe;\n  }, []);\n\n  const loadCart = () => {\n    setCartItems(cartManager.getCart());\n  };\n\n  const updateQuantity = (id: string, newQuantity: number) => {\n    cartManager.updateQuantity(id, newQuantity);\n  };\n\n  const removeItem = (id: string) => {\n    cartManager.deleteItem(id);\n  };\n\n  const applyPromoCode = () => {\n    if (promoCode === 'FARMER10') {\n      setAppliedPromo(promoCode);\n      setPromoCode('');\n    }\n  };\n\n  const subtotal = cartManager.getCartSubtotal();\n  const savings = cartManager.getCartSavings();\n  const discount = appliedPromo ? Math.round(subtotal * 0.1) : 0;\n  const deliveryFee = subtotal >= 500 ? 0 : 40;\n  const total = subtotal - discount + deliveryFee;\n\n  if (cartItems.length === 0) {\n    return (\n      <div className=\"mobile-container bg-background\">\n        <div className=\"mobile-header\">\n          <div className=\"flex items-center space-x-3\">\n            <button onClick={() => navigate('/shop')}>\n              <ArrowLeft className=\"w-6 h-6 text-gray-700\" />\n            </button>\n            <h1 className=\"text-xl font-bold text-text-secondary\">Cart</h1>\n          </div>\n        </div>\n\n        <div className=\"mobile-content flex flex-col items-center justify-center min-h-[60vh]\">\n          <ShoppingBag className=\"w-24 h-24 text-gray-300 mb-6\" />\n          <h2 className=\"text-xl font-bold text-gray-900 mb-2\">Your cart is empty</h2>\n          <p className=\"text-gray-500 mb-8 text-center\">Add some products to get started</p>\n          <Button \n            onClick={() => navigate('/shop')}\n            className=\"bg-green-600 hover:bg-green-700 text-white px-8 py-3\"\n          >\n            Continue Shopping\n          </Button>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"mobile-container bg-background\">\n      {/* Header */}\n      <div className=\"mobile-header\">\n        <div className=\"flex items-center space-x-3\">\n          <button onClick={() => navigate('/shop')}>\n            <ArrowLeft className=\"w-6 h-6 text-gray-700\" />\n          </button>\n          <h1 className=\"text-xl font-bold text-text-secondary\">Cart ({cartItems.length})</h1>\n        </div>\n      </div>\n\n      <div className=\"mobile-content space-y-6 pt-4\">\n        {/* Delivery Info */}\n        <div className=\"bg-green-50 border border-green-200 rounded-2xl p-4\">\n          <div className=\"flex items-center space-x-3\">\n            <Truck className=\"w-5 h-5 text-green-600\" />\n            <div>\n              <p className=\"font-semibold text-green-800\">\n                {deliveryFee === 0 ? 'Free Delivery!' : `₹${40 - (subtotal/500*40)} more for free delivery`}\n              </p>\n              <p className=\"text-sm text-green-600\">\n                {deliveryFee === 0 ? 'Your order qualifies for free delivery' : 'Add more items to get free delivery'}\n              </p>\n            </div>\n          </div>\n        </div>\n\n        {/* Cart Items */}\n        <div className=\"space-y-4\">\n          {cartItems.map((item) => (\n            <div key={item.id} className=\"bg-white rounded-2xl p-4 shadow-sm border border-gray-100\">\n              <div className=\"flex space-x-4\">\n                <div className=\"w-20 h-20 bg-gray-100 rounded-xl flex items-center justify-center\">\n                  <ShoppingBag className=\"w-8 h-8 text-green-600\" />\n                </div>\n                \n                <div className=\"flex-1\">\n                  <div className=\"flex items-start justify-between\">\n                    <div className=\"flex-1\">\n                      <h3 className=\"font-semibold text-gray-900 text-sm\">{item.name}</h3>\n                      <p className=\"text-xs text-gray-500 mt-1\">{item.brand} • {item.size}</p>\n                      \n                      <div className=\"flex items-center space-x-2 mt-2\">\n                        <span className=\"text-lg font-bold text-gray-900\">₹{item.price}</span>\n                        <span className=\"text-sm text-gray-400 line-through\">₹{item.originalPrice}</span>\n                        <Badge className=\"bg-green-100 text-green-800 text-xs\">\n                          Save ₹{item.originalPrice - item.price}\n                        </Badge>\n                      </div>\n                    </div>\n                    \n                    <button \n                      onClick={() => removeItem(item.id)}\n                      className=\"p-2 text-gray-400 hover:text-red-500\"\n                    >\n                      <Trash2 className=\"w-4 h-4\" />\n                    </button>\n                  </div>\n                  \n                  <div className=\"flex items-center justify-between mt-4\">\n                    <div className=\"flex items-center space-x-3\">\n                      <button\n                        onClick={() => updateQuantity(item.id, item.quantity - 1)}\n                        className=\"w-8 h-8 bg-gray-100 rounded-lg flex items-center justify-center\"\n                      >\n                        <Minus className=\"w-4 h-4 text-gray-600\" />\n                      </button>\n                      <span className=\"font-semibold text-gray-900 min-w-[20px] text-center\">\n                        {item.quantity}\n                      </span>\n                      <button\n                        onClick={() => updateQuantity(item.id, item.quantity + 1)}\n                        className=\"w-8 h-8 bg-green-600 rounded-lg flex items-center justify-center\"\n                      >\n                        <Plus className=\"w-4 h-4 text-white\" />\n                      </button>\n                    </div>\n                    \n                    <div className=\"text-right\">\n                      <p className=\"font-bold text-gray-900\">₹{item.price * item.quantity}</p>\n                      {item.quantity > 1 && (\n                        <p className=\"text-xs text-gray-500\">₹{item.price} each</p>\n                      )}\n                    </div>\n                  </div>\n                </div>\n              </div>\n            </div>\n          ))}\n        </div>\n\n        {/* Promo Code */}\n        <div className=\"bg-white rounded-2xl p-4 shadow-sm border border-gray-100\">\n          <div className=\"flex items-center space-x-2 mb-3\">\n            <Tag className=\"w-5 h-5 text-green-600\" />\n            <h3 className=\"font-semibold text-gray-900\">Promo Code</h3>\n          </div>\n          \n          {appliedPromo ? (\n            <div className=\"flex items-center justify-between p-3 bg-green-50 rounded-xl\">\n              <div className=\"flex items-center space-x-2\">\n                <Badge className=\"bg-green-600 text-white\">{appliedPromo}</Badge>\n                <span className=\"text-sm text-green-700\">10% discount applied</span>\n              </div>\n              <button \n                onClick={() => setAppliedPromo('')}\n                className=\"text-sm text-green-600 hover:text-green-800\"\n              >\n                Remove\n              </button>\n            </div>\n          ) : (\n            <div className=\"flex space-x-2\">\n              <Input\n                placeholder=\"Enter promo code\"\n                value={promoCode}\n                onChange={(e) => setPromoCode(e.target.value)}\n                className=\"flex-1\"\n              />\n              <Button \n                onClick={applyPromoCode}\n                variant=\"outline\"\n                className=\"border-green-600 text-green-600\"\n              >\n                Apply\n              </Button>\n            </div>\n          )}\n        </div>\n\n        {/* Order Summary */}\n        <div className=\"bg-white rounded-2xl p-6 shadow-sm border border-gray-100\">\n          <h3 className=\"font-semibold text-gray-900 mb-4\">Order Summary</h3>\n          \n          <div className=\"space-y-3\">\n            <div className=\"flex justify-between\">\n              <span className=\"text-gray-600\">Subtotal ({cartItems.reduce((sum, item) => sum + item.quantity, 0)} items)</span>\n              <span className=\"font-medium\">₹{subtotal}</span>\n            </div>\n            \n            {savings > 0 && (\n              <div className=\"flex justify-between text-green-600\">\n                <span>You saved</span>\n                <span className=\"font-medium\">-₹{savings}</span>\n              </div>\n            )}\n            \n            {discount > 0 && (\n              <div className=\"flex justify-between text-green-600\">\n                <span>Promo discount</span>\n                <span className=\"font-medium\">-₹{discount}</span>\n              </div>\n            )}\n            \n            <div className=\"flex justify-between\">\n              <span className=\"text-gray-600\">Delivery fee</span>\n              <span className={`font-medium ${deliveryFee === 0 ? 'text-green-600' : ''}`}>\n                {deliveryFee === 0 ? 'FREE' : `₹${deliveryFee}`}\n              </span>\n            </div>\n            \n            <div className=\"border-t pt-3\">\n              <div className=\"flex justify-between items-center\">\n                <span className=\"text-lg font-bold text-gray-900\">Total</span>\n                <span className=\"text-xl font-bold text-green-600\">₹{total}</span>\n              </div>\n            </div>\n          </div>\n        </div>\n\n        {/* Security Badge */}\n        <div className=\"flex items-center justify-center space-x-2 text-gray-500\">\n          <Shield className=\"w-4 h-4\" />\n          <span className=\"text-sm\">100% Secure Checkout</span>\n        </div>\n      </div>\n\n      {/* Checkout Button */}\n      <div className=\"fixed bottom-0 left-0 right-0 bg-white border-t border-gray-200 p-4\">\n        <Button \n          onClick={() => {\n            // Pass cart data to checkout\n            navigate('/checkout', { \n              state: { \n                cartItems,\n                subtotal,\n                savings,\n                discount,\n                deliveryFee,\n                total,\n                appliedPromo\n              }\n            })\n          }}\n          className=\"w-full bg-green-600 hover:bg-green-700 text-white py-4 rounded-xl text-lg font-semibold\"\n        >\n          Proceed to Checkout • ₹{total}\n        </Button>\n      </div>\n    </div>\n  );\n};\n\nexport default Cart;","size_bytes":10946},"kisan/src/pages/Checkout.tsx":{"content":"import { useState } from 'react';\nimport { useNavigate, useLocation } from 'react-router-dom';\nimport { \n  ArrowLeft, \n  MapPin, \n  Edit3,\n  CreditCard,\n  Smartphone,\n  Banknote,\n  CheckCircle,\n  Clock,\n  Shield,\n  Truck,\n  User,\n  Phone\n} from 'lucide-react';\nimport { cartManager } from '@/lib/cart';\n\nconst Checkout = () => {\n  const navigate = useNavigate();\n  const location = useLocation();\n  const [selectedAddress, setSelectedAddress] = useState('home');\n  const [selectedPayment, setSelectedPayment] = useState('upi');\n  const [isProcessing, setIsProcessing] = useState(false);\n\n  // Get cart data from location state or cart manager\n  const cartData = location.state || {};\n  const cartItems = cartData.cartItems || cartManager.getCart();\n  const subtotal = cartData.subtotal || cartManager.getCartSubtotal();\n  const discount = cartData.discount || 0;\n  const deliveryFee = cartData.deliveryFee || (subtotal >= 500 ? 0 : 40);\n  const total = cartData.total || (subtotal - discount + deliveryFee);\n\n  const addresses = [\n    {\n      id: 'home',\n      type: 'Home',\n      name: 'Ramu Ji',\n      address: 'Village Rampur, Dist. Hardoi, UP 241001',\n      phone: '+91 98765 43210'\n    },\n    {\n      id: 'farm',\n      type: 'Farm',\n      name: 'Ramu Ji',\n      address: 'Plot No. 45, Sector 12, Village Rampur, UP 241001',\n      phone: '+91 98765 43210'\n    }\n  ];\n\n  const paymentMethods = [\n    {\n      id: 'upi',\n      name: 'UPI Payment',\n      description: 'Pay using PhonePe, Google Pay, Paytm',\n      icon: Smartphone,\n      recommended: true,\n      discount: 5\n    },\n    {\n      id: 'card',\n      name: 'Credit/Debit Card',\n      description: 'Visa, Mastercard, RuPay',\n      icon: CreditCard,\n      recommended: false,\n      discount: 0\n    },\n    {\n      id: 'cod',\n      name: 'Cash on Delivery',\n      description: 'Pay when you receive',\n      icon: Banknote,\n      recommended: false,\n      discount: 0\n    }\n  ];\n\n  const orderSummary = {\n    items: cartItems.map(item => ({\n      name: item.name,\n      quantity: item.quantity,\n      price: item.price * item.quantity,\n      image: item.category\n    })),\n    subtotal,\n    discount,\n    delivery: deliveryFee,\n    total\n  };\n\n  const handlePlaceOrder = async () => {\n    setIsProcessing(true);\n    \n    try {\n      // Simulate payment processing\n      await new Promise(resolve => setTimeout(resolve, 3000));\n      \n      // Get selected address\n      const address = addresses.find(addr => addr.id === selectedAddress);\n      const addressString = `${address?.name}, ${address?.address}`;\n      \n      // Create order\n      const order = cartManager.createOrder({\n        address: addressString,\n        paymentMethod: selectedPayment,\n        discount\n      });\n      \n      // Navigate to order success page\n      navigate('/order-success', { \n        state: { \n          orderId: order.id,\n          order,\n          selectedAddress: address\n        } \n      });\n    } catch (error) {\n      alert('Failed to place order. Please try again.');\n    } finally {\n      setIsProcessing(false);\n    }\n  };\n\n  return (\n    <div className=\"min-h-screen bg-gray-50\">\n      {/* Header */}\n      <div className=\"sticky top-0 z-40 bg-white shadow-sm border-b border-gray-100\">\n        <div className=\"flex items-center justify-between px-4 py-4\">\n          <div className=\"flex items-center space-x-3\">\n            <button \n              onClick={() => navigate('/cart')}\n              className=\"p-2 -ml-2 hover:bg-gray-100 rounded-full transition-colors\"\n            >\n              <ArrowLeft className=\"w-6 h-6 text-gray-700\" />\n            </button>\n            <h1 className=\"text-xl font-bold text-gray-900\">Checkout</h1>\n          </div>\n          <div className=\"flex items-center space-x-2 bg-green-50 px-3 py-1 rounded-full\">\n            <Shield className=\"w-4 h-4 text-green-600\" />\n            <span className=\"text-sm font-medium text-green-800\">Secure</span>\n          </div>\n        </div>\n      </div>\n\n      <div className=\"px-4 py-6 space-y-6 pb-32\">\n        {/* Order Summary - Compact */}\n        <div className=\"bg-white rounded-2xl p-6 shadow-sm border border-gray-100\">\n          <div className=\"flex items-center justify-between mb-4\">\n            <h3 className=\"font-bold text-gray-900 flex items-center space-x-2\">\n              <CheckCircle className=\"w-5 h-5 text-green-600\" />\n              <span>Order Summary</span>\n            </h3>\n            <span className=\"text-sm text-gray-500\">{orderSummary.items.length} items</span>\n          </div>\n          \n          <div className=\"space-y-3 mb-4\">\n            {orderSummary.items.map((item, index) => (\n              <div key={index} className=\"flex items-center space-x-3 py-2 border-b border-gray-50 last:border-0\">\n                <div className=\"w-12 h-12 bg-green-100 rounded-lg flex items-center justify-center\">\n                  <span className=\"text-lg font-bold text-green-600\">{item.quantity}</span>\n                </div>\n                <div className=\"flex-1\">\n                  <p className=\"font-medium text-gray-900 text-sm\">{item.name}</p>\n                  <p className=\"text-sm text-gray-500\">₹{item.price}</p>\n                </div>\n              </div>\n            ))}\n          </div>\n          \n          <div className=\"border-t border-gray-100 pt-4 space-y-2\">\n            <div className=\"flex justify-between text-sm\">\n              <span className=\"text-gray-600\">Subtotal</span>\n              <span className=\"font-medium\">₹{orderSummary.subtotal}</span>\n            </div>\n            <div className=\"flex justify-between text-sm text-green-600\">\n              <span>Discount</span>\n              <span className=\"font-medium\">-₹{orderSummary.discount}</span>\n            </div>\n            <div className=\"flex justify-between text-sm\">\n              <span className=\"text-gray-600\">Delivery</span>\n              <span className=\"font-medium text-green-600\">FREE</span>\n            </div>\n            <div className=\"flex justify-between items-center pt-2 border-t border-gray-100\">\n              <span className=\"text-lg font-bold text-gray-900\">Total</span>\n              <span className=\"text-2xl font-bold text-green-600\">₹{orderSummary.total}</span>\n            </div>\n          </div>\n        </div>\n\n        {/* Delivery Address */}\n        <div className=\"bg-white rounded-2xl p-6 shadow-sm border border-gray-100\">\n          <div className=\"flex items-center justify-between mb-5\">\n            <div className=\"flex items-center space-x-3\">\n              <div className=\"w-10 h-10 bg-green-100 rounded-full flex items-center justify-center\">\n                <MapPin className=\"w-5 h-5 text-green-600\" />\n              </div>\n              <h3 className=\"font-bold text-gray-900\">Delivery Address</h3>\n            </div>\n            <button className=\"text-green-600 hover:text-green-700 p-2 hover:bg-green-50 rounded-lg transition-colors\">\n              <Edit3 className=\"w-4 h-4\" />\n            </button>\n          </div>\n\n          <div className=\"space-y-3\">\n            {addresses.map((address) => (\n              <div key={address.id} className={`border-2 rounded-xl p-4 cursor-pointer transition-all ${\n                selectedAddress === address.id \n                  ? 'border-green-500 bg-green-50' \n                  : 'border-gray-200 hover:border-gray-300'\n              }`} onClick={() => setSelectedAddress(address.id)}>\n                <div className=\"flex items-start space-x-3\">\n                  <div className={`w-5 h-5 rounded-full border-2 mt-1 ${\n                    selectedAddress === address.id \n                      ? 'border-green-500 bg-green-500' \n                      : 'border-gray-300'\n                  }`}>\n                    {selectedAddress === address.id && (\n                      <div className=\"w-full h-full rounded-full bg-white scale-50\"></div>\n                    )}\n                  </div>\n                  <div className=\"flex-1\">\n                    <div className=\"flex items-center space-x-2 mb-2\">\n                      <User className=\"w-4 h-4 text-gray-600\" />\n                      <span className=\"font-semibold text-gray-900\">{address.name}</span>\n                      <span className=\"text-xs bg-green-100 text-green-800 px-2 py-1 rounded-full font-medium\">\n                        {address.type}\n                      </span>\n                    </div>\n                    <p className=\"text-gray-600 text-sm mb-2\">{address.address}</p>\n                    <div className=\"flex items-center space-x-1\">\n                      <Phone className=\"w-3 h-3 text-gray-500\" />\n                      <span className=\"text-sm text-gray-500\">{address.phone}</span>\n                    </div>\n                  </div>\n                </div>\n              </div>\n            ))}\n          </div>\n\n          <button className=\"w-full mt-4 p-4 border-2 border-dashed border-green-300 rounded-xl text-green-600 font-semibold hover:border-green-400 hover:bg-green-50 transition-colors\">\n            + Add New Address\n          </button>\n        </div>\n\n        {/* Delivery Time */}\n        <div className=\"bg-gradient-to-r from-green-50 to-blue-50 rounded-2xl p-6 border border-green-100\">\n          <div className=\"flex items-center space-x-3 mb-4\">\n            <div className=\"w-10 h-10 bg-green-100 rounded-full flex items-center justify-center\">\n              <Truck className=\"w-5 h-5 text-green-600\" />\n            </div>\n            <h3 className=\"font-bold text-gray-900\">Delivery Information</h3>\n          </div>\n          \n          <div className=\"bg-white rounded-xl p-4 border border-green-200\">\n            <div className=\"flex items-center space-x-3\">\n              <CheckCircle className=\"w-6 h-6 text-green-600\" />\n              <div>\n                <p className=\"font-semibold text-green-800\">Expected Delivery</p>\n                <p className=\"text-green-600 text-sm\">Tomorrow by 6:00 PM</p>\n                <p className=\"text-xs text-gray-500 mt-1\">Free delivery on orders above ₹500</p>\n              </div>\n            </div>\n          </div>\n        </div>\n\n        {/* Payment Method */}\n        <div className=\"bg-white rounded-2xl p-6 shadow-sm border border-gray-100\">\n          <div className=\"flex items-center space-x-3 mb-5\">\n            <div className=\"w-10 h-10 bg-green-100 rounded-full flex items-center justify-center\">\n              <CreditCard className=\"w-5 h-5 text-green-600\" />\n            </div>\n            <h3 className=\"font-bold text-gray-900\">Payment Method</h3>\n          </div>\n\n          <div className=\"space-y-3\">\n            {paymentMethods.map((method) => (\n              <div \n                key={method.id} \n                className={`border-2 rounded-xl p-4 cursor-pointer transition-all ${\n                  selectedPayment === method.id \n                    ? 'border-green-500 bg-green-50' \n                    : 'border-gray-200 hover:border-gray-300'\n                }`}\n                onClick={() => setSelectedPayment(method.id)}\n              >\n                <div className=\"flex items-center space-x-4\">\n                  <div className={`w-5 h-5 rounded-full border-2 ${\n                    selectedPayment === method.id \n                      ? 'border-green-500 bg-green-500' \n                      : 'border-gray-300'\n                  }`}>\n                    {selectedPayment === method.id && (\n                      <div className=\"w-full h-full rounded-full bg-white scale-50\"></div>\n                    )}\n                  </div>\n                  <div className={`w-10 h-10 rounded-full flex items-center justify-center ${\n                    selectedPayment === method.id ? 'bg-green-100' : 'bg-gray-100'\n                  }`}>\n                    <method.icon className={`w-5 h-5 ${\n                      selectedPayment === method.id ? 'text-green-600' : 'text-gray-600'\n                    }`} />\n                  </div>\n                  <div className=\"flex-1\">\n                    <div className=\"flex items-center space-x-2\">\n                      <span className=\"font-semibold text-gray-900\">{method.name}</span>\n                      {method.recommended && (\n                        <span className=\"text-xs bg-orange-100 text-orange-800 px-2 py-1 rounded-full font-medium\">\n                          Recommended\n                        </span>\n                      )}\n                      {method.discount > 0 && (\n                        <span className=\"text-xs bg-green-100 text-green-800 px-2 py-1 rounded-full font-medium\">\n                          {method.discount}% Off\n                        </span>\n                      )}\n                    </div>\n                    <p className=\"text-sm text-gray-600 mt-1\">{method.description}</p>\n                  </div>\n                </div>\n              </div>\n            ))}\n          </div>\n        </div>\n\n        {/* Security Info */}\n        <div className=\"bg-gradient-to-r from-green-50 to-blue-50 rounded-2xl p-5 border border-green-100\">\n          <div className=\"flex items-center space-x-3\">\n            <div className=\"w-10 h-10 bg-green-100 rounded-full flex items-center justify-center\">\n              <Shield className=\"w-5 h-5 text-green-600\" />\n            </div>\n            <div>\n              <p className=\"font-semibold text-green-800\">100% Secure Payment</p>\n              <p className=\"text-sm text-green-600\">Your payment information is protected with 256-bit SSL encryption</p>\n            </div>\n          </div>\n        </div>\n      </div>\n\n      {/* Place Order Button */}\n      <div className=\"fixed bottom-0 left-0 right-0 bg-white border-t border-gray-200 p-4 shadow-lg\">\n        <button \n          onClick={handlePlaceOrder}\n          disabled={isProcessing}\n          className=\"w-full bg-green-600 hover:bg-green-700 text-white py-4 rounded-2xl text-lg font-bold disabled:opacity-50 disabled:cursor-not-allowed transition-all duration-200 shadow-lg\"\n        >\n          {isProcessing ? (\n            <div className=\"flex items-center justify-center space-x-2\">\n              <Clock className=\"w-5 h-5 animate-spin\" />\n              <span>Processing Payment...</span>\n            </div>\n          ) : (\n            <div className=\"flex items-center justify-between px-4\">\n              <span>Place Order</span>\n              <span className=\"bg-white bg-opacity-20 px-3 py-1 rounded-lg\">₹{orderSummary.total}</span>\n            </div>\n          )}\n        </button>\n        <p className=\"text-center text-xs text-gray-500 mt-2\">\n          By placing this order, you agree to our Terms & Conditions\n        </p>\n      </div>\n    </div>\n  );\n};\n\nexport default Checkout;","size_bytes":14703},"kisan/src/pages/Diagnose.tsx":{"content":"import { useState, useRef, useCallback } from 'react';\nimport { \n  Camera, \n  Upload, \n  Mic,\n  ChevronDown,\n  ChevronUp,\n  Sun,\n  Eye,\n  Shield,\n  Sparkles,\n  Globe,\n  Check,\n  Leaf\n} from 'lucide-react';\n\nconst PlantDiagnosis = () => {\n  const [selectedImage, setSelectedImage] = useState(null);\n  const [isExpanded, setIsExpanded] = useState(false);\n  const [currentLanguage, setCurrentLanguage] = useState('English');\n  const [isListening, setIsListening] = useState(false);\n  const fileInputRef = useRef(null);\n  const cameraInputRef = useRef(null);\n\n  const languages = ['English', 'हिंदी', 'தமிழ்', 'తెలుగు', 'বাংলা'];\n\n  const handleImageUpload = (event) => {\n    const file = event.target.files?.[0];\n    if (file) {\n      const reader = new FileReader();\n      reader.onload = (e) => {\n        setSelectedImage(e.target?.result);\n      };\n      reader.readAsDataURL(file);\n    }\n  };\n\n  const toggleVoiceAssist = () => {\n    setIsListening(!isListening);\n    // Voice assistance logic would go here\n  };\n\n  const startDiagnosis = () => {\n    if (selectedImage) {\n      // Navigate to diagnosis results\n      console.log('Starting diagnosis...');\n    }\n  };\n\n  const tips = [\n    {\n      icon: <Sun className=\"w-5 h-5 text-yellow-500\" />,\n      title: \"Good Lighting\",\n      description: \"Take photos in natural daylight\"\n    },\n    {\n      icon: <Eye className=\"w-5 h-5 text-blue-500\" />,\n      title: \"Focus on Affected Area\",\n      description: \"Zoom in on diseased or damaged parts\"\n    },\n    {\n      icon: <Shield className=\"w-5 h-5 text-green-500\" />,\n      title: \"Avoid Shadows\",\n      description: \"Keep the plant well-lit and clear\"\n    },\n    {\n      icon: <Sparkles className=\"w-5 h-5 text-purple-500\" />,\n      title: \"Clear & Sharp\",\n      description: \"Ensure the image is not blurry\"\n    }\n  ];\n\n  return (\n    <div className=\"min-h-screen bg-gradient-to-br from-green-50 to-blue-50\">\n      {/* Header */}\n      <div className=\"bg-white shadow-sm border-b border-green-100\">\n        <div className=\"px-6 py-5\">\n          <div className=\"flex items-center justify-between\">\n            <div className=\"flex items-center space-x-4\">\n              <div className=\"p-3 bg-green-100 rounded-xl\">\n                <Leaf className=\"w-7 h-7 text-green-600\" />\n              </div>\n              <h1 className=\"text-2xl font-bold text-gray-900\">Plant Diagnosis</h1>\n            </div>\n            \n            <div className=\"flex items-center space-x-3\">\n              {/* Language Switcher */}\n              <div className=\"relative\">\n                <select \n                  value={currentLanguage}\n                  onChange={(e) => setCurrentLanguage(e.target.value)}\n                  className=\"appearance-none bg-green-50 border-2 border-green-200 rounded-xl px-4 py-3 pr-10 text-sm font-bold text-green-700 focus:outline-none focus:ring-2 focus:ring-green-500 min-w-[100px]\"\n                >\n                  {languages.map((lang) => (\n                    <option key={lang} value={lang}>{lang}</option>\n                  ))}\n                </select>\n                <Globe className=\"absolute right-3 top-3.5 w-4 h-4 text-green-600 pointer-events-none\" />\n              </div>\n              \n              {/* Voice Assistant Button */}\n              <button\n                onClick={toggleVoiceAssist}\n                className={`p-4 rounded-xl transition-all duration-200 ${\n                  isListening \n                    ? 'bg-red-100 text-red-600 animate-pulse' \n                    : 'bg-blue-100 text-blue-600 hover:bg-blue-200'\n                }`}\n              >\n                <Mic className=\"w-6 h-6\" />\n              </button>\n            </div>\n          </div>\n        </div>\n      </div>\n\n      <div className=\"px-6 py-8 space-y-8\">\n        {/* Main Action Card */}\n        <div className=\"bg-white rounded-3xl shadow-xl p-8 border border-gray-100\">\n          <div className=\"text-center mb-8\">\n            <div className=\"inline-flex items-center justify-center w-20 h-20 bg-gradient-to-br from-green-100 to-green-200 rounded-2xl mb-6\">\n              <Camera className=\"w-10 h-10 text-green-600\" />\n            </div>\n            <h2 className=\"text-2xl font-bold text-gray-900 mb-3\">\n              Capture Plant Image\n            </h2>\n            <p className=\"text-gray-600 text-base leading-relaxed\">\n              Take a clear photo or upload from your gallery\n            </p>\n          </div>\n\n          {selectedImage && (\n            <div className=\"mb-8\">\n              <div className=\"relative rounded-2xl overflow-hidden bg-gray-100 border-4 border-green-200\">\n                <img\n                  src={selectedImage}\n                  alt=\"Selected plant\"\n                  className=\"w-full h-64 object-cover\"\n                />\n                <div className=\"absolute top-4 right-4 bg-green-500 rounded-xl p-2\">\n                  <Check className=\"w-5 h-5 text-white\" />\n                </div>\n              </div>\n              <p className=\"text-center text-base text-green-600 mt-4 font-bold\">\n                ✓ Image ready for diagnosis\n              </p>\n            </div>\n          )}\n\n          <div className=\"grid grid-cols-1 gap-6\">\n            {/* Take Photo Button */}\n            <button\n              onClick={() => cameraInputRef.current?.click()}\n              className=\"flex items-center justify-center space-x-4 bg-gradient-to-r from-green-500 to-green-600 hover:from-green-600 hover:to-green-700 text-white p-6 rounded-2xl transition-all duration-300 shadow-lg hover:shadow-xl transform hover:scale-[1.02]\"\n            >\n              <Camera className=\"w-7 h-7\" />\n              <span className=\"font-bold text-xl\">Take a Photo</span>\n            </button>\n\n            {/* Upload from Gallery Button */}\n            <button\n              onClick={() => fileInputRef.current?.click()}\n              className=\"flex items-center justify-center space-x-4 bg-white border-3 border-green-500 text-green-600 hover:bg-green-50 p-6 rounded-2xl transition-all duration-300 shadow-md hover:shadow-lg transform hover:scale-[1.02]\"\n            >\n              <Upload className=\"w-7 h-7\" />\n              <span className=\"font-bold text-xl\">Upload from Gallery</span>\n            </button>\n          </div>\n\n          {/* Hidden file inputs */}\n          <input\n            ref={fileInputRef}\n            type=\"file\"\n            accept=\"image/*\"\n            onChange={handleImageUpload}\n            className=\"hidden\"\n          />\n          <input\n            ref={cameraInputRef}\n            type=\"file\"\n            accept=\"image/*\"\n            capture=\"environment\"\n            onChange={handleImageUpload}\n            className=\"hidden\"\n          />\n        </div>\n\n        {/* Photography Tips Card */}\n        <div className=\"bg-white rounded-3xl shadow-xl border border-gray-100 overflow-hidden\">\n          <button\n            onClick={() => setIsExpanded(!isExpanded)}\n            className=\"w-full px-8 py-6 flex items-center justify-between bg-gradient-to-r from-blue-50 to-purple-50 hover:from-blue-100 hover:to-purple-100 transition-colors duration-200\"\n          >\n            <div className=\"flex items-center space-x-4\">\n              <div className=\"p-3 bg-white rounded-xl shadow-sm\">\n                <Sparkles className=\"w-6 h-6 text-blue-600\" />\n              </div>\n              <div className=\"text-left\">\n                <h3 className=\"font-bold text-gray-900 text-lg\">Photography Tips</h3>\n                <p className=\"text-base text-gray-600\">Get better diagnosis results</p>\n              </div>\n            </div>\n            {isExpanded ? (\n              <ChevronUp className=\"w-6 h-6 text-gray-500\" />\n            ) : (\n              <ChevronDown className=\"w-6 h-6 text-gray-500\" />\n            )}\n          </button>\n\n          {isExpanded && (\n            <div className=\"px-8 py-6 space-y-6 bg-gray-50\">\n              {tips.map((tip, index) => (\n                <div key={index} className=\"flex items-start space-x-4\">\n                  <div className=\"mt-1\">\n                    {tip.icon}\n                  </div>\n                  <div>\n                    <h4 className=\"font-bold text-gray-900 text-base\">\n                      {tip.title}\n                    </h4>\n                    <p className=\"text-gray-600 text-sm mt-2 leading-relaxed\">\n                      {tip.description}\n                    </p>\n                  </div>\n                </div>\n              ))}\n            </div>\n          )}\n        </div>\n\n        {/* Additional Info Card */}\n        <div className=\"bg-gradient-to-r from-green-50 to-blue-50 rounded-3xl p-6 border-2 border-green-100\">\n          <div className=\"flex items-start space-x-4\">\n            <div className=\"p-3 bg-white rounded-xl\">\n              <Leaf className=\"w-6 h-6 text-green-600\" />\n            </div>\n            <div>\n              <h3 className=\"font-bold text-gray-900 mb-3 text-lg\">\n                AI-Powered Plant Health Analysis\n              </h3>\n              <p className=\"text-base text-gray-700 leading-relaxed\">\n                Our advanced AI can identify diseases, pests, nutrient deficiencies, \n                and provide treatment recommendations in your local language.\n              </p>\n            </div>\n          </div>\n        </div>\n      </div>\n\n      {/* Fixed Bottom Button */}\n      <div className=\"fixed bottom-0 left-0 right-0 bg-white border-t-2 border-gray-200 p-6 shadow-2xl\">\n        <button\n          onClick={startDiagnosis}\n          disabled={!selectedImage}\n          className={`w-full py-5 rounded-2xl font-bold text-xl transition-all duration-300 ${\n            selectedImage\n              ? 'bg-gradient-to-r from-green-500 to-blue-500 hover:from-green-600 hover:to-blue-600 text-white shadow-xl hover:shadow-2xl transform hover:scale-[1.02]'\n              : 'bg-gray-300 text-gray-500 cursor-not-allowed'\n          }`}\n        >\n          {selectedImage ? (\n            <div className=\"flex items-center justify-center space-x-3\">\n              <Sparkles className=\"w-6 h-6\" />\n              <span>Start Diagnosis</span>\n            </div>\n          ) : (\n            'Select an Image First'\n          )}\n        </button>\n      </div>\n\n      {/* Voice Assistant Feedback */}\n      {isListening && (\n        <div className=\"fixed top-20 left-4 right-4 bg-blue-600 text-white p-4 rounded-xl shadow-lg z-50\">\n          <div className=\"flex items-center space-x-3\">\n            <div className=\"w-3 h-3 bg-white rounded-full animate-pulse\"></div>\n            <span className=\"font-medium\">Listening... Speak your question</span>\n          </div>\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default PlantDiagnosis;","size_bytes":10781},"kisan/src/pages/DiagnoseResults.tsx":{"content":"import { useState, useEffect } from 'react';\nimport { useNavigate } from 'react-router-dom';\nimport { \n  ArrowLeft, \n  CheckCircle,\n  AlertTriangle,\n  Clock,\n  Target,\n  TrendingUp,\n  Store,\n  MapPin,\n  Plus,\n  Leaf,\n  Calendar,\n  Award,\n  ShoppingCart\n} from 'lucide-react';\nimport { Button } from '@/components/ui/button';\nimport { Progress } from '@/components/ui/progress';\nimport { toast } from '@/components/ui/use-toast';\n\ninterface DiagnosisResult {\n  disease: string;\n  confidence: number;\n  affectedArea: string;\n  stage: string;\n  severity: 'low' | 'medium' | 'high';\n  detectedDate: string;\n}\n\nconst DiagnoseResults = () => {\n  const navigate = useNavigate();\n  const [results, setResults] = useState<DiagnosisResult | null>(null);\n  const [plantImage, setPlantImage] = useState<string | null>(null);\n\n  useEffect(() => {\n    const savedResults = localStorage.getItem('diagnosis_results');\n    const savedImage = localStorage.getItem('plant_image');\n    \n    if (savedResults) {\n      setResults(JSON.parse(savedResults));\n    }\n    if (savedImage) {\n      setPlantImage(savedImage);\n    }\n  }, []);\n\n  const addToActiveTreatments = () => {\n    if (results) {\n      const treatment = {\n        id: Date.now().toString(),\n        disease: results.disease,\n        startDate: new Date().toISOString(),\n        status: 'active',\n        progress: 0,\n        nextAction: 'Apply recommended fertilizer',\n        image: plantImage\n      };\n      \n      const existingTreatments = JSON.parse(localStorage.getItem('active_treatments') || '[]');\n      existingTreatments.push(treatment);\n      localStorage.setItem('active_treatments', JSON.stringify(existingTreatments));\n      \n      toast({\n        title: \"Treatment Added\",\n        description: \"Added to your active treatments for monitoring.\"\n      });\n    }\n  };\n\n  const handleFertilizerRecommendation = (fertilizerName: string) => {\n    // Store fertilizer search query and navigate to shop\n    localStorage.setItem('fertilizer_search', fertilizerName);\n    navigate('/shop?search=' + encodeURIComponent(fertilizerName));\n  };\n\n  if (!results) {\n    return (\n      <div className=\"mobile-container\">\n        <div className=\"mobile-content flex items-center justify-center min-h-[50vh]\">\n          <div className=\"text-center\">\n            <AlertTriangle className=\"w-16 h-16 text-agri-warning mx-auto mb-4\" />\n            <h2 className=\"text-xl font-bold text-agri-accent mb-2\">No Results Found</h2>\n            <p className=\"text-agri-gray mb-4\">Please diagnose a plant first.</p>\n            <Button onClick={() => navigate('/diagnose')}>\n              Start Diagnosis\n            </Button>\n          </div>\n        </div>\n      </div>\n    );\n  }\n\n  const getSeverityColor = (severity: string) => {\n    switch (severity) {\n      case 'low': return 'text-green-600 bg-green-100';\n      case 'medium': return 'text-yellow-600 bg-yellow-100';\n      case 'high': return 'text-red-600 bg-red-100';\n      default: return 'text-gray-600 bg-gray-100';\n    }\n  };\n\n  const recommendedFertilizers = [\n    { name: 'Copper Fungicide Spray', price: '₹450', inStock: true },\n    { name: 'Blight Control Solution', price: '₹320', inStock: true },\n    { name: 'Organic Plant Immunity Booster', price: '₹280', inStock: false }\n  ];\n\n  return (\n    <div className=\"mobile-container\">\n      {/* Header */}\n      <div className=\"mobile-header bg-agri-cream\">\n        <div className=\"flex items-center space-x-3\">\n          <button \n            onClick={() => navigate('/diagnose')}\n            className=\"p-2 hover:bg-agri-light rounded-full transition-colors\"\n          >\n            <ArrowLeft className=\"w-6 h-6 text-agri-accent\" />\n          </button>\n          <h1 className=\"text-xl font-bold text-agri-accent\">Diagnosis Results</h1>\n        </div>\n      </div>\n\n      <div className=\"mobile-content space-y-6 pt-4\">\n        {/* Success Header */}\n        <div className=\"text-center\">\n          <div className=\"w-16 h-16 bg-agri-success/20 rounded-full flex items-center justify-center mx-auto mb-4\">\n            <CheckCircle className=\"w-8 h-8 text-agri-success animate-bounce\" />\n          </div>\n          <h1 className=\"text-2xl font-bold text-agri-accent mb-2\">Diagnosis Complete</h1>\n          <p className=\"text-agri-gray\">\n            Analyzed on {new Date(results.detectedDate).toLocaleDateString()}\n          </p>\n        </div>\n\n        {/* Plant Image */}\n        {plantImage && (\n          <div className=\"relative rounded-2xl overflow-hidden\">\n            <img \n              src={plantImage} \n              alt=\"Diagnosed plant\" \n              className=\"w-full aspect-[4/3] object-cover\"\n            />\n            <div className=\"absolute top-4 right-4 bg-agri-success rounded-full p-2\">\n              <Leaf className=\"w-5 h-5 text-white\" />\n            </div>\n          </div>\n        )}\n\n        {/* Disease Detection */}\n        <div className=\"plant-card border-l-4 border-red-500\">\n          <div className=\"flex items-start justify-between mb-4\">\n            <div className=\"flex-1\">\n              <h2 className=\"text-xl font-bold text-red-700 mb-2\">{results.disease}</h2>\n              <div className=\"flex items-center space-x-3 mb-3\">\n                <div className=\"flex items-center space-x-2\">\n                  <Progress value={results.confidence} className=\"w-20 h-2\" />\n                  <span className=\"text-sm font-medium text-red-600\">{results.confidence}% Match</span>\n                </div>\n                <span className={`px-2 py-1 rounded-full text-xs font-medium ${getSeverityColor(results.severity)}`}>\n                  {results.severity.toUpperCase()}\n                </span>\n              </div>\n              \n              <div className=\"grid grid-cols-2 gap-4 text-sm\">\n                <div>\n                  <span className=\"font-medium text-agri-accent\">Affected Area:</span>\n                  <p className=\"text-agri-gray\">{results.affectedArea}</p>\n                </div>\n                <div>\n                  <span className=\"font-medium text-agri-accent\">Stage:</span>\n                  <p className=\"text-agri-gray\">{results.stage}</p>\n                </div>\n              </div>\n            </div>\n            <AlertTriangle className=\"w-8 h-8 text-red-500\" />\n          </div>\n        </div>\n\n        {/* Treatment Timeline */}\n        <div className=\"bg-blue-50 rounded-2xl p-6 border border-blue-200\">\n          <div className=\"flex items-center space-x-3 mb-4\">\n            <Clock className=\"w-6 h-6 text-blue-600\" />\n            <h3 className=\"font-bold text-blue-900\">Treatment Timeline</h3>\n          </div>\n          \n          <div className=\"space-y-3\">\n            <div className=\"flex items-center justify-between\">\n              <span className=\"text-blue-800\">Recovery Duration:</span>\n              <span className=\"font-semibold text-blue-900\">14-21 days</span>\n            </div>\n            <div className=\"flex items-center justify-between\">\n              <span className=\"text-blue-800\">Success Rate:</span>\n              <span className=\"font-semibold text-agri-success\">92% farmers recovered</span>\n            </div>\n            <div className=\"flex items-center justify-between\">\n              <span className=\"text-blue-800\">Best Treatment Time:</span>\n              <span className=\"font-semibold text-blue-900\">Early morning</span>\n            </div>\n          </div>\n          \n          <Progress value={92} className=\"w-full h-2 mt-4\" />\n        </div>\n\n        {/* Add to Active Treatments */}\n        <div className=\"bg-agri-light rounded-2xl p-6 border border-agri-primary/20\">\n          <div className=\"flex items-center justify-between mb-4\">\n            <div>\n              <h3 className=\"font-bold text-agri-accent mb-1\">Track Treatment Progress</h3>\n              <p className=\"text-sm text-agri-gray\">Monitor recovery and get reminders</p>\n            </div>\n            <Calendar className=\"w-8 h-8 text-agri-primary\" />\n          </div>\n          \n          <Button \n            onClick={addToActiveTreatments}\n            className=\"w-full bg-agri-primary hover:bg-agri-secondary\"\n          >\n            <Plus className=\"w-4 h-4 mr-2\" />\n            Add to Active Treatments\n          </Button>\n        </div>\n\n        {/* Fertilizer Recommendations */}\n        <div className=\"space-y-4\">\n          <h2 className=\"text-xl font-bold text-agri-accent\">Recommended Fertilizers</h2>\n          \n          {recommendedFertilizers.map((fertilizer, index) => (\n            <div key={index} className=\"plant-card\">\n              <div className=\"flex items-center justify-between mb-3\">\n                <div className=\"flex-1\">\n                  <h3 className=\"font-semibold text-agri-accent\">{fertilizer.name}</h3>\n                  <p className=\"text-lg font-bold text-agri-primary\">{fertilizer.price}</p>\n                </div>\n                <div className=\"text-right\">\n                  <span className={`px-2 py-1 rounded-full text-xs font-medium ${\n                    fertilizer.inStock ? 'bg-green-100 text-green-600' : 'bg-red-100 text-red-600'\n                  }`}>\n                    {fertilizer.inStock ? 'In Stock' : 'Out of Stock'}\n                  </span>\n                </div>\n              </div>\n              \n              <Button \n                onClick={() => handleFertilizerRecommendation(fertilizer.name)}\n                disabled={!fertilizer.inStock}\n                className=\"w-full\"\n                variant={fertilizer.inStock ? \"default\" : \"outline\"}\n              >\n                <ShoppingCart className=\"w-4 h-4 mr-2\" />\n                {fertilizer.inStock ? 'Order Now' : 'Check Alternatives'}\n              </Button>\n            </div>\n          ))}\n        </div>\n\n        {/* Alternative Options */}\n        <div className=\"space-y-4\">\n          <h2 className=\"text-xl font-bold text-agri-accent\">Alternative Options</h2>\n          \n          {/* Nearby Shops */}\n          <div className=\"plant-card bg-gradient-to-r from-purple-500 to-purple-600 text-white\">\n            <div className=\"flex items-start justify-between mb-4\">\n              <div>\n                <h3 className=\"text-lg font-bold mb-2\">Visit Nearby Fertilizer Shops</h3>\n                <p className=\"text-white/90 text-sm mb-4\">Get directions and contact details</p>\n                \n                <div className=\"space-y-1 text-sm\">\n                  <div className=\"flex items-center space-x-2\">\n                    <CheckCircle className=\"w-4 h-4\" />\n                    <span>3 shops within 5km</span>\n                  </div>\n                  <div className=\"flex items-center space-x-2\">\n                    <CheckCircle className=\"w-4 h-4\" />\n                    <span>GPS navigation available</span>\n                  </div>\n                  <div className=\"flex items-center space-x-2\">\n                    <CheckCircle className=\"w-4 h-4\" />\n                    <span>Expert advice included</span>\n                  </div>\n                </div>\n              </div>\n              <MapPin className=\"w-8 h-8 opacity-80\" />\n            </div>\n            \n            <Button \n              onClick={() => navigate('/nearby-shops')}\n              className=\"w-full bg-white text-purple-600 hover:bg-white/90 font-semibold\"\n            >\n              <MapPin className=\"w-4 h-4 mr-2\" />\n              Find Nearest Shops\n            </Button>\n          </div>\n\n          {/* Expert Consultation */}\n          <div className=\"plant-card bg-gradient-to-r from-orange-500 to-orange-600 text-white\">\n            <div className=\"flex items-start justify-between mb-4\">\n              <div>\n                <h3 className=\"text-lg font-bold mb-2\">Consult Agricultural Expert</h3>\n                <p className=\"text-white/90 text-sm mb-4\">Get personalized advice from experts</p>\n                \n                <div className=\"space-y-1 text-sm\">\n                  <div className=\"flex items-center space-x-2\">\n                    <Award className=\"w-4 h-4\" />\n                    <span>Certified agricultural experts</span>\n                  </div>\n                  <div className=\"flex items-center space-x-2\">\n                    <CheckCircle className=\"w-4 h-4\" />\n                    <span>Video consultation available</span>\n                  </div>\n                </div>\n              </div>\n              <Award className=\"w-8 h-8 opacity-80\" />\n            </div>\n            \n            <Button \n              className=\"w-full bg-white text-orange-600 hover:bg-white/90 font-semibold\"\n            >\n              <Award className=\"w-4 h-4 mr-2\" />\n              Book Consultation\n            </Button>\n          </div>\n        </div>\n\n        {/* Action Summary */}\n        <div className=\"bg-agri-cream rounded-xl p-4 border border-agri-primary/20\">\n          <h3 className=\"font-semibold text-agri-accent mb-2\">Next Steps Summary:</h3>\n          <ol className=\"space-y-1 text-sm text-agri-gray\">\n            <li>1. Add to active treatments for monitoring</li>\n            <li>2. Order recommended fertilizers</li>\n            <li>3. Apply treatment in early morning</li>\n            <li>4. Monitor progress daily</li>\n            <li>5. Expect recovery in 14-21 days</li>\n          </ol>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default DiagnoseResults;","size_bytes":13357},"kisan/src/pages/FertilizerGuide.tsx":{"content":"import { useState } from 'react';\nimport { \n  ArrowLeft,\n  Bookmark,\n  BookmarkCheck,\n  Leaf,\n  Clock,\n  Droplets,\n  Volume2,\n  ChevronDown,\n  ChevronUp,\n  Calendar,\n  Beaker,\n  Info\n} from 'lucide-react';\nimport { useNavigate } from 'react-router-dom';\nimport { Button } from '@/components/ui/button';\nimport { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';\n\nconst FertilizerGuide = () => {\n  const navigate = useNavigate();\n  const [savedCrops, setSavedCrops] = useState<string[]>(() => {\n    const saved = localStorage.getItem('kisanmitra_saved_fertilizer_guides');\n    return saved ? JSON.parse(saved) : [];\n  });\n  const [expandedCards, setExpandedCards] = useState<string[]>([]);\n\n  const cropData = [\n    {\n      id: 'tomato',\n      name: 'Tomato',\n      image: '🍅',\n      season: 'Kharif/Rabi',\n      fertilizers: [\n        {\n          name: 'NPK (10:26:26)',\n          quantity: '200 kg/acre',\n          timing: 'At planting',\n          method: 'Basal application',\n          notes: 'Mix with soil before transplanting'\n        },\n        {\n          name: 'Urea (46% N)',\n          quantity: '50 kg/acre',\n          timing: '20 days after transplant',\n          method: 'Side dressing',\n          notes: 'Apply around plant base, avoid stems'\n        },\n        {\n          name: 'Calcium Nitrate',\n          quantity: '25 kg/acre',\n          timing: 'Flowering stage',\n          method: 'Foliar spray',\n          notes: 'Prevents blossom end rot'\n        }\n      ],\n      steps: [\n        'Prepare field with proper drainage',\n        'Apply basal fertilizer 1 week before transplanting',\n        'Transplant healthy seedlings',\n        'Apply first top dressing after 20 days',\n        'Monitor plant growth and adjust as needed'\n      ]\n    },\n    {\n      id: 'wheat',\n      name: 'Wheat',\n      image: '🌾',\n      season: 'Rabi',\n      fertilizers: [\n        {\n          name: 'DAP (18:46:0)',\n          quantity: '150 kg/acre',\n          timing: 'At sowing',\n          method: 'Drill with seed',\n          notes: 'Place 2-3 cm below seed level'\n        },\n        {\n          name: 'Urea (46% N)',\n          quantity: '65 kg/acre',\n          timing: '1st irrigation (21 days)',\n          method: 'Broadcasting',\n          notes: 'Apply before irrigation'\n        },\n        {\n          name: 'Urea (46% N)',\n          quantity: '65 kg/acre',\n          timing: '2nd irrigation (45 days)',\n          method: 'Broadcasting',\n          notes: 'Apply during tillering stage'\n        }\n      ],\n      steps: [\n        'Test soil pH (ideal 6.0-7.5)',\n        'Apply basal dose with seed drilling',\n        'Ensure proper seed depth (4-5 cm)',\n        'First top dressing at crown root stage',\n        'Second top dressing at tillering',\n        'Monitor for nutrient deficiency signs'\n      ]\n    },\n    {\n      id: 'rice',\n      name: 'Rice',\n      image: '🌾',\n      season: 'Kharif',\n      fertilizers: [\n        {\n          name: 'NPK (12:32:16)',\n          quantity: '125 kg/acre',\n          timing: 'Before transplanting',\n          method: 'Broadcasting',\n          notes: 'Mix thoroughly with puddled soil'\n        },\n        {\n          name: 'Urea (46% N)',\n          quantity: '45 kg/acre',\n          timing: '15 days after transplant',\n          method: 'Broadcasting',\n          notes: 'Apply in standing water'\n        },\n        {\n          name: 'Urea (46% N)',\n          quantity: '45 kg/acre',\n          timing: 'At panicle initiation',\n          method: 'Broadcasting',\n          notes: 'Apply during tillering stage'\n        }\n      ],\n      steps: [\n        'Prepare puddled field with standing water',\n        'Apply basal fertilizer 2-3 days before transplanting',\n        'Transplant 21-day old seedlings',\n        'Maintain water level at 2-5 cm',\n        'Apply nitrogen in split doses',\n        'Drain field 10 days before harvest'\n      ]\n    },\n    {\n      id: 'cotton',\n      name: 'Cotton',\n      image: '☁️',\n      season: 'Kharif',\n      fertilizers: [\n        {\n          name: 'NPK (17:17:17)',\n          quantity: '100 kg/acre',\n          timing: 'At sowing',\n          method: 'Side placement',\n          notes: 'Place 3-4 cm away from seed'\n        },\n        {\n          name: 'Urea (46% N)',\n          quantity: '60 kg/acre',\n          timing: '30-35 days after sowing',\n          method: 'Side dressing',\n          notes: 'Apply during square formation'\n        },\n        {\n          name: 'MOP (60% K2O)',\n          quantity: '35 kg/acre',\n          timing: 'At flowering',\n          method: 'Broadcasting',\n          notes: 'Helps in boll development'\n        }\n      ],\n      steps: [\n        'Select well-drained black cotton soil',\n        'Apply pre-sowing fertilizers',\n        'Sow seeds at proper depth (2-3 cm)',\n        'First top dressing during square stage',\n        'Second application at flowering',\n        'Monitor for pink bollworm'\n      ]\n    },\n    {\n      id: 'maize',\n      name: 'Maize',\n      image: '🌽',\n      season: 'Kharif/Rabi',\n      fertilizers: [\n        {\n          name: 'NPK (12:32:16)',\n          quantity: '125 kg/acre',\n          timing: 'At sowing',\n          method: 'Band placement',\n          notes: 'Place 5 cm away and below seed'\n        },\n        {\n          name: 'Urea (46% N)',\n          quantity: '65 kg/acre',\n          timing: '25-30 days after sowing',\n          method: 'Side dressing',\n          notes: 'Apply at knee-high stage'\n        },\n        {\n          name: 'Urea (46% N)',\n          quantity: '65 kg/acre',\n          timing: 'Pre-tasseling stage',\n          method: 'Side dressing',\n          notes: 'Apply 50-55 days after sowing'\n        }\n      ],\n      steps: [\n        'Choose well-drained fertile soil',\n        'Apply basal dose at time of sowing',\n        'Maintain plant spacing of 60x20 cm',\n        'First top dressing at knee-high stage',\n        'Second top dressing before tasseling',\n        'Ensure adequate moisture throughout'\n      ]\n    }\n  ];\n\n  const toggleSaveCrop = (cropId: string) => {\n    const updatedSaved = savedCrops.includes(cropId)\n      ? savedCrops.filter(id => id !== cropId)\n      : [...savedCrops, cropId];\n    \n    setSavedCrops(updatedSaved);\n    localStorage.setItem('kisanmitra_saved_fertilizer_guides', JSON.stringify(updatedSaved));\n  };\n\n  const toggleExpandCard = (cropId: string) => {\n    setExpandedCards(prev => \n      prev.includes(cropId) \n        ? prev.filter(id => id !== cropId)\n        : [...prev, cropId]\n    );\n  };\n\n  return (\n    <div className=\"min-h-screen bg-gradient-to-br from-green-50 to-blue-50\">\n      {/* Header */}\n      <div className=\"bg-white shadow-sm border-b border-green-100 sticky top-0 z-10\">\n        <div className=\"px-6 py-4\">\n          <div className=\"flex items-center justify-between\">\n            <div className=\"flex items-center space-x-4\">\n              <button\n                onClick={() => navigate('/')}\n                className=\"p-2 hover:bg-gray-100 rounded-xl transition-colors\"\n              >\n                <ArrowLeft className=\"w-6 h-6 text-gray-600\" />\n              </button>\n              <div className=\"flex items-center space-x-3\">\n                <div className=\"p-3 bg-green-100 rounded-xl\">\n                  <Beaker className=\"w-7 h-7 text-green-600\" />\n                </div>\n                <div>\n                  <h1 className=\"text-2xl font-bold text-gray-900\">Fertilizer Guidance</h1>\n                  <p className=\"text-sm text-gray-600\">Crop-specific fertilizer recommendations</p>\n                </div>\n              </div>\n            </div>\n          </div>\n        </div>\n      </div>\n\n      {/* Content */}\n      <div className=\"px-6 py-8 space-y-8\">\n        {/* Info Card */}\n        <Card className=\"bg-gradient-to-r from-green-50 to-blue-50 border-2 border-green-200\">\n          <CardContent className=\"p-6\">\n            <div className=\"flex items-start space-x-4\">\n              <div className=\"p-3 bg-white rounded-xl\">\n                <Info className=\"w-6 h-6 text-green-600\" />\n              </div>\n              <div>\n                <h3 className=\"font-bold text-gray-900 mb-2 text-lg\">\n                  Scientific Fertilizer Recommendations\n                </h3>\n                <p className=\"text-gray-700 text-base leading-relaxed\">\n                  These guidelines are based on soil science research. Always conduct soil testing \n                  for best results. Tap 📖 to save guidance for your crops.\n                </p>\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n\n        {/* Crop Cards */}\n        <div className=\"space-y-6\">\n          {cropData.map((crop) => {\n            const isExpanded = expandedCards.includes(crop.id);\n            const isSaved = savedCrops.includes(crop.id);\n            \n            return (\n              <Card key={crop.id} className=\"bg-white rounded-3xl shadow-lg border border-gray-100 overflow-hidden\">\n                {/* Crop Header */}\n                <CardHeader className=\"bg-gradient-to-r from-green-50 to-green-100 border-b border-green-200\">\n                  <div className=\"flex items-center justify-between\">\n                    <div className=\"flex items-center space-x-4\">\n                      <div className=\"text-4xl\">{crop.image}</div>\n                      <div>\n                        <CardTitle className=\"text-2xl font-bold text-gray-900\">{crop.name}</CardTitle>\n                        <div className=\"flex items-center space-x-2 mt-1\">\n                          <Calendar className=\"w-4 h-4 text-green-600\" />\n                          <span className=\"text-green-700 font-medium\">{crop.season} Season</span>\n                        </div>\n                      </div>\n                    </div>\n                    <button\n                      onClick={() => toggleSaveCrop(crop.id)}\n                      className={`p-3 rounded-xl transition-all duration-200 ${\n                        isSaved \n                          ? 'bg-green-100 text-green-600' \n                          : 'bg-gray-100 text-gray-600 hover:bg-green-100 hover:text-green-600'\n                      }`}\n                    >\n                      {isSaved ? (\n                        <BookmarkCheck className=\"w-6 h-6\" />\n                      ) : (\n                        <Bookmark className=\"w-6 h-6\" />\n                      )}\n                    </button>\n                  </div>\n                </CardHeader>\n\n                {/* Fertilizer Table */}\n                <CardContent className=\"p-6\">\n                  <div className=\"space-y-4\">\n                    <h3 className=\"text-xl font-bold text-gray-900 mb-4 flex items-center space-x-2\">\n                      <Droplets className=\"w-5 h-5 text-blue-600\" />\n                      <span>Fertilizer Schedule</span>\n                    </h3>\n                    \n                    <div className=\"space-y-3\">\n                      {crop.fertilizers.map((fertilizer, index) => (\n                        <div key={index} className=\"bg-gray-50 rounded-2xl p-4 border border-gray-200\">\n                          <div className=\"flex items-start justify-between mb-3\">\n                            <div className=\"flex-1\">\n                              <h4 className=\"font-bold text-gray-900 text-lg\">{fertilizer.name}</h4>\n                              <p className=\"text-green-600 font-bold text-base\">{fertilizer.quantity}</p>\n                            </div>\n                            <div className=\"text-right\">\n                              <div className=\"flex items-center space-x-1 text-blue-600\">\n                                <Clock className=\"w-4 h-4\" />\n                                <span className=\"text-sm font-medium\">{fertilizer.timing}</span>\n                              </div>\n                            </div>\n                          </div>\n                          \n                          <div className=\"grid grid-cols-1 gap-2\">\n                            <div className=\"flex items-center space-x-2\">\n                              <span className=\"text-sm font-medium text-gray-600\">Method:</span>\n                              <span className=\"text-sm text-gray-800 font-medium\">{fertilizer.method}</span>\n                            </div>\n                            <div className=\"flex items-start space-x-2\">\n                              <span className=\"text-sm font-medium text-gray-600 mt-0.5\">Notes:</span>\n                              <span className=\"text-sm text-gray-700 leading-relaxed\">{fertilizer.notes}</span>\n                            </div>\n                          </div>\n                        </div>\n                      ))}\n                    </div>\n                  </div>\n\n                  {/* Expandable Steps */}\n                  <div className=\"mt-6\">\n                    <button\n                      onClick={() => toggleExpandCard(crop.id)}\n                      className=\"w-full flex items-center justify-between p-4 bg-gradient-to-r from-blue-50 to-purple-50 rounded-2xl hover:from-blue-100 hover:to-purple-100 transition-colors\"\n                    >\n                      <div className=\"flex items-center space-x-3\">\n                        <Leaf className=\"w-5 h-5 text-green-600\" />\n                        <span className=\"font-bold text-gray-900\">Step-by-Step Instructions</span>\n                      </div>\n                      {isExpanded ? (\n                        <ChevronUp className=\"w-5 h-5 text-gray-600\" />\n                      ) : (\n                        <ChevronDown className=\"w-5 h-5 text-gray-600\" />\n                      )}\n                    </button>\n\n                    {isExpanded && (\n                      <div className=\"mt-4 space-y-3\">\n                        {crop.steps.map((step, index) => (\n                          <div key={index} className=\"flex items-start space-x-3 p-3 bg-white rounded-xl border border-gray-200\">\n                            <div className=\"flex-shrink-0 w-6 h-6 bg-green-100 rounded-full flex items-center justify-center\">\n                              <span className=\"text-xs font-bold text-green-600\">{index + 1}</span>\n                            </div>\n                            <p className=\"text-gray-700 text-sm leading-relaxed\">{step}</p>\n                          </div>\n                        ))}\n                        \n                        <div className=\"mt-4 p-4 bg-yellow-50 rounded-xl border border-yellow-200\">\n                          <div className=\"flex items-center space-x-2 mb-2\">\n                            <Volume2 className=\"w-5 h-5 text-yellow-600\" />\n                            <span className=\"font-bold text-yellow-800\">Voice Guidance</span>\n                          </div>\n                          <p className=\"text-yellow-700 text-sm\">\n                            Tap the speaker icon for audio instructions in your local language.\n                          </p>\n                        </div>\n                      </div>\n                    )}\n                  </div>\n\n                  {/* Save Button */}\n                  <div className=\"mt-6\">\n                    <Button\n                      onClick={() => toggleSaveCrop(crop.id)}\n                      className={`w-full py-4 rounded-2xl font-bold text-lg transition-all duration-300 ${\n                        isSaved\n                          ? 'bg-green-100 text-green-700 border-2 border-green-300 hover:bg-green-200'\n                          : 'bg-gradient-to-r from-green-500 to-green-600 hover:from-green-600 hover:to-green-700 text-white shadow-lg hover:shadow-xl'\n                      }`}\n                    >\n                      <div className=\"flex items-center justify-center space-x-3\">\n                        {isSaved ? (\n                          <>\n                            <BookmarkCheck className=\"w-6 h-6\" />\n                            <span>Saved to My Guidance</span>\n                          </>\n                        ) : (\n                          <>\n                            <Bookmark className=\"w-6 h-6\" />\n                            <span>Save Guidance</span>\n                          </>\n                        )}\n                      </div>\n                    </Button>\n                  </div>\n                </CardContent>\n              </Card>\n            );\n          })}\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default FertilizerGuide;","size_bytes":16508},"kisan/src/pages/Guides.tsx":{"content":"import { useState } from 'react';\nimport { useNavigate } from 'react-router-dom';\nimport { \n  ArrowLeft, \n  Search, \n  BookOpen, \n  Play, \n  Star,\n  Clock,\n  Download,\n  Bookmark,\n  ChevronRight,\n  Sprout,\n  Droplets,\n  Sun,\n  Bug,\n  Calendar,\n  TrendingUp\n} from 'lucide-react';\nimport { Button } from '@/components/ui/button';\nimport { Input } from '@/components/ui/input';\nimport { Badge } from '@/components/ui/badge';\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from '@/components/ui/tabs';\n\nconst Guides = () => {\n  const navigate = useNavigate();\n  const [searchQuery, setSearchQuery] = useState('');\n  const [selectedCategory, setSelectedCategory] = useState('all');\n\n  const categories = [\n    { id: 'all', name: 'All Guides', icon: BookOpen },\n    { id: 'planting', name: 'Planting', icon: Sprout },\n    { id: 'irrigation', name: 'Irrigation', icon: Droplets },\n    { id: 'pest-control', name: 'Pest Control', icon: Bug },\n    { id: 'harvesting', name: 'Harvesting', icon: Calendar },\n    { id: 'market', name: 'Marketing', icon: TrendingUp }\n  ];\n\n  const guides = [\n    {\n      id: '1',\n      title: 'Complete Tomato Growing Guide',\n      description: 'From seed to harvest - everything you need to know about growing healthy tomatoes',\n      category: 'planting',\n      difficulty: 'Beginner',\n      duration: '15 min read',\n      rating: 4.8,\n      reviews: 1234,\n      image: '/placeholder.svg',\n      featured: true,\n      downloadable: true,\n      hasVideo: true,\n      tags: ['Vegetables', 'Indoor', 'Year-round'],\n      author: 'Dr. Rajesh Kumar',\n      updatedDate: '2024-01-15'\n    },\n    {\n      id: '2',\n      title: 'Modern Drip Irrigation Setup',\n      description: 'Save water and increase yield with efficient drip irrigation systems',\n      category: 'irrigation',\n      difficulty: 'Intermediate',\n      duration: '12 min read',\n      rating: 4.6,\n      reviews: 856,\n      image: '/placeholder.svg',\n      featured: false,\n      downloadable: true,\n      hasVideo: true,\n      tags: ['Water Management', 'Technology', 'Cost-effective'],\n      author: 'Priya Sharma',\n      updatedDate: '2024-01-10'\n    },\n    {\n      id: '3',\n      title: 'Organic Pest Control Methods',\n      description: 'Natural and safe pest control techniques for healthy crops',\n      category: 'pest-control',\n      difficulty: 'Beginner',\n      duration: '10 min read',\n      rating: 4.9,\n      reviews: 2156,\n      image: '/placeholder.svg',\n      featured: true,\n      downloadable: false,\n      hasVideo: false,\n      tags: ['Organic', 'Natural', 'Safe'],\n      author: 'Ramesh Patel',\n      updatedDate: '2024-01-18'\n    },\n    {\n      id: '4',\n      title: 'Wheat Harvesting Best Practices',\n      description: 'Maximize your wheat yield with proper harvesting techniques',\n      category: 'harvesting',\n      difficulty: 'Advanced',\n      duration: '18 min read',\n      rating: 4.7,\n      reviews: 634,\n      image: '/placeholder.svg',\n      featured: false,\n      downloadable: true,\n      hasVideo: true,\n      tags: ['Wheat', 'Timing', 'Equipment'],\n      author: 'Suresh Singh',\n      updatedDate: '2024-01-12'\n    },\n    {\n      id: '5',\n      title: 'Digital Marketing for Farmers',\n      description: 'Sell your produce online and reach more customers',\n      category: 'market',\n      difficulty: 'Intermediate',\n      duration: '14 min read',\n      rating: 4.5,\n      reviews: 423,\n      image: '/placeholder.svg',\n      featured: false,\n      downloadable: false,\n      hasVideo: true,\n      tags: ['Online Sales', 'Digital', 'Business'],\n      author: 'Anjali Verma',\n      updatedDate: '2024-01-08'\n    }\n  ];\n\n  const getDifficultyColor = (difficulty: string) => {\n    switch (difficulty) {\n      case 'Beginner': return 'bg-green-100 text-green-800';\n      case 'Intermediate': return 'bg-yellow-100 text-yellow-800';\n      case 'Advanced': return 'bg-red-100 text-red-800';\n      default: return 'bg-gray-100 text-gray-800';\n    }\n  };\n\n  const filteredGuides = guides.filter(guide => {\n    const matchesSearch = guide.title.toLowerCase().includes(searchQuery.toLowerCase()) ||\n                         guide.description.toLowerCase().includes(searchQuery.toLowerCase()) ||\n                         guide.tags.some(tag => tag.toLowerCase().includes(searchQuery.toLowerCase()));\n    const matchesCategory = selectedCategory === 'all' || guide.category === selectedCategory;\n    return matchesSearch && matchesCategory;\n  });\n\n  const featuredGuides = guides.filter(guide => guide.featured);\n\n  return (\n    <div className=\"mobile-container bg-agri-light-gray\">\n      {/* Header */}\n      <div className=\"mobile-header\">\n        <div className=\"flex items-center space-x-3\">\n          <button onClick={() => navigate('/home')}>\n            <ArrowLeft className=\"w-6 h-6 text-agri-gray\" />\n          </button>\n          <h1 className=\"text-xl font-bold text-text-secondary\">Cultivation Guides</h1>\n        </div>\n        \n        <button>\n          <Bookmark className=\"w-6 h-6 text-agri-gray\" />\n        </button>\n      </div>\n\n      {/* Content */}\n      <div className=\"mobile-content space-y-6 pt-4\">\n        {/* Search Bar */}\n        <div className=\"relative\">\n          <Search className=\"absolute left-3 top-1/2 transform -translate-y-1/2 w-5 h-5 text-agri-gray\" />\n          <Input\n            placeholder=\"Search guides, topics, crops...\"\n            value={searchQuery}\n            onChange={(e) => setSearchQuery(e.target.value)}\n            className=\"pl-10 py-3 text-base bg-white border-agri-light-gray rounded-xl\"\n          />\n        </div>\n\n        {/* Categories */}\n        <div className=\"flex space-x-3 overflow-x-auto pb-2\">\n          {categories.map((category) => (\n            <button\n              key={category.id}\n              onClick={() => setSelectedCategory(category.id)}\n              className={`flex items-center space-x-2 px-4 py-2 rounded-xl whitespace-nowrap transition-all ${\n                selectedCategory === category.id\n                  ? 'bg-agri-primary text-white'\n                  : 'bg-white text-agri-gray border border-agri-light-gray'\n              }`}\n            >\n              <category.icon className=\"w-4 h-4\" />\n              <span className=\"text-sm font-medium\">{category.name}</span>\n            </button>\n          ))}\n        </div>\n\n        {/* Featured Section */}\n        {selectedCategory === 'all' && featuredGuides.length > 0 && (\n          <div className=\"space-y-4\">\n            <h2 className=\"text-lg font-bold text-text-secondary\">Featured Guides</h2>\n            <div className=\"space-y-4\">\n              {featuredGuides.slice(0, 2).map((guide) => (\n                <div key={guide.id} className=\"bg-white rounded-2xl overflow-hidden shadow-soft border border-agri-light-gray\">\n                  <div className=\"relative\">\n                    <div className=\"h-40 bg-agri-light flex items-center justify-center\">\n                      <BookOpen className=\"w-16 h-16 text-agri-primary\" />\n                    </div>\n                    \n                    {guide.hasVideo && (\n                      <div className=\"absolute top-4 left-4\">\n                        <div className=\"w-10 h-10 bg-black/70 rounded-full flex items-center justify-center\">\n                          <Play className=\"w-5 h-5 text-white ml-0.5\" />\n                        </div>\n                      </div>\n                    )}\n                    \n                    <Badge className=\"absolute top-4 right-4 bg-agri-warning text-white\">\n                      Featured\n                    </Badge>\n                  </div>\n                  \n                  <div className=\"p-6\">\n                    <div className=\"flex items-center space-x-2 mb-2\">\n                      <Badge className={getDifficultyColor(guide.difficulty)}>\n                        {guide.difficulty}\n                      </Badge>\n                      <span className=\"text-sm text-agri-gray\">•</span>\n                      <span className=\"text-sm text-agri-gray\">{guide.duration}</span>\n                    </div>\n                    \n                    <h3 className=\"text-lg font-bold text-text-secondary mb-2\">{guide.title}</h3>\n                    <p className=\"text-agri-gray text-sm mb-4 line-clamp-2\">{guide.description}</p>\n                    \n                    <div className=\"flex items-center justify-between mb-4\">\n                      <div className=\"flex items-center space-x-2\">\n                        <div className=\"flex items-center space-x-1\">\n                          <Star className=\"w-4 h-4 fill-yellow-400 text-yellow-400\" />\n                          <span className=\"text-sm font-medium\">{guide.rating}</span>\n                        </div>\n                        <span className=\"text-sm text-agri-gray\">({guide.reviews})</span>\n                      </div>\n                      \n                      <div className=\"flex items-center space-x-2\">\n                        {guide.downloadable && (\n                          <button className=\"p-2 bg-agri-light rounded-lg\">\n                            <Download className=\"w-4 h-4 text-agri-primary\" />\n                          </button>\n                        )}\n                        <button className=\"p-2 bg-agri-light rounded-lg\">\n                          <Bookmark className=\"w-4 h-4 text-agri-primary\" />\n                        </button>\n                      </div>\n                    </div>\n                    \n                    <div className=\"flex flex-wrap gap-2 mb-4\">\n                      {guide.tags.slice(0, 3).map((tag, index) => (\n                        <Badge key={index} variant=\"outline\" className=\"text-xs px-2 py-1 border-agri-primary text-agri-primary\">\n                          {tag}\n                        </Badge>\n                      ))}\n                    </div>\n                    \n                    <Button \n                      onClick={() => navigate(`/guides/${guide.id}`)}\n                      className=\"w-full bg-agri-primary hover:bg-agri-secondary text-white\"\n                    >\n                      Read Guide\n                      <ChevronRight className=\"w-4 h-4 ml-2\" />\n                    </Button>\n                  </div>\n                </div>\n              ))}\n            </div>\n          </div>\n        )}\n\n        {/* All Guides */}\n        <div className=\"space-y-4\">\n          <div className=\"flex items-center justify-between\">\n            <h2 className=\"text-lg font-bold text-text-secondary\">\n              {selectedCategory === 'all' ? 'All Guides' : categories.find(c => c.id === selectedCategory)?.name}\n            </h2>\n            <span className=\"text-sm text-agri-gray\">{filteredGuides.length} guides</span>\n          </div>\n\n          <div className=\"space-y-4\">\n            {filteredGuides.map((guide) => (\n              <div \n                key={guide.id} \n                className=\"bg-white rounded-2xl p-4 shadow-soft border border-agri-light-gray hover:shadow-medium transition-shadow\"\n                onClick={() => navigate(`/guides/${guide.id}`)}\n              >\n                <div className=\"flex space-x-4\">\n                  {/* Guide Thumbnail */}\n                  <div className=\"relative\">\n                    <div className=\"w-20 h-20 bg-agri-light rounded-xl flex items-center justify-center\">\n                      <BookOpen className=\"w-8 h-8 text-agri-primary\" />\n                    </div>\n                    {guide.hasVideo && (\n                      <div className=\"absolute -top-1 -right-1 w-6 h-6 bg-red-500 rounded-full flex items-center justify-center\">\n                        <Play className=\"w-3 h-3 text-white ml-0.5\" />\n                      </div>\n                    )}\n                  </div>\n\n                  {/* Guide Info */}\n                  <div className=\"flex-1\">\n                    <div className=\"flex items-start justify-between\">\n                      <div className=\"flex-1\">\n                        <div className=\"flex items-center space-x-2 mb-1\">\n                          <Badge className={`${getDifficultyColor(guide.difficulty)} text-xs px-2 py-0.5`}>\n                            {guide.difficulty}\n                          </Badge>\n                          <span className=\"text-xs text-agri-gray\">•</span>\n                          <div className=\"flex items-center space-x-1\">\n                            <Clock className=\"w-3 h-3 text-agri-gray\" />\n                            <span className=\"text-xs text-agri-gray\">{guide.duration}</span>\n                          </div>\n                        </div>\n                        \n                        <h3 className=\"font-semibold text-text-secondary text-sm mb-1 line-clamp-2\">{guide.title}</h3>\n                        <p className=\"text-xs text-agri-gray mb-2 line-clamp-2\">{guide.description}</p>\n                        \n                        <div className=\"flex items-center space-x-3\">\n                          <div className=\"flex items-center space-x-1\">\n                            <Star className=\"w-3 h-3 fill-yellow-400 text-yellow-400\" />\n                            <span className=\"text-xs font-medium\">{guide.rating}</span>\n                          </div>\n                          <span className=\"text-xs text-agri-gray\">by {guide.author}</span>\n                        </div>\n                      </div>\n\n                      <div className=\"flex flex-col items-end space-y-2\">\n                        {guide.downloadable && (\n                          <button \n                            className=\"p-1.5 bg-agri-light rounded-lg\"\n                            onClick={(e) => {\n                              e.stopPropagation();\n                              // Handle download\n                            }}\n                          >\n                            <Download className=\"w-3 h-3 text-agri-primary\" />\n                          </button>\n                        )}\n                        \n                        <button \n                          className=\"p-1.5 bg-agri-light rounded-lg\"\n                          onClick={(e) => {\n                            e.stopPropagation();\n                            // Handle bookmark\n                          }}\n                        >\n                          <Bookmark className=\"w-3 h-3 text-agri-primary\" />\n                        </button>\n                      </div>\n                    </div>\n\n                    {/* Tags */}\n                    <div className=\"flex flex-wrap gap-1 mt-2\">\n                      {guide.tags.slice(0, 2).map((tag, index) => (\n                        <Badge key={index} variant=\"outline\" className=\"text-xs px-1.5 py-0.5 border-agri-primary text-agri-primary\">\n                          {tag}\n                        </Badge>\n                      ))}\n                    </div>\n                  </div>\n                </div>\n              </div>\n            ))}\n          </div>\n        </div>\n\n        {/* No Results */}\n        {filteredGuides.length === 0 && (\n          <div className=\"text-center py-12\">\n            <BookOpen className=\"w-16 h-16 text-agri-gray mx-auto mb-4\" />\n            <h3 className=\"text-lg font-semibold text-text-secondary mb-2\">No guides found</h3>\n            <p className=\"text-agri-gray mb-6\">Try adjusting your search or browse different categories</p>\n            <Button \n              onClick={() => {\n                setSearchQuery('');\n                setSelectedCategory('all');\n              }}\n              variant=\"outline\"\n              className=\"border-agri-primary text-agri-primary hover:bg-agri-light\"\n            >\n              Clear Filters\n            </Button>\n          </div>\n        )}\n\n        {/* Quick Access */}\n        <div className=\"bg-white rounded-2xl p-6 shadow-soft\">\n          <h3 className=\"text-lg font-semibold text-text-secondary mb-4\">Quick Access</h3>\n          <div className=\"grid grid-cols-2 gap-4\">\n            <button \n              onClick={() => navigate('/guides/seasonal')}\n              className=\"flex flex-col items-center p-4 bg-agri-light rounded-xl hover:bg-agri-light-gray transition-colors\"\n            >\n              <Calendar className=\"w-8 h-8 text-agri-primary mb-2\" />\n              <span className=\"text-sm font-medium text-text-secondary\">Seasonal Guide</span>\n            </button>\n            \n            <button \n              onClick={() => navigate('/guides/problems')}\n              className=\"flex flex-col items-center p-4 bg-agri-light rounded-xl hover:bg-agri-light-gray transition-colors\"\n            >\n              <Bug className=\"w-8 h-8 text-agri-primary mb-2\" />\n              <span className=\"text-sm font-medium text-text-secondary\">Problem Solver</span>\n            </button>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default Guides;","size_bytes":16891},"kisan/src/pages/Home.tsx":{"content":"\nimport { useState, useEffect } from 'react';\nimport { useNavigate } from 'react-router-dom';\nimport { \n  Bell, \n  Camera, \n  ShoppingCart, \n  MapPin, \n  Package, \n  Sprout, \n  Home as HomeIcon,\n  User,\n  Lightbulb,\n  AlertTriangle,\n  TrendingUp,\n  Store,\n  Leaf,\n  Cloud,\n  Sun,\n  CheckCircle,\n  ChevronDown,\n  Droplets,\n  Activity,\n  TestTube,\n  Beaker,\n  IndianRupee,\n  ArrowRight,\n  Volume2,\n  BookOpen,\n  BarChart3,\n  List,\n  ChevronRight,\n  CloudRain,\n  Thermometer\n} from 'lucide-react';\nimport { Button } from '@/components/ui/button';\nimport { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';\nimport LanguageSwitcher from '@/components/LanguageSwitcher';\nimport NotificationPanel from '@/components/NotificationPanel';\nimport { weatherService, WeatherData } from '@/lib/weather';\n\nconst Home = () => {\n  const navigate = useNavigate();\n  const [showNotifications, setShowNotifications] = useState(false);\n  const [weather, setWeather] = useState<WeatherData | null>(null);\n  const [weatherLoading, setWeatherLoading] = useState(true);\n  \n  // Get user data\n  const userData = JSON.parse(localStorage.getItem('kisanmitra_user') || '{}');\n  const userName = userData.name || 'Farmer';\n  \n  // Get time-based greeting\n  const getGreeting = () => {\n    const hour = new Date().getHours();\n    if (hour < 12) return '🌱 Good Morning';\n    if (hour < 17) return '🌞 Good Afternoon';\n    return '🌙 Good Evening';\n  };\n\n  // Load weather data\n  useEffect(() => {\n    const loadWeather = async () => {\n      try {\n        setWeatherLoading(true);\n        \n        // Try to get current location first\n        try {\n          const location = await weatherService.getCurrentLocation();\n          const weatherData = await weatherService.getCurrentWeather(location.lat, location.lon);\n          setWeather(weatherData);\n        } catch (locationError) {\n          // If location access fails, use a default location\n          console.warn('Location access failed, using default location');\n          const defaultWeather = await weatherService.getWeatherByCity('Delhi, IN');\n          setWeather(defaultWeather);\n        }\n      } catch (error) {\n        console.error('Weather fetch error:', error);\n        // Keep weather as null, will show fallback UI\n      } finally {\n        setWeatherLoading(false);\n      }\n    };\n\n    loadWeather();\n  }, []);\n\n  // Market prices data with enhanced info\n  const marketPrices = [\n    { crop: 'Tomato', price: '₹16/kg', trend: 'up', change: '+8%', changeValue: '+₹1.20' },\n    { crop: 'Paddy', price: '₹1,850/qtl', trend: 'down', change: '-3%', changeValue: '-₹57' },\n    { crop: 'Onion', price: '₹25/kg', trend: 'up', change: '+12%', changeValue: '+₹2.70' },\n  ];\n\n  const quickActions = [\n    {\n      id: 'listings',\n      title: 'My Listings',\n      subtitle: 'Manage crops',\n      icon: Package,\n      bgColor: 'bg-green-50',\n      iconColor: 'text-green-600',\n      badge: '3',\n      action: () => navigate('/sell')\n    },\n    {\n      id: 'sell',\n      title: 'Sell Produce',\n      subtitle: 'Post your harvest',\n      icon: TrendingUp,\n      bgColor: 'bg-agri-light',\n      iconColor: 'text-agri-primary',\n      badge: 'NEW',\n      action: () => navigate('/sell')\n    },\n    {\n      id: 'fertilizers',\n      title: 'Order Fertilizers',\n      subtitle: 'Shop nutrients',\n      icon: ShoppingCart,\n      bgColor: 'bg-orange-50',\n      iconColor: 'text-orange-600',\n      action: () => navigate('/shop')\n    },\n    {\n      id: 'shops',\n      title: 'Nearby Shops',\n      subtitle: 'Find agri stores',\n      icon: MapPin,\n      bgColor: 'bg-agri-light-purple',\n      iconColor: 'text-agri-purple',\n      action: () => navigate('/shops')\n    },\n    {\n      id: 'orders',\n      title: 'My Orders',\n      subtitle: 'Track orders',\n      icon: Package,\n      bgColor: 'bg-agri-light-blue',\n      iconColor: 'text-agri-info',\n      action: () => navigate('/orders')\n    }\n  ];\n\n  const farmActions = [\n    {\n      id: 'treatments',\n      title: 'Active Treatments',\n      subtitle: '2 ongoing',\n      icon: Activity,\n      bgColor: 'bg-red-50',\n      iconColor: 'text-red-600',\n      badge: 2,\n      action: () => navigate('/treatments')\n    },\n    {\n      id: 'guides',\n      title: 'Cultivation Guides',\n      subtitle: 'Growing tips',\n      icon: Sprout,\n      bgColor: 'bg-agri-light',\n      iconColor: 'text-agri-primary',\n      action: () => navigate('/guides')\n    }\n  ];\n\n  return (\n    <div className=\"mobile-container bg-gray-50\">\n      {/* Header */}\n      <div className=\"mobile-header bg-white\">\n        <div className=\"flex items-center space-x-3\">\n          <div className=\"w-8 h-8 bg-agri-primary rounded-lg flex items-center justify-center\">\n            <Sprout className=\"w-5 h-5 text-white\" />\n          </div>\n          <div>\n            <h1 className=\"text-xl font-bold text-text-secondary\">KisanMitra</h1>\n            <p className=\"text-sm text-agri-primary font-medium\">\n              {getGreeting()}, {userName} Ji!\n            </p>\n          </div>\n        </div>\n        \n        <div className=\"flex items-center space-x-3\">\n          <LanguageSwitcher />\n          \n          <button \n            onClick={() => setShowNotifications(true)}\n            className=\"relative p-2 hover:bg-gray-100 rounded-full transition-colors\"\n          >\n            <Bell className=\"w-6 h-6 text-agri-gray\" />\n            <div className=\"absolute -top-1 -right-1 w-5 h-5 bg-red-500 rounded-full flex items-center justify-center animate-pulse\">\n              <span className=\"text-xs font-bold text-white\">3</span>\n            </div>\n          </button>\n        </div>\n      </div>\n\n      {/* Content */}\n      <div className=\"mobile-content space-y-6 pt-4\">\n        {/* Weather Card - Compact */}\n        <Card className=\"weather-card border-0 shadow-medium\">\n          <CardContent className=\"p-4\">\n            {/* Header with location and more info */}\n            <div className=\"flex items-center justify-between mb-3\">\n              <div className=\"flex items-center space-x-2\">\n                <MapPin className=\"w-4 h-4 text-blue-600\" />\n                <span className=\"text-sm font-medium text-blue-800\">\n                  {weatherLoading ? 'Loading...' : weather?.location || 'Location unavailable'}\n                </span>\n              </div>\n              <div className=\"flex items-center space-x-2\">\n                <Button \n                  size=\"sm\" \n                  variant=\"ghost\" \n                  className=\"text-blue-700 hover:bg-blue-50 p-1 h-6\"\n                  onClick={() => {/* Voice function */}}\n                >\n                  <Volume2 className=\"w-4 h-4\" />\n                </Button>\n                <Button \n                  size=\"sm\" \n                  variant=\"outline\" \n                  className=\"bg-white/70 border-blue-200 hover:bg-white text-blue-700 text-xs h-6 px-2\"\n                  onClick={() => navigate('/weather')}\n                >\n                  More\n                </Button>\n              </div>\n            </div>\n\n            {/* Compact weather display */}\n            <div className=\"flex items-center justify-between\">\n              <div className=\"flex items-center space-x-3\">\n                <div className=\"w-10 h-10 bg-white/60 rounded-xl flex items-center justify-center\">\n                  {weather && !weatherLoading ? (\n                    <img \n                      src={weatherService.getWeatherIconUrl(weather.icon)} \n                      alt={weather.description}\n                      className=\"w-8 h-8\"\n                    />\n                  ) : (\n                    <Cloud className=\"w-6 h-6 text-blue-600\" />\n                  )}\n                </div>\n                <div>\n                  <div className=\"text-2xl font-bold text-blue-900\">\n                    {weatherLoading ? '--°C' : weather ? `${weather.temperature}°C` : '--°C'}\n                  </div>\n                  <div className=\"text-sm text-blue-700 capitalize\">\n                    {weatherLoading ? 'Loading...' : weather?.description || 'No data'}\n                  </div>\n                </div>\n              </div>\n              <div className=\"text-right space-y-1\">\n                <div className=\"flex items-center space-x-1\">\n                  <Thermometer className=\"w-3 h-3 text-yellow-600\" />\n                  <span className=\"text-xs text-blue-700\">\n                    {weatherLoading ? '--°/--°' : weather ? `${weather.feelsLike}°` : '--°'}\n                  </span>\n                </div>\n                <div className=\"flex items-center space-x-1\">\n                  <Droplets className=\"w-3 h-3 text-blue-600\" />\n                  <span className=\"text-xs text-blue-700\">\n                    {weatherLoading ? '--%' : weather ? `${weather.humidity}%` : '--%'}\n                  </span>\n                </div>\n              </div>\n            </div>\n\n            {/* Dynamic farming advice */}\n            {weather && !weatherLoading && (\n              <div className=\"bg-green-100 border border-green-200 rounded-lg p-2 mt-3 flex items-center space-x-2\">\n                <Leaf className=\"w-4 h-4 text-green-600 flex-shrink-0\" />\n                <span className=\"text-xs font-medium text-green-800\">\n                  {weatherService.generateFarmingAdvice(weather)}\n                </span>\n              </div>\n            )}\n          </CardContent>\n        </Card>\n\n\n        {/* AI Plant Diagnosis - Green Gradient Style */}\n        <Card className=\"bg-gradient-to-br from-green-400 to-green-500 border-0 shadow-lg rounded-2xl\">\n          <CardContent className=\"p-6\">\n            <div className=\"mb-4\">\n              <div className=\"bg-white/20 text-white text-xs font-medium px-3 py-1 rounded-full inline-block mb-4\">\n                AI Powered\n              </div>\n              <h3 className=\"font-bold text-white text-2xl mb-2\">Diagnose Plant Health</h3>\n              <p className=\"text-white/90 text-base\">Take a photo to check for diseases</p>\n            </div>\n            <Button \n              onClick={() => navigate('/diagnose')}\n              className=\"bg-white text-green-500 hover:bg-white/90 font-semibold rounded-xl px-6 py-3 flex items-center space-x-2\"\n            >\n              <Camera className=\"w-4 h-4\" />\n              <span>Start Diagnosis</span>\n            </Button>\n          </CardContent>\n        </Card>\n\n        {/* Soil & Fertilizer Cards */}\n        <div className=\"space-y-4\">\n          <h2 className=\"text-xl font-bold text-text-secondary\">🧪 Soil & Fertilizer</h2>\n          <div className=\"grid grid-cols-2 gap-4\">\n            <Card className=\"plant-card cursor-pointer\" onClick={() => navigate('/soil-health')}>\n              <CardContent className=\"p-4 text-center\">\n                <div className=\"w-12 h-12 bg-amber-50 rounded-xl flex items-center justify-center mb-3 mx-auto\">\n                  <TestTube className=\"w-6 h-6 text-amber-700\" />\n                </div>\n                <h3 className=\"font-semibold text-text-secondary text-sm mb-1\">Soil Health</h3>\n                <p className=\"text-agri-gray text-xs\">Check Soil Health →</p>\n              </CardContent>\n            </Card>\n            \n            <Card className=\"plant-card cursor-pointer\" onClick={() => navigate('/fertilizer-guide')}>\n              <CardContent className=\"p-4 text-center\">\n                <div className=\"w-12 h-12 bg-agri-light rounded-xl flex items-center justify-center mb-3 mx-auto\">\n                  <Beaker className=\"w-6 h-6 text-agri-primary\" />\n                </div>\n                <h3 className=\"font-semibold text-text-secondary text-sm mb-1\">Fertilizer Guide</h3>\n                <p className=\"text-agri-gray text-xs\">Get Fertilizer Advice →</p>\n              </CardContent>\n            </Card>\n          </div>\n        </div>\n\n        {/* Marketplace Section */}\n        <div className=\"space-y-4\">\n          <h2 className=\"text-xl font-bold text-text-secondary\">🛒 Marketplace</h2>\n          \n          {/* Market Prices Preview */}\n          <Card className=\"plant-card\">\n            <CardContent className=\"p-4\">\n              <div className=\"flex items-center justify-between mb-3\">\n                <h3 className=\"font-semibold text-text-secondary\">Today's Mandi Prices</h3>\n                <TrendingUp className=\"w-5 h-5 text-agri-success\" />\n              </div>\n              <div className=\"space-y-3 mb-4\">\n                {marketPrices.slice(0, 3).map((item, index) => (\n                  <div key={index} className=\"flex items-center justify-between p-3 bg-gray-50 rounded-xl\">\n                    <div className=\"flex-1\">\n                      <span className=\"font-medium text-text-secondary\">{item.crop}</span>\n                      <div className=\"text-xs text-gray-500 mt-1\">\n                        {item.trend === 'up' ? '↗ Trending up' : '↘ Trending down'}\n                      </div>\n                    </div>\n                    <div className=\"text-right\">\n                      <div className=\"font-bold text-text-secondary\">{item.price}</div>\n                      <div className={`text-xs font-medium flex items-center space-x-1 justify-end ${\n                        item.trend === 'up' \n                          ? 'text-agri-success' \n                          : 'text-agri-danger'\n                      }`}>\n                        {item.trend === 'up' ? (\n                          <TrendingUp className=\"w-3 h-3\" />\n                        ) : (\n                          <TrendingUp className=\"w-3 h-3 rotate-180\" />\n                        )}\n                        <span>{item.change}</span>\n                      </div>\n                    </div>\n                  </div>\n                ))}\n              </div>\n              \n              {/* Marketplace Action Buttons */}\n              <div className=\"grid grid-cols-2 gap-3\">\n                <Button \n                  variant=\"outline\" \n                  size=\"sm\" \n                  onClick={() => navigate('/market-prices')}\n                  className=\"flex items-center space-x-2 justify-center\"\n                >\n                  <BarChart3 className=\"w-4 h-4\" />\n                  <span>See All Prices</span>\n                </Button>\n                <Button \n                  size=\"sm\" \n                  onClick={() => navigate('/sell')}\n                  className=\"bg-agri-success hover:bg-agri-success/90 flex items-center space-x-2 justify-center\"\n                >\n                  <TrendingUp className=\"w-4 h-4\" />\n                  <span>Sell Crops</span>\n                </Button>\n              </div>\n            </CardContent>\n          </Card>\n          \n          {/* Additional Marketplace Cards */}\n          <div className=\"grid grid-cols-2 gap-4\">\n            <Card className=\"plant-card cursor-pointer\" onClick={() => navigate('/shop')}>\n              <CardContent className=\"p-4 text-center\">\n                <div className=\"w-12 h-12 bg-orange-50 rounded-xl flex items-center justify-center mb-3 mx-auto\">\n                  <ShoppingCart className=\"w-6 h-6 text-orange-600\" />\n                </div>\n                <h3 className=\"font-semibold text-text-secondary text-sm mb-1\">Order Fertilizers</h3>\n                <p className=\"text-agri-gray text-xs\">Shop nutrients</p>\n              </CardContent>\n            </Card>\n            \n            <Card className=\"plant-card cursor-pointer\" onClick={() => navigate('/shops')}>\n              <CardContent className=\"p-4 text-center\">\n                <div className=\"w-12 h-12 bg-agri-light-purple rounded-xl flex items-center justify-center mb-3 mx-auto\">\n                  <MapPin className=\"w-6 h-6 text-agri-purple\" />\n                </div>\n                <h3 className=\"font-semibold text-text-secondary text-sm mb-1\">Nearby Shops</h3>\n                <p className=\"text-agri-gray text-xs\">Find agri stores</p>\n              </CardContent>\n            </Card>\n          </div>\n        </div>\n\n        {/* My Farm Section - 4 Cards */}\n        <div className=\"space-y-4\">\n          <h2 className=\"text-xl font-bold text-text-secondary\">🌱 My Farm</h2>\n          \n          <div className=\"grid grid-cols-2 gap-4\">\n            <Card className=\"plant-card cursor-pointer\" onClick={() => navigate('/treatments')}>\n              <CardContent className=\"p-4 text-center relative\">\n                <div className=\"absolute -top-2 -right-2 z-10\">\n                  <div className=\"bg-agri-danger text-white text-xs font-bold px-2 py-1 rounded-full min-w-[20px] h-6 flex items-center justify-center\">\n                    2\n                  </div>\n                </div>\n                <div className=\"w-12 h-12 bg-red-50 rounded-xl flex items-center justify-center mb-3 mx-auto\">\n                  <Activity className=\"w-6 h-6 text-red-600\" />\n                </div>\n                <h3 className=\"font-semibold text-text-secondary text-sm mb-1\">Active Treatments</h3>\n                <p className=\"text-agri-gray text-xs\">Track ongoing sprays</p>\n              </CardContent>\n            </Card>\n            \n            <Card className=\"plant-card cursor-pointer\" onClick={() => navigate('/guides')}>\n              <CardContent className=\"p-4 text-center\">\n                <div className=\"w-12 h-12 bg-agri-light rounded-xl flex items-center justify-center mb-3 mx-auto\">\n                  <BookOpen className=\"w-6 h-6 text-agri-primary\" />\n                </div>\n                <h3 className=\"font-semibold text-text-secondary text-sm mb-1\">Cultivation Guides</h3>\n                <p className=\"text-agri-gray text-xs\">Seasonal practices</p>\n              </CardContent>\n            </Card>\n            \n            <Card className=\"plant-card cursor-pointer\" onClick={() => navigate('/orders')}>\n              <CardContent className=\"p-4 text-center\">\n                <div className=\"w-12 h-12 bg-agri-light-blue rounded-xl flex items-center justify-center mb-3 mx-auto\">\n                  <Package className=\"w-6 h-6 text-agri-info\" />\n                </div>\n                <h3 className=\"font-semibold text-text-secondary text-sm mb-1\">My Orders</h3>\n                <p className=\"text-agri-gray text-xs\">Track fertilizer purchases</p>\n              </CardContent>\n            </Card>\n            \n            <Card className=\"plant-card cursor-pointer\" onClick={() => navigate('/sell')}>\n              <CardContent className=\"p-4 text-center\">\n                <div className=\"w-12 h-12 bg-green-50 rounded-xl flex items-center justify-center mb-3 mx-auto\">\n                  <Package className=\"w-6 h-6 text-green-600\" />\n                </div>\n                <h3 className=\"font-semibold text-text-secondary text-sm mb-1\">My Listings</h3>\n                <p className=\"text-agri-gray text-xs\">Manage your crop listings</p>\n              </CardContent>\n            </Card>\n          </div>\n        </div>\n      </div>\n\n      {/* Bottom Navigation - 5 Tabs */}\n      <div className=\"mobile-bottom-nav\">\n        <div className=\"flex items-center justify-between px-2 py-3\">\n          <button className=\"flex flex-col items-center space-y-1 px-3 py-2 min-w-0\">\n            <HomeIcon className=\"w-6 h-6 text-agri-primary\" />\n            <span className=\"text-xs font-medium text-agri-primary\">Home</span>\n          </button>\n          \n          <button \n            onClick={() => navigate('/diagnose')}\n            className=\"flex flex-col items-center space-y-1 px-3 py-2 transition-all duration-200 hover:bg-agri-light rounded-lg min-w-0\"\n          >\n            <Camera className=\"w-6 h-6 text-agri-gray\" />\n            <span className=\"text-xs text-agri-gray\">Diagnose</span>\n          </button>\n          \n          <button \n            onClick={() => navigate('/advisory')}\n            className=\"flex flex-col items-center space-y-1 px-3 py-2 transition-all duration-200 hover:bg-agri-light rounded-lg min-w-0\"\n          >\n            <BookOpen className=\"w-6 h-6 text-agri-gray\" />\n            <span className=\"text-xs text-agri-gray\">Advisory</span>\n          </button>\n          \n          <button \n            onClick={() => navigate('/shop')}\n            className=\"flex flex-col items-center space-y-1 px-3 py-2 transition-all duration-200 hover:bg-agri-light rounded-lg min-w-0\"\n          >\n            <Store className=\"w-6 h-6 text-agri-gray\" />\n            <span className=\"text-xs text-agri-gray\">Shop</span>\n          </button>\n          \n          <button \n            onClick={() => navigate('/profile')}\n            className=\"flex flex-col items-center space-y-1 px-3 py-2 transition-all duration-200 hover:bg-agri-light rounded-lg min-w-0\"\n          >\n            <User className=\"w-6 h-6 text-agri-gray\" />\n            <span className=\"text-xs text-agri-gray\">Profile</span>\n          </button>\n        </div>\n      </div>\n\n      {/* Notification Panel */}\n      <NotificationPanel \n        isOpen={showNotifications} \n        onClose={() => setShowNotifications(false)} \n      />\n    </div>\n  );\n};\n\nexport default Home;\n","size_bytes":21078},"kisan/src/pages/Index.tsx":{"content":"// Update this page (the content is just a fallback if you fail to update the page)\n\nconst Index = () => {\n  return (\n    <div className=\"min-h-screen flex items-center justify-center bg-background\">\n      <div className=\"text-center\">\n        <h1 className=\"text-4xl font-bold mb-4\">Welcome to Your Blank App</h1>\n        <p className=\"text-xl text-muted-foreground\">Start building your amazing project here!</p>\n      </div>\n    </div>\n  );\n};\n\nexport default Index;\n","size_bytes":469},"kisan/src/pages/Landing.tsx":{"content":"import { useNavigate } from 'react-router-dom';\nimport { Sprout } from 'lucide-react';\nimport { Button } from '@/components/ui/button';\nimport LanguageSwitcher from '@/components/LanguageSwitcher';\nimport farmerHero from '@/assets/farmer-hero.jpg';\n\nconst Landing = () => {\n  const navigate = useNavigate();\n\n  return (\n    <div className=\"min-h-screen bg-gradient-to-br from-agri-light/30 via-background to-agri-primary/5 overflow-hidden\">\n      {/* Subtle Background Patterns */}\n      <div className=\"absolute inset-0 overflow-hidden\">\n        <div className=\"absolute top-0 right-0 w-72 h-72 bg-agri-primary/5 rounded-full blur-3xl\" />\n        <div className=\"absolute bottom-0 left-0 w-72 h-72 bg-agri-success/5 rounded-full blur-3xl\" />\n      </div>\n\n      <div className=\"relative z-10 min-h-screen flex flex-col max-w-md mx-auto\">\n        {/* Header */}\n        <header className=\"flex items-center justify-between p-6\">\n          {/* Logo and Tagline */}\n          <div className=\"flex items-center space-x-3\">\n            <div className=\"w-12 h-12 bg-gradient-to-br from-agri-primary to-agri-success rounded-2xl flex items-center justify-center shadow-medium\">\n              <Sprout className=\"w-7 h-7 text-white\" />\n            </div>\n            <div>\n              <h1 className=\"text-xl font-bold bg-gradient-to-r from-agri-primary to-agri-success bg-clip-text text-transparent\">\n                KisanMitra\n              </h1>\n              <p className=\"text-xs text-muted-foreground font-medium\">\n                Your Smart Farming Assistant\n              </p>\n            </div>\n          </div>\n\n          {/* Language Switcher */}\n          <LanguageSwitcher />\n        </header>\n\n        {/* Main Content */}\n        <main className=\"flex-1 flex flex-col items-center justify-center px-6 space-y-8\">\n          {/* Hero Image */}\n          <div className=\"relative\">\n            <div className=\"w-64 h-64 rounded-full overflow-hidden shadow-large border-4 border-white/80\">\n              <img \n                src={farmerHero} \n                alt=\"Happy farmer with crops\" \n                className=\"w-full h-full object-cover\"\n              />\n            </div>\n            {/* Floating Elements */}\n            <div className=\"absolute -top-2 -right-2 w-8 h-8 bg-agri-success rounded-full shadow-medium animate-bounce\" style={{ animationDelay: '0.5s' }} />\n            <div className=\"absolute -bottom-2 -left-2 w-6 h-6 bg-agri-primary rounded-full shadow-medium animate-bounce\" style={{ animationDelay: '1s' }} />\n          </div>\n\n          {/* Tagline */}\n          <div className=\"text-center space-y-2\">\n            <h2 className=\"text-2xl font-bold text-foreground\">\n              Your Pocket Agriculture Expert\n            </h2>\n            <p className=\"text-muted-foreground text-sm max-w-xs mx-auto leading-relaxed\">\n              Get instant crop advice, disease diagnosis, and weather alerts in your local language\n            </p>\n          </div>\n\n          {/* CTA Buttons */}\n          <div className=\"w-full space-y-4 pt-4\">\n            <div className=\"flex space-x-4\">\n              <Button\n                onClick={() => navigate('/login')}\n                variant=\"outline\"\n                className=\"flex-1 h-14 font-semibold text-lg border-2 border-agri-primary text-agri-primary hover:bg-agri-primary hover:text-white transition-all duration-300 transform active:scale-95 shadow-soft hover:shadow-medium\"\n              >\n                Login\n              </Button>\n              <Button\n                onClick={() => navigate('/signup')}\n                className=\"flex-1 h-14 bg-gradient-to-r from-agri-primary to-agri-success hover:from-agri-primary/90 hover:to-agri-success/90 text-white font-semibold text-lg shadow-medium hover:shadow-large transition-all duration-300 transform active:scale-95\"\n              >\n                Sign Up\n              </Button>\n            </div>\n            \n            <p className=\"text-center text-xs text-muted-foreground\">\n              Free to use • Available in 5+ languages\n            </p>\n          </div>\n        </main>\n\n        {/* Footer */}\n        <footer className=\"p-6 text-center\">\n          <div className=\"flex items-center justify-center space-x-4 text-xs text-muted-foreground\">\n            <span className=\"flex items-center space-x-1\">\n              <div className=\"w-2 h-2 bg-agri-success rounded-full animate-pulse\" />\n              <span>Trusted by 15K+ farmers</span>\n            </span>\n            <span>•</span>\n            <span className=\"flex items-center space-x-1\">\n              <div className=\"w-2 h-2 bg-agri-primary rounded-full animate-pulse\" />\n              <span>AI-powered insights</span>\n            </span>\n          </div>\n        </footer>\n      </div>\n    </div>\n  );\n};\n\nexport default Landing;","size_bytes":4839},"kisan/src/pages/Login.tsx":{"content":"import { useState } from 'react';\nimport { useNavigate } from 'react-router-dom';\nimport { Eye, EyeOff, Phone, Lock, Sprout, User } from 'lucide-react';\nimport { Button } from '@/components/ui/button';\nimport { Input } from '@/components/ui/input';\nimport LanguageSwitcher from '@/components/LanguageSwitcher';\nimport { useToast } from '@/hooks/use-toast';\n\nconst Login = () => {\n  const navigate = useNavigate();\n  const { toast } = useToast();\n  const [loading, setLoading] = useState(false);\n  const [showPin, setShowPin] = useState(false);\n  const [formData, setFormData] = useState({\n    mobile: '',\n    pin: ''\n  });\n\n  const handleMobileChange = (e: React.ChangeEvent<HTMLInputElement>) => {\n    const cleaned = e.target.value.replace(/\\D/g, '').slice(0, 10);\n    setFormData(prev => ({ ...prev, mobile: cleaned }));\n  };\n\n  const handleSubmit = async (e: React.FormEvent) => {\n    e.preventDefault();\n    \n    if (!formData.mobile || !formData.pin) {\n      toast({\n        title: \"Missing Information\",\n        description: \"Please enter mobile number and PIN\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    if (formData.mobile.length !== 10) {\n      toast({\n        title: \"Invalid Mobile Number\",\n        description: \"Please enter 10 digit mobile number\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    if (formData.pin.length !== 4) {\n      toast({\n        title: \"Invalid PIN\",\n        description: \"PIN must be 4 digits\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    setLoading(true);\n    \n    // Simulate API call\n    setTimeout(() => {\n      // Store user data and navigate\n      localStorage.setItem('kisanmitra_user', JSON.stringify({\n        mobile: formData.mobile,\n        name: 'Farmer'\n      }));\n      \n      toast({\n        title: `Welcome back! 🌾`,\n        description: \"Successfully logged in\",\n      });\n      navigate('/home');\n      setLoading(false);\n    }, 1500);\n  };\n\n  return (\n    <div className=\"mobile-container min-h-screen bg-gradient-to-br from-agri-light to-white\">\n      {/* Subtle Background Pattern */}\n      <div className=\"absolute inset-0 opacity-5\">\n        <div className=\"absolute inset-0\" style={{\n          backgroundImage: `url(\"data:image/svg+xml,%3Csvg width='40' height='40' viewBox='0 0 40 40' xmlns='http://www.w3.org/2000/svg'%3E%3Cg fill='%23059669' fill-opacity='0.1'%3E%3Cpath d='M20 20c0-5.5-4.5-10-10-10s-10 4.5-10 10 4.5 10 10 10 10-4.5 10-10zm10 0c0-5.5-4.5-10-10-10s-10 4.5-10 10 4.5 10 10 10 10-4.5 10-10z'/%3E%3C/g%3E%3C/svg%3E\")`,\n        }} />\n      </div>\n\n      <div className=\"relative z-10 min-h-screen flex flex-col\">\n        {/* Top Bar */}\n        <div className=\"flex items-center justify-between p-4 bg-white/80 backdrop-blur-sm\">\n          <div className=\"flex items-center space-x-3\">\n            <div className=\"w-10 h-10 bg-agri-primary rounded-xl flex items-center justify-center\">\n              <Sprout className=\"w-6 h-6 text-white\" />\n            </div>\n            <div>\n              <h1 className=\"text-lg font-bold text-agri-primary\">KisanMitra</h1>\n              <p className=\"text-xs text-agri-gray\">Smart Farming Assistant</p>\n            </div>\n          </div>\n          <LanguageSwitcher />\n        </div>\n\n        {/* Header */}\n        <div className=\"text-center px-6 pt-8 pb-6\">\n          <div className=\"w-20 h-20 bg-agri-primary rounded-3xl mx-auto mb-6 flex items-center justify-center shadow-lg\">\n            <User className=\"w-10 h-10 text-white\" />\n          </div>\n          <h1 className=\"text-3xl font-bold text-agri-primary mb-2\">\n            🙏 Welcome Back, Farmer\n          </h1>\n          <p className=\"text-lg text-agri-gray\">\n            Continue your farming journey\n          </p>\n        </div>\n\n        {/* Form Container */}\n        <div className=\"flex-1 px-6\">\n          <div className=\"bg-white rounded-3xl p-6 shadow-large border border-agri-primary/10\">\n            <form onSubmit={handleSubmit} className=\"space-y-6\">\n              {/* Mobile Number */}\n              <div className=\"space-y-3\">\n                <label className=\"text-lg font-bold text-agri-primary flex items-center\">\n                  <Phone className=\"w-6 h-6 mr-3 text-agri-primary\" />\n                  Mobile Number\n                </label>\n                <div className=\"relative\">\n                  <div className=\"absolute left-4 top-1/2 transform -translate-y-1/2 flex items-center bg-agri-light rounded-lg px-3 py-2\">\n                    <span className=\"text-agri-primary font-bold text-lg\">🇮🇳 +91</span>\n                  </div>\n                  <Input\n                    type=\"tel\"\n                    placeholder=\"Enter 10 digit mobile\"\n                    value={formData.mobile}\n                    onChange={handleMobileChange}\n                    maxLength={10}\n                    className=\"pl-24 pr-4 h-20 border-2 border-agri-primary/30 focus:border-agri-primary rounded-2xl text-2xl font-bold text-center tracking-wider bg-agri-light/30\"\n                  />\n                </div>\n              </div>\n\n              {/* PIN Entry */}\n              <div className=\"space-y-3\">\n                <label className=\"text-lg font-bold text-agri-primary flex items-center\">\n                  <Lock className=\"w-6 h-6 mr-3 text-agri-primary\" />\n                  4-Digit PIN\n                </label>\n                <div className=\"relative\">\n                  <Input\n                    type={showPin ? \"text\" : \"password\"}\n                    placeholder=\"Enter PIN\"\n                    value={formData.pin}\n                    onChange={(e) => setFormData(prev => ({ \n                      ...prev, \n                      pin: e.target.value.replace(/\\D/g, '').slice(0, 4) \n                    }))}\n                    maxLength={4}\n                    className=\"pl-4 pr-20 h-20 border-2 border-agri-primary/30 focus:border-agri-primary rounded-2xl text-center text-3xl font-bold tracking-[0.8em] bg-agri-light/30\"\n                  />\n                  <button\n                    type=\"button\"\n                    onClick={() => setShowPin(!showPin)}\n                    className=\"absolute right-4 top-1/2 transform -translate-y-1/2 p-3 rounded-xl hover:bg-agri-light transition-colors\"\n                  >\n                    {showPin ? (\n                      <EyeOff className=\"w-8 h-8 text-agri-primary\" />\n                    ) : (\n                      <Eye className=\"w-8 h-8 text-agri-primary\" />\n                    )}\n                  </button>\n                </div>\n\n                {/* PIN dots indicator */}\n                <div className=\"flex justify-center space-x-4 mt-4\">\n                  {[...Array(4)].map((_, i) => (\n                    <div\n                      key={i}\n                      className={`w-4 h-4 rounded-full transition-all duration-300 ${\n                        i < formData.pin.length \n                          ? 'bg-agri-primary scale-125' \n                          : 'bg-agri-light'\n                      }`}\n                    />\n                  ))}\n                </div>\n              </div>\n\n              {/* Submit Button */}\n              <Button\n                type=\"submit\"\n                disabled={loading || !formData.mobile || !formData.pin}\n                className=\"w-full h-20 bg-agri-primary hover:bg-agri-secondary text-white font-bold text-2xl rounded-2xl shadow-large disabled:opacity-50 disabled:cursor-not-allowed\"\n              >\n                {loading ? (\n                  <div className=\"flex items-center space-x-3\">\n                    <div className=\"w-8 h-8 border-4 border-white border-t-transparent rounded-full animate-spin\" />\n                    <span>Logging in...</span>\n                  </div>\n                ) : (\n                  <div className=\"flex items-center space-x-3\">\n                    <Sprout className=\"w-8 h-8\" />\n                    <span>Login to KisanMitra</span>\n                  </div>\n                )}\n              </Button>\n\n              {/* Signup Link */}\n              <div className=\"text-center pt-4\">\n                <button\n                  type=\"button\"\n                  onClick={() => navigate('/signup')}\n                  className=\"text-agri-primary font-bold text-xl hover:text-agri-secondary transition-colors\"\n                >\n                  New to KisanMitra? Create Account →\n                </button>\n              </div>\n            </form>\n          </div>\n        </div>\n\n        {/* Bottom Spacing */}\n        <div className=\"h-6\" />\n      </div>\n    </div>\n  );\n};\n\nexport default Login;","size_bytes":8640},"kisan/src/pages/MarketPrices.tsx":{"content":"import { useState, useEffect } from 'react';\nimport { useNavigate } from 'react-router-dom';\nimport { \n  Search, \n  Filter, \n  TrendingUp, \n  TrendingDown, \n  Bell, \n  ArrowLeft,\n  MapPin,\n  Clock,\n  RefreshCw,\n  Plus\n} from 'lucide-react';\nimport { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';\nimport { Button } from '@/components/ui/button';\nimport { Input } from '@/components/ui/input';\n\nconst MarketPrices = () => {\n  const navigate = useNavigate();\n  const [searchQuery, setSearchQuery] = useState('');\n  const [selectedFilter, setSelectedFilter] = useState('all');\n  const [lastUpdated, setLastUpdated] = useState(new Date());\n  const [isRefreshing, setIsRefreshing] = useState(false);\n\n  // Mock market data - in real app this would come from API\n  const marketData = [\n    {\n      id: 1,\n      name: 'Azadpur Mandi',\n      location: 'Delhi',\n      distance: '12 km',\n      crops: [\n        { name: 'Tomato', price: '₹16/kg', change: '+8%', trend: 'up', previousPrice: '₹14.80/kg' },\n        { name: 'Onion', price: '₹25/kg', change: '+12%', trend: 'up', previousPrice: '₹22.30/kg' },\n        { name: 'Potato', price: '₹18/kg', change: '-5%', trend: 'down', previousPrice: '₹19/kg' },\n        { name: 'Carrot', price: '₹22/kg', change: '+3%', trend: 'up', previousPrice: '₹21.30/kg' },\n        { name: 'Cabbage', price: '₹12/kg', change: '0%', trend: 'stable', previousPrice: '₹12/kg' }\n      ]\n    },\n    {\n      id: 2,\n      name: 'Ghazipur Mandi',\n      location: 'Delhi',\n      distance: '18 km',\n      crops: [\n        { name: 'Wheat', price: '₹2,150/qtl', change: '+2%', trend: 'up', previousPrice: '₹2,105/qtl' },\n        { name: 'Paddy', price: '₹1,850/qtl', change: '-3%', trend: 'down', previousPrice: '₹1,907/qtl' },\n        { name: 'Mustard', price: '₹4,200/qtl', change: '+5%', trend: 'up', previousPrice: '₹4,000/qtl' },\n        { name: 'Gram', price: '₹3,800/qtl', change: '+1%', trend: 'up', previousPrice: '₹3,762/qtl' }\n      ]\n    },\n    {\n      id: 3,\n      name: 'Najafgarh Mandi',\n      location: 'Delhi',\n      distance: '25 km',\n      crops: [\n        { name: 'Cauliflower', price: '₹15/kg', change: '+10%', trend: 'up', previousPrice: '₹13.60/kg' },\n        { name: 'Peas', price: '₹35/kg', change: '-8%', trend: 'down', previousPrice: '₹38/kg' },\n        { name: 'Spinach', price: '₹20/kg', change: '+15%', trend: 'up', previousPrice: '₹17.40/kg' },\n        { name: 'Radish', price: '₹8/kg', change: '+6%', trend: 'up', previousPrice: '₹7.55/kg' }\n      ]\n    },\n    {\n      id: 4,\n      name: 'Okhla Mandi',\n      location: 'Delhi',\n      distance: '22 km',\n      crops: [\n        { name: 'Brinjal', price: '₹24/kg', change: '+7%', trend: 'up', previousPrice: '₹22.40/kg' },\n        { name: 'Okra', price: '₹28/kg', change: '-4%', trend: 'down', previousPrice: '₹29.20/kg' },\n        { name: 'Bottle Gourd', price: '₹18/kg', change: '+2%', trend: 'up', previousPrice: '₹17.65/kg' },\n        { name: 'Bitter Gourd', price: '₹32/kg', change: '+9%', trend: 'up', previousPrice: '₹29.35/kg' }\n      ]\n    }\n  ];\n\n  const filteredMarkets = marketData.filter(market => \n    market.name.toLowerCase().includes(searchQuery.toLowerCase()) ||\n    market.crops.some(crop => crop.name.toLowerCase().includes(searchQuery.toLowerCase()))\n  );\n\n  const handleRefresh = async () => {\n    setIsRefreshing(true);\n    // Simulate API call\n    await new Promise(resolve => setTimeout(resolve, 1500));\n    setLastUpdated(new Date());\n    setIsRefreshing(false);\n  };\n\n  const getTrendIcon = (trend: string) => {\n    switch (trend) {\n      case 'up':\n        return <TrendingUp className=\"w-4 h-4 text-green-600\" />;\n      case 'down':\n        return <TrendingDown className=\"w-4 h-4 text-red-600\" />;\n      default:\n        return <div className=\"w-4 h-4 rounded-full bg-gray-400\" />;\n    }\n  };\n\n  const getTrendColor = (trend: string) => {\n    switch (trend) {\n      case 'up':\n        return 'text-green-600';\n      case 'down':\n        return 'text-red-600';\n      default:\n        return 'text-gray-600';\n    }\n  };\n\n  return (\n    <div className=\"min-h-screen bg-gradient-to-br from-green-50 to-blue-50\">\n      {/* Header */}\n      <div className=\"bg-white shadow-sm border-b border-green-100 sticky top-0 z-20\">\n        <div className=\"px-6 py-4\">\n          <div className=\"flex items-center space-x-4 mb-4\">\n            <Button\n              variant=\"ghost\"\n              size=\"sm\"\n              onClick={() => navigate(-1)}\n              className=\"p-2 hover:bg-gray-100 rounded-full\"\n            >\n              <ArrowLeft className=\"w-5 h-5 text-gray-600\" />\n            </Button>\n            <div className=\"flex-1\">\n              <h1 className=\"text-2xl font-bold text-gray-900\">Market Prices</h1>\n              <div className=\"flex items-center space-x-2 text-sm text-gray-600\">\n                <Clock className=\"w-4 h-4\" />\n                <span>Last updated: {lastUpdated.toLocaleTimeString()}</span>\n                <Button\n                  variant=\"ghost\"\n                  size=\"sm\"\n                  onClick={handleRefresh}\n                  disabled={isRefreshing}\n                  className=\"p-1 hover:bg-gray-100 rounded-full\"\n                >\n                  <RefreshCw className={`w-4 h-4 text-green-600 ${isRefreshing ? 'animate-spin' : ''}`} />\n                </Button>\n              </div>\n            </div>\n          </div>\n\n          {/* Search and Filter */}\n          <div className=\"flex items-center space-x-3\">\n            <div className=\"flex-1 relative\">\n              <Search className=\"w-5 h-5 text-gray-400 absolute left-3 top-1/2 transform -translate-y-1/2\" />\n              <Input\n                placeholder=\"Search crops or markets...\"\n                value={searchQuery}\n                onChange={(e) => setSearchQuery(e.target.value)}\n                className=\"pl-10 pr-4 py-3 rounded-xl border-2 border-gray-200 focus:border-green-500 bg-white\"\n              />\n            </div>\n            <Button\n              variant=\"outline\"\n              size=\"sm\"\n              className=\"px-4 py-3 rounded-xl border-2 border-gray-200 hover:border-green-500\"\n            >\n              <Filter className=\"w-4 h-4 text-gray-600\" />\n            </Button>\n          </div>\n        </div>\n      </div>\n\n      {/* Content */}\n      <div className=\"px-6 py-6 space-y-6\">\n        {/* Market Cards */}\n        {filteredMarkets.map((market) => (\n          <Card key={market.id} className=\"bg-white rounded-3xl shadow-lg border border-gray-100 overflow-hidden\">\n            {/* Market Header */}\n            <CardHeader className=\"bg-gradient-to-r from-green-50 to-blue-50 border-b border-gray-200 p-5\">\n              <div className=\"flex items-center justify-between\">\n                <div className=\"flex items-center space-x-4\">\n                  <div className=\"p-3 bg-white rounded-xl shadow-sm\">\n                    <MapPin className=\"w-6 h-6 text-green-600\" />\n                  </div>\n                  <div>\n                    <CardTitle className=\"text-lg font-bold text-gray-900\">{market.name}</CardTitle>\n                    <div className=\"flex items-center space-x-2 text-sm text-gray-600\">\n                      <span>{market.location}</span>\n                      <span>•</span>\n                      <span className=\"bg-blue-100 text-blue-700 px-2 py-1 rounded-full text-xs font-medium\">\n                        {market.distance}\n                      </span>\n                    </div>\n                  </div>\n                </div>\n              </div>\n            </CardHeader>\n\n            {/* Crops List */}\n            <CardContent className=\"p-0\">\n              <div className=\"space-y-0\">\n                {market.crops.map((crop, index) => (\n                  <div key={index} className=\"flex items-center justify-between p-5 border-b border-gray-100 last:border-b-0 hover:bg-gray-50 transition-colors\">\n                    <div className=\"flex-1\">\n                      <h4 className=\"font-semibold text-gray-900 text-base\">{crop.name}</h4>\n                      <p className=\"text-sm text-gray-500\">Previous: {crop.previousPrice}</p>\n                    </div>\n                    <div className=\"flex items-center space-x-4\">\n                      <div className=\"text-right\">\n                        <div className=\"font-bold text-lg text-gray-900\">{crop.price}</div>\n                        <div className={`text-sm font-medium flex items-center space-x-1 ${getTrendColor(crop.trend)}`}>\n                          {getTrendIcon(crop.trend)}\n                          <span>{crop.change}</span>\n                        </div>\n                      </div>\n                    </div>\n                  </div>\n                ))}\n              </div>\n            </CardContent>\n          </Card>\n        ))}\n\n        {/* No Results */}\n        {filteredMarkets.length === 0 && (\n          <div className=\"text-center py-12\">\n            <div className=\"p-4 bg-gray-100 rounded-full inline-block mb-4\">\n              <Search className=\"w-8 h-8 text-gray-400\" />\n            </div>\n            <h3 className=\"text-lg font-medium text-gray-600 mb-2\">No markets found</h3>\n            <p className=\"text-gray-500\">Try adjusting your search terms</p>\n          </div>\n        )}\n      </div>\n\n      {/* Floating Action Button - Price Alerts */}\n      <div className=\"fixed bottom-6 right-6 z-10\">\n        <Button\n          onClick={() => {\n            // TODO: Implement price alerts functionality\n            alert('Price alerts feature coming soon!');\n          }}\n          className=\"w-14 h-14 rounded-full bg-gradient-to-r from-green-500 to-green-600 hover:from-green-600 hover:to-green-700 shadow-lg hover:shadow-xl transition-all duration-200\"\n        >\n          <Bell className=\"w-6 h-6 text-white\" />\n        </Button>\n      </div>\n\n      {/* Pull to refresh hint (for mobile) */}\n      <div className=\"pb-20\"> {/* Extra padding for mobile navigation */}\n        <div className=\"text-center py-4 text-gray-500 text-sm\">\n          Pull down to refresh prices\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default MarketPrices;","size_bytes":10217},"kisan/src/pages/NearbyShops.tsx":{"content":"import { useState } from 'react';\nimport { useNavigate } from 'react-router-dom';\nimport { \n  ArrowLeft, \n  MapPin, \n  Phone, \n  Clock, \n  Star,\n  Navigation,\n  Filter,\n  Search,\n  Store,\n  Truck,\n  ShoppingCart,\n  Heart,\n  MoreVertical,\n  CheckCircle,\n  Route\n} from 'lucide-react';\nimport { Button } from '@/components/ui/button';\nimport { Input } from '@/components/ui/input';\nimport { Badge } from '@/components/ui/badge';\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from '@/components/ui/tabs';\n\nconst NearbyShops = () => {\n  const navigate = useNavigate();\n  const [searchQuery, setSearchQuery] = useState('');\n  const [selectedFilter, setSelectedFilter] = useState('all');\n  const [viewMode, setViewMode] = useState('list'); // list or map\n\n  const shopCategories = [\n    { id: 'all', name: 'All Shops', count: 12 },\n    { id: 'fertilizers', name: 'Fertilizers', count: 8 },\n    { id: 'seeds', name: 'Seeds', count: 6 },\n    { id: 'tools', name: 'Tools', count: 4 },\n    { id: 'pesticides', name: 'Pesticides', count: 7 }\n  ];\n\n  const shops = [\n    {\n      id: '1',\n      name: 'Kisan Agro Center',\n      address: 'Main Market, Hardoi, UP',\n      distance: 1.2,\n      rating: 4.5,\n      reviews: 234,\n      phone: '+91 98765 43210',\n      isOpen: true,\n      openTime: '6:00 AM',\n      closeTime: '8:00 PM',\n      categories: ['fertilizers', 'seeds', 'tools'],\n      speciality: 'Organic Fertilizers',\n      verified: true,\n      delivery: true,\n      products: [\n        { name: 'NPK Fertilizer', price: 245, inStock: true },\n        { name: 'Tomato Seeds', price: 120, inStock: true },\n        { name: 'Garden Spade', price: 350, inStock: false }\n      ],\n      offers: ['Free delivery above ₹500', '10% off on fertilizers'],\n      image: '/placeholder.svg'\n    },\n    {\n      id: '2',\n      name: 'FarmGrow Supplies',\n      address: 'Bilram Road, Hardoi, UP',\n      distance: 2.8,\n      rating: 4.3,\n      reviews: 189,\n      phone: '+91 87654 32109',\n      isOpen: true,\n      openTime: '7:00 AM',\n      closeTime: '7:00 PM',\n      categories: ['pesticides', 'fertilizers'],\n      speciality: 'Pest Control Solutions',\n      verified: true,\n      delivery: false,\n      products: [\n        { name: 'Copper Fungicide', price: 180, inStock: true },\n        { name: 'Neem Oil', price: 95, inStock: true }\n      ],\n      offers: ['Buy 2 Get 1 Free on pesticides'],\n      image: '/placeholder.svg'\n    },\n    {\n      id: '3',\n      name: 'Green Valley Seeds',\n      address: 'Civil Lines, Hardoi, UP',\n      distance: 3.5,\n      rating: 4.7,\n      reviews: 156,\n      phone: '+91 76543 21098',\n      isOpen: false,\n      openTime: '8:00 AM',\n      closeTime: '6:00 PM',\n      categories: ['seeds'],\n      speciality: 'Hybrid & Organic Seeds',\n      verified: false,\n      delivery: true,\n      products: [\n        { name: 'Wheat Seeds', price: 45, inStock: true },\n        { name: 'Corn Seeds', price: 80, inStock: true }\n      ],\n      offers: ['Premium seed varieties'],\n      image: '/placeholder.svg'\n    },\n    {\n      id: '4',\n      name: 'Krishi Tools Mart',\n      address: 'Shahabad Road, Hardoi, UP',\n      distance: 4.1,\n      rating: 4.2,\n      reviews: 98,\n      phone: '+91 65432 10987',\n      isOpen: true,\n      openTime: '9:00 AM',\n      closeTime: '8:00 PM',\n      categories: ['tools'],\n      speciality: 'Agricultural Equipment',\n      verified: true,\n      delivery: false,\n      products: [\n        { name: 'Tractor Parts', price: 1200, inStock: true },\n        { name: 'Hand Tools Set', price: 450, inStock: true }\n      ],\n      offers: ['Extended warranty on tools'],\n      image: '/placeholder.svg'\n    }\n  ];\n\n  const filteredShops = shops.filter(shop => {\n    const matchesSearch = shop.name.toLowerCase().includes(searchQuery.toLowerCase()) ||\n                         shop.speciality.toLowerCase().includes(searchQuery.toLowerCase());\n    const matchesFilter = selectedFilter === 'all' || shop.categories.includes(selectedFilter);\n    return matchesSearch && matchesFilter;\n  });\n\n  const handleCall = (phone: string) => {\n    window.location.href = `tel:${phone}`;\n  };\n\n  const handleGetDirections = (shopId: string) => {\n    // In a real app, this would open maps with directions\n    const shop = shops.find(s => s.id === shopId);\n    alert(`Getting directions to ${shop?.name}`);\n  };\n\n  return (\n    <div className=\"mobile-container bg-agri-light-gray\">\n      {/* Header */}\n      <div className=\"mobile-header\">\n        <div className=\"flex items-center space-x-3\">\n          <button onClick={() => navigate('/home')}>\n            <ArrowLeft className=\"w-6 h-6 text-agri-gray\" />\n          </button>\n          <h1 className=\"text-xl font-bold text-text-secondary\">Nearby Shops</h1>\n        </div>\n        \n        <div className=\"flex items-center space-x-3\">\n          <button>\n            <Filter className=\"w-6 h-6 text-agri-gray\" />\n          </button>\n          <button onClick={() => setViewMode(viewMode === 'list' ? 'map' : 'list')}>\n            <Navigation className=\"w-6 h-6 text-agri-gray\" />\n          </button>\n        </div>\n      </div>\n\n      {/* Content */}\n      <div className=\"mobile-content space-y-6 pt-4\">\n        {/* Search Bar */}\n        <div className=\"relative\">\n          <Search className=\"absolute left-3 top-1/2 transform -translate-y-1/2 w-5 h-5 text-agri-gray\" />\n          <Input\n            placeholder=\"Search shops, products, speciality...\"\n            value={searchQuery}\n            onChange={(e) => setSearchQuery(e.target.value)}\n            className=\"pl-10 py-3 text-base bg-white border-agri-light-gray rounded-xl\"\n          />\n        </div>\n\n        {/* Location Banner */}\n        <div className=\"bg-agri-primary rounded-2xl p-4 text-white\">\n          <div className=\"flex items-center space-x-3\">\n            <MapPin className=\"w-6 h-6\" />\n            <div>\n              <h3 className=\"font-semibold\">Current Location</h3>\n              <p className=\"text-white/90 text-sm\">Village Rampur, Dist. Hardoi, UP</p>\n            </div>\n          </div>\n          <Button \n            variant=\"outline\" \n            size=\"sm\" \n            className=\"mt-3 bg-white/20 border-white/30 text-white hover:bg-white/30\"\n          >\n            <Navigation className=\"w-4 h-4 mr-2\" />\n            Change Location\n          </Button>\n        </div>\n\n        {/* Categories Filter */}\n        <div className=\"flex space-x-3 overflow-x-auto pb-2\">\n          {shopCategories.map((category) => (\n            <button\n              key={category.id}\n              onClick={() => setSelectedFilter(category.id)}\n              className={`flex items-center space-x-2 px-4 py-2 rounded-xl whitespace-nowrap transition-all ${\n                selectedFilter === category.id\n                  ? 'bg-agri-primary text-white'\n                  : 'bg-white text-agri-gray border border-agri-light-gray'\n              }`}\n            >\n              <span className=\"text-sm font-medium\">{category.name}</span>\n              <Badge variant=\"outline\" className=\"ml-1 text-xs bg-white/20 border-white/30\">\n                {category.count}\n              </Badge>\n            </button>\n          ))}\n        </div>\n\n        {/* Quick Stats */}\n        <div className=\"grid grid-cols-3 gap-4\">\n          <div className=\"bg-white rounded-xl p-4 text-center shadow-soft\">\n            <Store className=\"w-8 h-8 text-agri-primary mx-auto mb-2\" />\n            <p className=\"text-lg font-bold text-text-secondary\">{filteredShops.length}</p>\n            <p className=\"text-xs text-agri-gray\">Shops Found</p>\n          </div>\n          \n          <div className=\"bg-white rounded-xl p-4 text-center shadow-soft\">\n            <Truck className=\"w-8 h-8 text-agri-info mx-auto mb-2\" />\n            <p className=\"text-lg font-bold text-text-secondary\">\n              {filteredShops.filter(s => s.delivery).length}\n            </p>\n            <p className=\"text-xs text-agri-gray\">With Delivery</p>\n          </div>\n          \n          <div className=\"bg-white rounded-xl p-4 text-center shadow-soft\">\n            <Clock className=\"w-8 h-8 text-agri-success mx-auto mb-2\" />\n            <p className=\"text-lg font-bold text-text-secondary\">\n              {filteredShops.filter(s => s.isOpen).length}\n            </p>\n            <p className=\"text-xs text-agri-gray\">Open Now</p>\n          </div>\n        </div>\n\n        {/* Shops List */}\n        <div className=\"space-y-4\">\n          <div className=\"flex items-center justify-between\">\n            <h2 className=\"text-lg font-bold text-text-secondary\">\n              {selectedFilter === 'all' ? 'All Shops' : shopCategories.find(c => c.id === selectedFilter)?.name}\n            </h2>\n            <span className=\"text-sm text-agri-gray\">{filteredShops.length} shops</span>\n          </div>\n\n          {filteredShops.length > 0 ? (\n            filteredShops.map((shop) => (\n              <div key={shop.id} className=\"bg-white rounded-2xl p-6 shadow-soft border border-agri-light-gray\">\n                {/* Shop Header */}\n                <div className=\"flex items-start justify-between mb-4\">\n                  <div className=\"flex items-start space-x-3\">\n                    <div className=\"w-12 h-12 bg-agri-light rounded-xl flex items-center justify-center\">\n                      <Store className=\"w-6 h-6 text-agri-primary\" />\n                    </div>\n                    <div className=\"flex-1\">\n                      <div className=\"flex items-center space-x-2 mb-1\">\n                        <h3 className=\"font-semibold text-text-secondary\">{shop.name}</h3>\n                        {shop.verified && (\n                          <CheckCircle className=\"w-4 h-4 text-agri-success\" />\n                        )}\n                      </div>\n                      <p className=\"text-sm text-agri-gray mb-1\">{shop.speciality}</p>\n                      <div className=\"flex items-center space-x-2\">\n                        <div className=\"flex items-center space-x-1\">\n                          <Star className=\"w-3 h-3 fill-yellow-400 text-yellow-400\" />\n                          <span className=\"text-sm font-medium\">{shop.rating}</span>\n                        </div>\n                        <span className=\"text-sm text-agri-gray\">({shop.reviews})</span>\n                        <span className=\"text-sm text-agri-gray\">•</span>\n                        <span className=\"text-sm font-medium text-agri-primary\">{shop.distance} km</span>\n                      </div>\n                    </div>\n                  </div>\n                  \n                  <div className=\"flex items-center space-x-2\">\n                    <Badge className={shop.isOpen ? 'bg-agri-success text-white' : 'bg-agri-danger text-white'}>\n                      {shop.isOpen ? 'Open' : 'Closed'}\n                    </Badge>\n                    <button>\n                      <MoreVertical className=\"w-5 h-5 text-agri-gray\" />\n                    </button>\n                  </div>\n                </div>\n\n                {/* Address & Timing */}\n                <div className=\"bg-agri-light rounded-xl p-4 mb-4\">\n                  <div className=\"flex items-start space-x-3\">\n                    <MapPin className=\"w-5 h-5 text-agri-primary mt-0.5\" />\n                    <div className=\"flex-1\">\n                      <p className=\"font-medium text-text-secondary text-sm\">{shop.address}</p>\n                      <div className=\"flex items-center space-x-4 mt-2 text-sm text-agri-gray\">\n                        <div className=\"flex items-center space-x-1\">\n                          <Clock className=\"w-4 h-4\" />\n                          <span>{shop.openTime} - {shop.closeTime}</span>\n                        </div>\n                        {shop.delivery && (\n                          <div className=\"flex items-center space-x-1\">\n                            <Truck className=\"w-4 h-4\" />\n                            <span>Delivery</span>\n                          </div>\n                        )}\n                      </div>\n                    </div>\n                  </div>\n                </div>\n\n                {/* Featured Products */}\n                <div className=\"mb-4\">\n                  <h4 className=\"font-medium text-text-secondary mb-3\">Available Products</h4>\n                  <div className=\"space-y-2\">\n                    {shop.products.slice(0, 2).map((product, index) => (\n                      <div key={index} className=\"flex items-center justify-between py-2 border-b border-agri-light-gray last:border-b-0\">\n                        <div>\n                          <p className=\"font-medium text-text-secondary text-sm\">{product.name}</p>\n                          <p className=\"text-xs text-agri-gray\">₹{product.price}</p>\n                        </div>\n                        <Badge variant=\"outline\" className={`text-xs ${\n                          product.inStock \n                            ? 'border-agri-success text-agri-success' \n                            : 'border-agri-danger text-agri-danger'\n                        }`}>\n                          {product.inStock ? 'In Stock' : 'Out of Stock'}\n                        </Badge>\n                      </div>\n                    ))}\n                  </div>\n                </div>\n\n                {/* Offers */}\n                {shop.offers.length > 0 && (\n                  <div className=\"mb-4\">\n                    <h4 className=\"font-medium text-text-secondary mb-2\">Special Offers</h4>\n                    <div className=\"space-y-1\">\n                      {shop.offers.map((offer, index) => (\n                        <div key={index} className=\"flex items-center space-x-2\">\n                          <div className=\"w-2 h-2 bg-agri-warning rounded-full\" />\n                          <p className=\"text-sm text-agri-gray\">{offer}</p>\n                        </div>\n                      ))}\n                    </div>\n                  </div>\n                )}\n\n                {/* Action Buttons */}\n                <div className=\"flex space-x-3\">\n                  <Button \n                    onClick={() => handleCall(shop.phone)}\n                    size=\"sm\" \n                    className=\"flex-1 bg-agri-primary hover:bg-agri-secondary text-white\"\n                  >\n                    <Phone className=\"w-4 h-4 mr-2\" />\n                    Call Shop\n                  </Button>\n                  \n                  <Button \n                    onClick={() => handleGetDirections(shop.id)}\n                    variant=\"outline\" \n                    size=\"sm\" \n                    className=\"border-agri-primary text-agri-primary hover:bg-agri-light\"\n                  >\n                    <Route className=\"w-4 h-4 mr-2\" />\n                    Directions\n                  </Button>\n                  \n                  <button className=\"p-2 border border-agri-light-gray rounded-lg hover:bg-agri-light transition-colors\">\n                    <Heart className=\"w-4 h-4 text-agri-gray\" />\n                  </button>\n                </div>\n\n                {/* Products Link */}\n                <button \n                  onClick={() => navigate(`/shops/${shop.id}/products`)}\n                  className=\"w-full mt-4 p-3 bg-agri-light rounded-xl flex items-center justify-between hover:bg-agri-light-gray transition-colors\"\n                >\n                  <span className=\"text-sm font-medium text-agri-primary\">View All Products</span>\n                  <ShoppingCart className=\"w-4 h-4 text-agri-primary\" />\n                </button>\n              </div>\n            ))\n          ) : (\n            <div className=\"text-center py-12\">\n              <Store className=\"w-16 h-16 text-agri-gray mx-auto mb-4\" />\n              <h3 className=\"text-lg font-semibold text-text-secondary mb-2\">No shops found</h3>\n              <p className=\"text-agri-gray mb-6\">Try adjusting your search or browse different categories</p>\n              <Button \n                onClick={() => {\n                  setSearchQuery('');\n                  setSelectedFilter('all');\n                }}\n                variant=\"outline\"\n                className=\"border-agri-primary text-agri-primary hover:bg-agri-light\"\n              >\n                Clear Filters\n              </Button>\n            </div>\n          )}\n        </div>\n\n        {/* Help Section */}\n        <div className=\"bg-white rounded-2xl p-6 shadow-soft\">\n          <h3 className=\"text-lg font-semibold text-text-secondary mb-4\">Need Help Finding Shops?</h3>\n          <div className=\"space-y-3\">\n            <button className=\"w-full flex items-center justify-between p-4 bg-agri-light rounded-xl hover:bg-agri-light-gray transition-colors\">\n              <div className=\"flex items-center space-x-3\">\n                <Phone className=\"w-5 h-5 text-agri-primary\" />\n                <span className=\"font-medium text-text-secondary\">Call Support</span>\n              </div>\n              <span className=\"text-sm text-agri-gray\">1800-123-4567</span>\n            </button>\n            \n            <button className=\"w-full flex items-center justify-between p-4 bg-agri-light rounded-xl hover:bg-agri-light-gray transition-colors\">\n              <div className=\"flex items-center space-x-3\">\n                <Store className=\"w-5 h-5 text-agri-primary\" />\n                <span className=\"font-medium text-text-secondary\">Register Your Shop</span>\n              </div>\n              <span className=\"text-sm text-agri-primary\">Free</span>\n            </button>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default NearbyShops;","size_bytes":17619},"kisan/src/pages/NotFound.tsx":{"content":"import { useLocation } from \"react-router-dom\";\nimport { useEffect } from \"react\";\n\nconst NotFound = () => {\n  const location = useLocation();\n\n  useEffect(() => {\n    console.error(\n      \"404 Error: User attempted to access non-existent route:\",\n      location.pathname\n    );\n  }, [location.pathname]);\n\n  return (\n    <div className=\"min-h-screen flex items-center justify-center bg-gray-100\">\n      <div className=\"text-center\">\n        <h1 className=\"text-4xl font-bold mb-4\">404</h1>\n        <p className=\"text-xl text-gray-600 mb-4\">Oops! Page not found</p>\n        <a href=\"/\" className=\"text-blue-500 hover:text-blue-700 underline\">\n          Return to Home\n        </a>\n      </div>\n    </div>\n  );\n};\n\nexport default NotFound;\n","size_bytes":739},"kisan/src/pages/Onboarding.tsx":{"content":"import { useState } from 'react';\nimport { useNavigate } from 'react-router-dom';\nimport { ChevronLeft, ChevronRight, Sparkles, Star } from 'lucide-react';\nimport { Button } from '@/components/ui/button';\nimport onboarding1 from '@/assets/onboarding-1.png';\nimport onboarding2 from '@/assets/onboarding-2.png';\nimport onboarding3 from '@/assets/onboarding-3.png';\n\nconst onboardingData = [\n  {\n    id: 1,\n    image: onboarding1,\n    title: \"Welcome to Smart Farming Revolution\",\n    subtitle: \"Diagnose Plant Diseases with AI Magic\",\n    description: \"Simply capture a photo and get instant expert plant health analysis\",\n    color: \"from-green-400 to-emerald-600\",\n  },\n  {\n    id: 2,\n    image: onboarding2,\n    title: \"Your Digital Agricultural Marketplace\",\n    subtitle: \"Buy Smart, Sell Smarter\",\n    description: \"Access premium fertilizers, quality seeds, and connect with buyers\",\n    color: \"from-blue-400 to-indigo-600\",\n  },\n  {\n    id: 3,\n    image: onboarding3,\n    title: \"Personalized Farming Intelligence\",\n    subtitle: \"Weather Wisdom & Expert Guidance\",\n    description: \"Get hyper-local weather updates and AI-powered farming recommendations\",\n    color: \"from-purple-400 to-pink-600\",\n  },\n];\n\nconst Onboarding = () => {\n  const [currentStep, setCurrentStep] = useState(0);\n  const navigate = useNavigate();\n\n  const handleNext = () => {\n    if (currentStep < onboardingData.length - 1) {\n      setCurrentStep(currentStep + 1);\n    } else {\n      handleGetStarted();\n    }\n  };\n\n  const handlePrevious = () => {\n    if (currentStep > 0) {\n      setCurrentStep(currentStep - 1);\n    }\n  };\n\n  const handleSkip = () => {\n    handleGetStarted();\n  };\n\n  const handleGetStarted = () => {\n    localStorage.setItem('kisanmitra_onboarding_seen', 'true');\n    navigate('/signup');\n  };\n\n  const currentData = onboardingData[currentStep];\n\n  return (\n    <div className=\"mobile-container\">\n      {/* Background with animated gradient */}\n      <div className={`absolute inset-0 bg-gradient-to-br ${currentData.color} transition-all duration-700`} />\n      \n      {/* Floating decorative elements */}\n      <div className=\"absolute inset-0 overflow-hidden\">\n        {[...Array(15)].map((_, i) => (\n          <div\n            key={i}\n            className=\"absolute\"\n            style={{\n              left: Math.random() * 100 + '%',\n              top: Math.random() * 100 + '%',\n              animationDelay: Math.random() * 4 + 's',\n            }}\n          >\n            {i % 3 === 0 ? (\n              <Sparkles className=\"w-4 h-4 text-white/30 animate-pulse\" />\n            ) : (\n              <Star className=\"w-3 h-3 text-white/20 animate-bounce\" />\n            )}\n          </div>\n        ))}\n      </div>\n\n      {/* Header */}\n      <div className=\"relative z-10 flex justify-between items-center p-6\">\n        <button\n          onClick={handlePrevious}\n          className={`p-2 rounded-full bg-white/20 backdrop-blur-sm transition-all ${\n            currentStep === 0 ? 'opacity-0 pointer-events-none' : 'opacity-100'\n          }`}\n        >\n          <ChevronLeft className=\"w-6 h-6 text-white\" />\n        </button>\n        \n        <button\n          onClick={handleSkip}\n          className=\"text-white/80 font-medium hover:text-white transition-colors\"\n        >\n          Skip\n        </button>\n      </div>\n\n      {/* Content */}\n      <div className=\"relative z-10 flex flex-col items-center justify-center min-h-[calc(100vh-200px)] px-6\">\n        {/* Image */}\n        <div className=\"mb-8 relative\">\n          <div className=\"w-80 h-60 relative animate-fade-in\">\n            <img\n              src={currentData.image}\n              alt={currentData.title}\n              className=\"w-full h-full object-contain drop-shadow-xl\"\n            />\n            \n            {/* Floating UI elements animation */}\n            <div className=\"absolute -top-4 -right-4 float-animation\">\n              <div className=\"w-8 h-8 bg-white/20 rounded-lg backdrop-blur-sm flex items-center justify-center\">\n                <Sparkles className=\"w-4 h-4 text-white\" />\n              </div>\n            </div>\n            \n            <div className=\"absolute -bottom-2 -left-4 float-animation\" style={{ animationDelay: '1s' }}>\n              <div className=\"w-6 h-6 bg-white/20 rounded-full backdrop-blur-sm\" />\n            </div>\n          </div>\n        </div>\n\n        {/* Text Content */}\n        <div className=\"text-center mb-12 animate-fade-in\">\n          <h1 className=\"text-3xl font-bold text-white mb-4 leading-tight\">\n            {currentData.title}\n          </h1>\n          \n          <div className=\"mb-4\">\n            <h2 className=\"text-xl font-semibold text-white/90 mb-2 bg-gradient-to-r from-white to-white/80 bg-clip-text text-transparent\">\n              {currentData.subtitle}\n            </h2>\n          </div>\n          \n          <p className=\"text-lg text-white/80 leading-relaxed max-w-xs\">\n            {currentData.description}\n          </p>\n        </div>\n\n        {/* Progress Indicators */}\n        <div className=\"flex space-x-3 mb-8\">\n          {onboardingData.map((_, index) => (\n            <div\n              key={index}\n              className={`h-2 rounded-full transition-all duration-500 ${\n                index === currentStep \n                  ? 'w-8 bg-white shadow-glow' \n                  : 'w-2 bg-white/40'\n              }`}\n            />\n          ))}\n        </div>\n      </div>\n\n      {/* Navigation */}\n      <div className=\"relative z-10 p-6\">\n        {currentStep === onboardingData.length - 1 ? (\n          <Button\n            onClick={handleGetStarted}\n            className=\"w-full btn-glass text-lg font-semibold py-4 bg-white/20 hover:bg-white/30 text-white border-0\"\n          >\n            <Sparkles className=\"w-5 h-5 mr-2\" />\n            Begin Your Journey\n          </Button>\n        ) : (\n          <Button\n            onClick={handleNext}\n            className=\"w-full btn-glass text-lg font-semibold py-4 bg-white/20 hover:bg-white/30 text-white border-0\"\n          >\n            Next\n            <ChevronRight className=\"w-5 h-5 ml-2\" />\n          </Button>\n        )}\n      </div>\n    </div>\n  );\n};\n\nexport default Onboarding;","size_bytes":6208},"kisan/src/pages/OrderSuccess.tsx":{"content":"import { useEffect } from 'react';\nimport { useNavigate, useLocation } from 'react-router-dom';\nimport { \n  CheckCircle,\n  Package,\n  Truck,\n  Clock,\n  MapPin,\n  Phone,\n  Download\n} from 'lucide-react';\nimport { Button } from '@/components/ui/button';\n\nconst OrderSuccess = () => {\n  const navigate = useNavigate();\n  const location = useLocation();\n  const orderData = location.state;\n  const orderId = orderData?.orderId || 'ORD' + Date.now();\n  const order = orderData?.order;\n  const selectedAddress = orderData?.selectedAddress;\n\n  useEffect(() => {\n    // Auto redirect to orders page after 10 seconds\n    const timer = setTimeout(() => {\n      navigate('/orders');\n    }, 10000);\n\n    return () => clearTimeout(timer);\n  }, [navigate]);\n\n  return (\n    <div className=\"mobile-container bg-green-50\">\n      <div className=\"mobile-content flex flex-col items-center justify-center min-h-screen text-center space-y-6 p-6\">\n        {/* Success Animation */}\n        <div className=\"relative\">\n          <div className=\"w-24 h-24 bg-green-500 rounded-full flex items-center justify-center animate-pulse\">\n            <CheckCircle className=\"w-12 h-12 text-white\" />\n          </div>\n          <div className=\"absolute -inset-4 border-4 border-green-300 rounded-full animate-ping opacity-20\"></div>\n        </div>\n\n        {/* Success Message */}\n        <div className=\"space-y-3\">\n          <h1 className=\"text-2xl font-bold text-green-800\">Order Placed Successfully!</h1>\n          <p className=\"text-green-600\">Thank you for your order. We'll take care of your farming needs.</p>\n        </div>\n\n        {/* Order Details */}\n        <div className=\"bg-white rounded-2xl p-6 shadow-sm border border-green-200 w-full max-w-sm\">\n          <div className=\"space-y-4\">\n            <div className=\"text-center\">\n              <p className=\"text-sm text-gray-500\">Order ID</p>\n              <p className=\"font-mono text-lg font-semibold text-gray-900\">#{orderId}</p>\n              {order && (\n                <div className=\"mt-2\">\n                  <p className=\"text-sm text-gray-600\">Total: <span className=\"font-semibold text-green-600\">₹{order.total}</span></p>\n                  <p className=\"text-xs text-gray-500\">{order.items.length} items</p>\n                </div>\n              )}\n            </div>\n\n            <div className=\"grid grid-cols-3 gap-4 text-center\">\n              <div>\n                <div className=\"w-12 h-12 bg-green-100 rounded-xl flex items-center justify-center mx-auto mb-2\">\n                  <Package className=\"w-6 h-6 text-green-600\" />\n                </div>\n                <p className=\"text-xs text-gray-500\">Processing</p>\n                <p className=\"text-sm font-medium text-green-600\">In Progress</p>\n              </div>\n\n              <div>\n                <div className=\"w-12 h-12 bg-gray-100 rounded-xl flex items-center justify-center mx-auto mb-2\">\n                  <Truck className=\"w-6 h-6 text-gray-400\" />\n                </div>\n                <p className=\"text-xs text-gray-500\">Shipping</p>\n                <p className=\"text-sm font-medium text-gray-400\">Pending</p>\n              </div>\n\n              <div>\n                <div className=\"w-12 h-12 bg-gray-100 rounded-xl flex items-center justify-center mx-auto mb-2\">\n                  <CheckCircle className=\"w-6 h-6 text-gray-400\" />\n                </div>\n                <p className=\"text-xs text-gray-500\">Delivered</p>\n                <p className=\"text-sm font-medium text-gray-400\">Pending</p>\n              </div>\n            </div>\n          </div>\n        </div>\n\n        {/* Estimated Delivery */}\n        <div className=\"bg-white rounded-2xl p-4 shadow-sm border border-green-200 w-full max-w-sm\">\n          <div className=\"flex items-center space-x-3\">\n            <div className=\"w-10 h-10 bg-blue-100 rounded-xl flex items-center justify-center\">\n              <Clock className=\"w-5 h-5 text-blue-600\" />\n            </div>\n            <div>\n              <p className=\"font-medium text-gray-900\">Estimated Delivery</p>\n              <p className=\"text-sm text-blue-600\">Tomorrow by 6:00 PM</p>\n            </div>\n          </div>\n        </div>\n\n        {/* Delivery Address */}\n        <div className=\"bg-white rounded-2xl p-4 shadow-sm border border-green-200 w-full max-w-sm\">\n          <div className=\"flex items-start space-x-3\">\n            <div className=\"w-10 h-10 bg-green-100 rounded-xl flex items-center justify-center\">\n              <MapPin className=\"w-5 h-5 text-green-600\" />\n            </div>\n            <div>\n              <p className=\"font-medium text-gray-900\">Delivery Address</p>\n              <p className=\"text-sm text-gray-600\">\n                {selectedAddress ? selectedAddress.address : order?.address || 'Village Rampur, Dist. Hardoi, UP 241001'}\n              </p>\n            </div>\n          </div>\n        </div>\n\n        {/* Action Buttons */}\n        <div className=\"space-y-3 w-full max-w-sm\">\n          <Button \n            onClick={() => navigate('/orders')}\n            className=\"w-full bg-green-600 hover:bg-green-700 text-white py-3 rounded-xl\"\n          >\n            <Package className=\"w-5 h-5 mr-2\" />\n            Track Your Order\n          </Button>\n\n          <Button \n            onClick={() => navigate('/shop')}\n            variant=\"outline\"\n            className=\"w-full border-green-600 text-green-600 hover:bg-green-50 py-3 rounded-xl\"\n          >\n            Continue Shopping\n          </Button>\n\n          <button \n            onClick={() => navigate('/orders')}\n            className=\"w-full flex items-center justify-center space-x-2 text-green-600 hover:text-green-700 py-2\"\n          >\n            <Download className=\"w-4 h-4\" />\n            <span className=\"text-sm\">Download Invoice</span>\n          </button>\n        </div>\n\n        {/* Support Info */}\n        <div className=\"bg-blue-50 border border-blue-200 rounded-2xl p-4 w-full max-w-sm\">\n          <div className=\"flex items-center space-x-3\">\n            <Phone className=\"w-5 h-5 text-blue-600\" />\n            <div>\n              <p className=\"font-medium text-blue-800\">Need Help?</p>\n              <p className=\"text-sm text-blue-600\">Call us at 1800-123-4567</p>\n            </div>\n          </div>\n        </div>\n\n        {/* Auto Redirect Info */}\n        <p className=\"text-xs text-gray-500\">\n          Redirecting to orders page in 10 seconds...\n        </p>\n      </div>\n    </div>\n  );\n};\n\nexport default OrderSuccess;","size_bytes":6494},"kisan/src/pages/Orders.tsx":{"content":"import React, { useState, useEffect } from 'react';\nimport { useNavigate } from 'react-router-dom';\nimport { \n  Package, \n  Truck, \n  CheckCircle, \n  Clock, \n  MapPin,\n  Phone,\n  Star,\n  RotateCcw,\n  ShoppingBag,\n  HelpCircle,\n  ChevronRight,\n  X,\n  ArrowLeft\n} from 'lucide-react';\nimport { cartManager, Order } from '@/lib/cart';\n\nconst FarmerOrdersPage = () => {\n  const navigate = useNavigate();\n  const [activeFilter, setActiveFilter] = useState('all');\n  const [orders, setOrders] = useState<Order[]>([]);\n\n  useEffect(() => {\n    loadOrders();\n  }, []);\n\n  const loadOrders = () => {\n    const allOrders = cartManager.getOrders();\n    setOrders(allOrders);\n  };\n\n  const handleReorder = (order: Order) => {\n    // Add all items from the order back to cart\n    order.items.forEach(item => {\n      cartManager.addToCart(item);\n    });\n    navigate('/cart');\n  };\n\n  const handleTrackOrder = (orderId: string) => {\n    // In a real app, this would navigate to a tracking page\n    alert(`Tracking order ${orderId}`);\n  };\n\n  const getItemIcon = (category: string) => {\n    const icons = {\n      fertilizers: '🌱',\n      seeds: '🍅',\n      pesticides: '🧪',\n      tools: '🔧'\n    };\n    return icons[category] || '🌱';\n  };\n\n  // Calculate summary stats\n  const totalOrders = orders.length;\n  const deliveredOrders = orders.filter(order => order.status === 'delivered').length;\n  const totalSpent = orders.reduce((sum, order) => sum + order.total, 0);\n\n  // Filter orders based on active filter\n  const filteredOrders = activeFilter === 'all' \n    ? orders \n    : orders.filter(order => order.status === activeFilter);\n\n  // Status configuration\n  const statusConfig = {\n    delivered: { color: 'bg-green-500', textColor: 'text-green-500', icon: CheckCircle, bgLight: 'bg-green-50' },\n    shipped: { color: 'bg-blue-500', textColor: 'text-blue-500', icon: Truck, bgLight: 'bg-blue-50' },\n    processing: { color: 'bg-orange-500', textColor: 'text-orange-500', icon: Clock, bgLight: 'bg-orange-50' },\n    cancelled: { color: 'bg-red-500', textColor: 'text-red-500', icon: X, bgLight: 'bg-red-50' }\n  };\n\n  const formatDate = (dateString) => {\n    return new Date(dateString).toLocaleDateString('en-IN', {\n      day: 'numeric',\n      month: 'short',\n      year: 'numeric'\n    });\n  };\n\n  const renderStatusBadge = (status) => {\n    const config = statusConfig[status];\n    const IconComponent = config.icon;\n    return (\n      <div className={`flex items-center gap-1 px-3 py-1 rounded-full ${config.color} text-white text-sm font-medium`}>\n        <IconComponent className=\"w-4 h-4\" />\n        {status.charAt(0).toUpperCase() + status.slice(1)}\n      </div>\n    );\n  };\n\n  const renderActionButtons = (order: Order) => {\n    const buttons = [];\n    \n    if (order.status === 'shipped' || order.status === 'processing') {\n      buttons.push(\n        <button \n          key=\"track\" \n          onClick={() => handleTrackOrder(order.id)}\n          className=\"flex items-center gap-2 px-4 py-2 bg-blue-500 text-white rounded-full text-sm font-medium hover:bg-blue-600 transition-colors\"\n        >\n          <Truck className=\"w-4 h-4\" />\n          Track Order\n        </button>\n      );\n    }\n    \n    if (order.status === 'delivered') {\n      buttons.push(\n        <button key=\"review\" className=\"flex items-center gap-2 px-4 py-2 bg-orange-500 text-white rounded-full text-sm font-medium hover:bg-orange-600 transition-colors\">\n          <Star className=\"w-4 h-4\" />\n          Rate & Review\n        </button>\n      );\n    }\n    \n    buttons.push(\n      <button \n        key=\"reorder\" \n        onClick={() => handleReorder(order)}\n        className=\"flex items-center gap-2 px-4 py-2 bg-green-500 text-white rounded-full text-sm font-medium hover:bg-green-600 transition-colors\"\n      >\n        <RotateCcw className=\"w-4 h-4\" />\n        Reorder\n      </button>\n    );\n\n    return (\n      <div className=\"flex gap-2 flex-wrap\">\n        {buttons}\n      </div>\n    );\n  };\n\n  return (\n    <div className=\"min-h-screen bg-gray-50\">\n      {/* Header */}\n      <div className=\"bg-white shadow-sm border-b\">\n        <div className=\"max-w-md mx-auto px-4 py-4\">\n          <div className=\"flex items-center space-x-3 mb-2\">\n            <button \n              onClick={() => navigate('/home')}\n              className=\"p-2 -ml-2 hover:bg-gray-100 rounded-full transition-colors\"\n            >\n              <ArrowLeft className=\"w-6 h-6 text-gray-700\" />\n            </button>\n            <h1 className=\"text-2xl font-bold text-gray-900\">My Orders</h1>\n          </div>\n          <p className=\"text-gray-600 text-sm\">Track your agricultural purchases</p>\n        </div>\n      </div>\n\n      <div className=\"max-w-md mx-auto px-4 py-6 space-y-6\">\n        {/* Summary Cards */}\n        <div className=\"grid grid-cols-3 gap-3\">\n          <div className=\"bg-white rounded-2xl p-4 shadow-sm border border-gray-100\">\n            <div className=\"flex items-center gap-2 mb-2\">\n              <div className=\"w-8 h-8 bg-blue-50 rounded-lg flex items-center justify-center\">\n                <Package className=\"w-4 h-4 text-blue-500\" />\n              </div>\n            </div>\n            <div className=\"text-2xl font-bold text-gray-900\">{totalOrders}</div>\n            <div className=\"text-sm text-gray-600\">Total Orders</div>\n          </div>\n\n          <div className=\"bg-white rounded-2xl p-4 shadow-sm border border-gray-100\">\n            <div className=\"flex items-center gap-2 mb-2\">\n              <div className=\"w-8 h-8 bg-green-50 rounded-lg flex items-center justify-center\">\n                <CheckCircle className=\"w-4 h-4 text-green-500\" />\n              </div>\n            </div>\n            <div className=\"text-2xl font-bold text-gray-900\">{deliveredOrders}</div>\n            <div className=\"text-sm text-gray-600\">Delivered</div>\n          </div>\n\n          <div className=\"bg-white rounded-2xl p-4 shadow-sm border border-gray-100\">\n            <div className=\"flex items-center gap-2 mb-2\">\n              <div className=\"w-8 h-8 bg-yellow-50 rounded-lg flex items-center justify-center\">\n                <span className=\"text-lg\">💰</span>\n              </div>\n            </div>\n            <div className=\"text-2xl font-bold text-gray-900\">₹{totalSpent.toLocaleString()}</div>\n            <div className=\"text-sm text-gray-600\">Total Spent</div>\n          </div>\n        </div>\n\n        {/* Filter Pills */}\n        <div className=\"flex gap-2 overflow-x-auto pb-2\">\n          {['all', 'processing', 'shipped', 'delivered'].map((filter) => (\n            <button\n              key={filter}\n              onClick={() => setActiveFilter(filter)}\n              className={`px-6 py-2 rounded-full text-sm font-medium whitespace-nowrap transition-colors ${\n                activeFilter === filter\n                  ? 'bg-green-500 text-white'\n                  : 'bg-white text-gray-600 border border-gray-200 hover:bg-gray-50'\n              }`}\n            >\n              {filter.charAt(0).toUpperCase() + filter.slice(1)}\n            </button>\n          ))}\n        </div>\n\n        {/* Orders List */}\n        {filteredOrders.length > 0 ? (\n          <div className=\"space-y-4\">\n            {filteredOrders.map((order) => (\n              <div key={order.id} className=\"bg-white rounded-2xl p-5 shadow-sm border border-gray-100\">\n                {/* Order Header */}\n                <div className=\"flex justify-between items-start mb-4\">\n                  <div>\n                    <h3 className=\"font-semibold text-gray-900\">Order #{order.id}</h3>\n                    <p className=\"text-sm text-gray-600\">Placed on {formatDate(order.orderDate)}</p>\n                  </div>\n                  {renderStatusBadge(order.status)}\n                </div>\n\n                {/* Products */}\n                <div className=\"space-y-3 mb-4\">\n                  {order.items.slice(0, 2).map((product, index) => (\n                    <div key={index} className=\"flex justify-between items-center\">\n                      <div className=\"flex items-center gap-3\">\n                        <div className=\"w-10 h-10 bg-green-50 rounded-lg flex items-center justify-center\">\n                          <span className=\"text-lg\">{getItemIcon(product.category)}</span>\n                        </div>\n                        <div>\n                          <p className=\"text-sm font-medium text-gray-900\">{product.name}</p>\n                          <p className=\"text-xs text-gray-500\">{product.quantity} x ₹{product.price}</p>\n                        </div>\n                      </div>\n                      <p className=\"font-semibold text-gray-900\">₹{product.price * product.quantity}</p>\n                    </div>\n                  ))}\n                  {order.items.length > 2 && (\n                    <button className=\"text-sm text-green-500 font-medium\">\n                      + {order.items.length - 2} more items\n                    </button>\n                  )}\n                </div>\n\n                {/* Total Amount */}\n                <div className=\"flex justify-between items-center py-3 border-t border-gray-100\">\n                  <span className=\"font-semibold text-gray-900\">Total Amount</span>\n                  <span className=\"text-lg font-bold text-green-600\">₹{order.total}</span>\n                </div>\n\n                {/* Address & Delivery Info */}\n                <div className=\"bg-gray-50 rounded-xl p-3 mb-4\">\n                  <div className=\"flex items-start gap-2\">\n                    <MapPin className=\"w-4 h-4 text-gray-500 mt-0.5\" />\n                    <div className=\"flex-1\">\n                      <p className=\"text-sm text-gray-900\">{order.address}</p>\n                      {order.status === 'delivered' && order.deliveryDate && (\n                        <p className=\"text-sm text-green-600 mt-1\">\n                          Delivered on {formatDate(order.deliveryDate)}\n                        </p>\n                      )}\n                      {order.status !== 'delivered' && order.estimatedDelivery && (\n                        <p className=\"text-sm text-blue-600 mt-1\">\n                          Expected by {formatDate(order.estimatedDelivery)}\n                        </p>\n                      )}\n                    </div>\n                  </div>\n                </div>\n\n                {/* Action Buttons */}\n                {renderActionButtons(order)}\n              </div>\n            ))}\n          </div>\n        ) : (\n          /* Empty State */\n          <div className=\"text-center py-12 bg-white rounded-2xl shadow-sm border border-gray-100\">\n            <div className=\"w-20 h-20 bg-gray-50 rounded-full flex items-center justify-center mx-auto mb-4\">\n              <ShoppingBag className=\"w-10 h-10 text-gray-400\" />\n            </div>\n            <h3 className=\"text-lg font-semibold text-gray-900 mb-2\">No orders yet</h3>\n            <p className=\"text-gray-600 mb-6\">Start shopping for agricultural supplies today!</p>\n            <button \n              onClick={() => navigate('/shop')}\n              className=\"bg-green-500 text-white px-6 py-3 rounded-full font-medium hover:bg-green-600 transition-colors\"\n            >\n              Shop Now\n            </button>\n          </div>\n        )}\n\n        {/* Support Section */}\n        <div className=\"bg-white rounded-2xl p-5 shadow-sm border border-gray-100\">\n          <div className=\"flex items-center gap-2 mb-4\">\n            <HelpCircle className=\"w-5 h-5 text-gray-600\" />\n            <h3 className=\"text-lg font-semibold text-gray-900\">Need Help?</h3>\n          </div>\n          \n          <div className=\"space-y-2\">\n            <button className=\"w-full flex items-center justify-between p-3 bg-gray-50 rounded-xl hover:bg-gray-100 transition-colors\">\n              <div className=\"flex items-center gap-3\">\n                <Phone className=\"w-5 h-5 text-green-500\" />\n                <span className=\"font-medium text-gray-900\">Contact Support</span>\n              </div>\n              <ChevronRight className=\"w-5 h-5 text-gray-400\" />\n            </button>\n            \n            <button className=\"w-full flex items-center justify-between p-3 bg-gray-50 rounded-xl hover:bg-gray-100 transition-colors\">\n              <div className=\"flex items-center gap-3\">\n                <RotateCcw className=\"w-5 h-5 text-green-500\" />\n                <span className=\"font-medium text-gray-900\">Return Policy</span>\n              </div>\n              <ChevronRight className=\"w-5 h-5 text-gray-400\" />\n            </button>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default FarmerOrdersPage;","size_bytes":12646},"kisan/src/pages/Profile.tsx":{"content":"import React, { useState, useEffect } from 'react';\nimport { \n  ArrowLeft, \n  Edit, \n  Phone, \n  MapPin, \n  Calendar,\n  Globe,\n  ShoppingCart,\n  Package,\n  Home,\n  Wallet,\n  Gift,\n  Sprout,\n  Bug,\n  BookOpen,\n  Bell,\n  Moon,\n  Sun,\n  Headphones,\n  HelpCircle,\n  MessageCircle,\n  Star,\n  Info,\n  Shield,\n  FileText,\n  LogOut,\n  Mail,\n  ChevronRight,\n  Truck,\n  CreditCard,\n  Users\n} from 'lucide-react';\n\nconst Profile = () => {\n  const [userData, setUserData] = useState({\n    name: 'Rajesh Kumar',\n    phone: '+91 98765 43210',\n    email: 'rajesh.kumar@email.com',\n    birthDate: '15 March 1985',\n    location: 'Kurnool District',\n    state: 'Andhra Pradesh',\n    pincode: '518001',\n    language: 'English',\n    avatar: null\n  });\n\n  const [notifications, setNotifications] = useState(true);\n  const [darkMode, setDarkMode] = useState(false);\n  const [walletBalance, setWalletBalance] = useState('₹2,450');\n  const [couponsCount, setCouponsCount] = useState(3);\n\n  // Load user data from localStorage on component mount\n  useEffect(() => {\n    const savedUserData = localStorage.getItem('kisanmitra_user');\n    if (savedUserData) {\n      const parsedData = JSON.parse(savedUserData);\n      setUserData(prev => ({\n        ...prev,\n        name: parsedData.name || prev.name,\n        phone: parsedData.mobile || prev.phone,\n        state: parsedData.state || prev.state,\n        location: parsedData.district || prev.location,\n      }));\n    }\n  }, []);\n\n  const ProfileSection = ({ title, children, icon: Icon }) => (\n    <div className=\"bg-white rounded-2xl shadow-sm border border-gray-100 overflow-hidden\">\n      {title && (\n        <div className=\"flex items-center space-x-3 p-6 border-b border-gray-50\">\n          {Icon && <Icon className=\"w-5 h-5 text-green-600\" />}\n          <h3 className=\"text-lg font-semibold text-gray-900\">{title}</h3>\n        </div>\n      )}\n      <div className=\"p-6 pt-4\">\n        {children}\n      </div>\n    </div>\n  );\n\n  const MenuButton = ({ icon: Icon, title, subtitle, onClick, rightElement, color = \"text-gray-700\" }) => (\n    <button \n      onClick={onClick}\n      className=\"w-full flex items-center justify-between p-4 hover:bg-gray-50 rounded-xl transition-all duration-200 group\"\n    >\n      <div className=\"flex items-center space-x-3\">\n        <div className={`w-10 h-10 ${color.includes('red') ? 'bg-red-100' : color.includes('green') ? 'bg-green-100' : 'bg-blue-100'} rounded-full flex items-center justify-center`}>\n          <Icon className={`w-5 h-5 ${color}`} />\n        </div>\n        <div className=\"text-left\">\n          <div className=\"font-medium text-gray-900\">{title}</div>\n          {subtitle && <div className=\"text-sm text-gray-500\">{subtitle}</div>}\n        </div>\n      </div>\n      {rightElement || <ChevronRight className=\"w-4 h-4 text-gray-400 group-hover:text-gray-600\" />}\n    </button>\n  );\n\n  return (\n    <div className=\"min-h-screen bg-gray-50\">\n      {/* Header */}\n      <div className=\"bg-gradient-to-br from-green-500 to-green-600 px-4 py-6\">\n        <div className=\"flex items-center space-x-3 mb-6\">\n          <button className=\"w-10 h-10 bg-white/20 backdrop-blur-sm rounded-full flex items-center justify-center\">\n            <ArrowLeft className=\"w-5 h-5 text-white\" />\n          </button>\n          <h1 className=\"text-xl font-bold text-white\">Profile</h1>\n        </div>\n\n        {/* User Info Card */}\n        <div className=\"bg-white/10 backdrop-blur-sm rounded-2xl p-6 text-white border border-white/20\">\n          <div className=\"flex items-start justify-between mb-4\">\n            <div className=\"flex items-center space-x-4\">\n              <div className=\"w-16 h-16 bg-white/20 rounded-full flex items-center justify-center text-white text-xl font-bold border-2 border-white/30\">\n                {userData.name.charAt(0).toUpperCase()}\n              </div>\n              <div>\n                <h2 className=\"text-xl font-bold\">{userData.name}</h2>\n                <div className=\"flex items-center space-x-2 mt-1\">\n                  <Phone className=\"w-4 h-4\" />\n                  <span className=\"text-white/90\">{userData.phone}</span>\n                </div>\n                {userData.email && (\n                  <div className=\"flex items-center space-x-2 mt-1\">\n                    <Mail className=\"w-4 h-4\" />\n                    <span className=\"text-white/90\">{userData.email}</span>\n                  </div>\n                )}\n              </div>\n            </div>\n            <button className=\"bg-white/20 backdrop-blur-sm hover:bg-white/30 border border-white/30 px-4 py-2 rounded-xl flex items-center space-x-2 transition-all\">\n              <Edit className=\"w-4 h-4\" />\n              <span className=\"text-sm font-medium\">Edit</span>\n            </button>\n          </div>\n          \n          <div className=\"grid grid-cols-2 gap-4 text-sm\">\n            <div className=\"flex items-center space-x-2\">\n              <Calendar className=\"w-4 h-4\" />\n              <span>{userData.birthDate}</span>\n            </div>\n            <div className=\"flex items-center space-x-2\">\n              <Globe className=\"w-4 h-4\" />\n              <span>{userData.language}</span>\n            </div>\n            <div className=\"flex items-center space-x-2 col-span-2\">\n              <MapPin className=\"w-4 h-4\" />\n              <span>{userData.location}, {userData.state} - {userData.pincode}</span>\n            </div>\n          </div>\n        </div>\n      </div>\n\n      <div className=\"px-4 pb-6 space-y-6 -mt-4\">\n        {/* Orders & Purchases */}\n        <ProfileSection title=\"Orders & Purchases\" icon={ShoppingCart}>\n          <div className=\"space-y-1\">\n            <MenuButton \n              icon={Package} \n              title=\"My Orders\" \n              subtitle=\"View all your orders\"\n              color=\"text-blue-600\"\n            />\n            <MenuButton \n              icon={Truck} \n              title=\"Track Orders\" \n              subtitle=\"Real-time order tracking\"\n              color=\"text-orange-600\"\n            />\n            <MenuButton \n              icon={Home} \n              title=\"Saved Addresses\" \n              subtitle=\"Manage delivery locations\"\n              color=\"text-purple-600\"\n            />\n          </div>\n        </ProfileSection>\n\n        {/* Wallet & Rewards */}\n        <ProfileSection title=\"Wallet & Rewards\" icon={Wallet}>\n          <div className=\"space-y-4\">\n            {/* Wallet Balance Card */}\n            <div className=\"bg-gradient-to-r from-green-500 to-green-600 rounded-xl p-4 text-white\">\n              <div className=\"flex items-center justify-between\">\n                <div>\n                  <p className=\"text-green-100 text-sm\">Wallet Balance</p>\n                  <p className=\"text-2xl font-bold\">{walletBalance}</p>\n                </div>\n                <div className=\"w-12 h-12 bg-white/20 rounded-full flex items-center justify-center\">\n                  <CreditCard className=\"w-6 h-6 text-white\" />\n                </div>\n              </div>\n              <button className=\"mt-3 bg-white/20 hover:bg-white/30 px-4 py-2 rounded-lg text-sm font-medium transition-all\">\n                Add Money\n              </button>\n            </div>\n\n            <MenuButton \n              icon={Gift} \n              title=\"Coupons & Offers\" \n              subtitle={`${couponsCount} active coupons available`}\n              color=\"text-pink-600\"\n              rightElement={\n                <div className=\"flex items-center space-x-2\">\n                  <span className=\"bg-pink-100 text-pink-600 px-2 py-1 rounded-full text-xs font-medium\">\n                    {couponsCount}\n                  </span>\n                  <ChevronRight className=\"w-4 h-4 text-gray-400\" />\n                </div>\n              }\n            />\n          </div>\n        </ProfileSection>\n\n        {/* Farming Support & Advisory */}\n        <ProfileSection title=\"Farming Support & Advisory\" icon={Sprout}>\n          <div className=\"space-y-2\">\n            <MenuButton \n              icon={Sprout} \n              title=\"My Crop Advisory\" \n              subtitle=\"Personalized farming guidance\"\n              color=\"text-green-600\"\n            />\n            <MenuButton \n              icon={Bug} \n              title=\"Disease Detection History\" \n              subtitle=\"View past scan results\"\n              color=\"text-red-600\"\n            />\n            <MenuButton \n              icon={BookOpen} \n              title=\"Saved Tips & Articles\" \n              subtitle=\"Your bookmarked content\"\n              color=\"text-blue-600\"\n            />\n          </div>\n        </ProfileSection>\n\n        {/* App Controls */}\n        <ProfileSection title=\"App Controls\" icon={Users}>\n          <div className=\"space-y-4\">\n            <div className=\"flex items-center justify-between p-4 bg-gray-50 rounded-xl\">\n              <div className=\"flex items-center space-x-3\">\n                <div className=\"w-10 h-10 bg-blue-100 rounded-full flex items-center justify-center\">\n                  <Globe className=\"w-5 h-5 text-blue-600\" />\n                </div>\n                <div>\n                  <div className=\"font-medium text-gray-900\">Language</div>\n                  <div className=\"text-sm text-gray-500\">Current: {userData.language}</div>\n                </div>\n              </div>\n              <button className=\"bg-blue-600 text-white px-4 py-2 rounded-lg text-sm font-medium\">\n                Change\n              </button>\n            </div>\n\n            <div className=\"flex items-center justify-between p-4 bg-gray-50 rounded-xl\">\n              <div className=\"flex items-center space-x-3\">\n                <div className=\"w-10 h-10 bg-orange-100 rounded-full flex items-center justify-center\">\n                  <Bell className=\"w-5 h-5 text-orange-600\" />\n                </div>\n                <div>\n                  <div className=\"font-medium text-gray-900\">Notifications</div>\n                  <div className=\"text-sm text-gray-500\">Push notifications & alerts</div>\n                </div>\n              </div>\n              <label className=\"relative inline-flex items-center cursor-pointer\">\n                <input \n                  type=\"checkbox\" \n                  checked={notifications}\n                  onChange={(e) => setNotifications(e.target.checked)}\n                  className=\"sr-only peer\"\n                />\n                <div className=\"w-11 h-6 bg-gray-200 peer-focus:outline-none rounded-full peer peer-checked:after:translate-x-full peer-checked:after:border-white after:content-[''] after:absolute after:top-[2px] after:left-[2px] after:bg-white after:rounded-full after:h-5 after:w-5 after:transition-all peer-checked:bg-green-600\"></div>\n              </label>\n            </div>\n\n            <div className=\"flex items-center justify-between p-4 bg-gray-50 rounded-xl\">\n              <div className=\"flex items-center space-x-3\">\n                <div className=\"w-10 h-10 bg-purple-100 rounded-full flex items-center justify-center\">\n                  {darkMode ? <Moon className=\"w-5 h-5 text-purple-600\" /> : <Sun className=\"w-5 h-5 text-purple-600\" />}\n                </div>\n                <div>\n                  <div className=\"font-medium text-gray-900\">Dark Mode</div>\n                  <div className=\"text-sm text-gray-500\">Switch app theme</div>\n                </div>\n              </div>\n              <label className=\"relative inline-flex items-center cursor-pointer\">\n                <input \n                  type=\"checkbox\" \n                  checked={darkMode}\n                  onChange={(e) => setDarkMode(e.target.checked)}\n                  className=\"sr-only peer\"\n                />\n                <div className=\"w-11 h-6 bg-gray-200 peer-focus:outline-none rounded-full peer peer-checked:after:translate-x-full peer-checked:after:border-white after:content-[''] after:absolute after:top-[2px] after:left-[2px] after:bg-white after:rounded-full after:h-5 after:w-5 after:transition-all peer-checked:bg-purple-600\"></div>\n              </label>\n            </div>\n          </div>\n        </ProfileSection>\n\n        {/* Help & Feedback */}\n        <ProfileSection title=\"Help & Feedback\" icon={HelpCircle}>\n          <div className=\"px-6 py-4 space-y-2\">\n            {/* Contact Support Card */}\n            <div className=\"bg-blue-50 rounded-xl p-4 border border-blue-100 mb-4\">\n              <div className=\"flex items-center space-x-3 mb-3\">\n                <div className=\"w-10 h-10 bg-blue-100 rounded-full flex items-center justify-center\">\n                  <Headphones className=\"w-5 h-5 text-blue-600\" />\n                </div>\n                <div>\n                  <h4 className=\"font-semibold text-blue-900\">24/7 Support Available</h4>\n                  <p className=\"text-sm text-blue-700\">Get instant help from our experts</p>\n                </div>\n              </div>\n              <div className=\"flex space-x-2\">\n                <button className=\"flex-1 bg-blue-600 text-white py-2 px-4 rounded-lg text-sm font-medium\">\n                  Call Now\n                </button>\n                <button className=\"flex-1 bg-white text-blue-600 border border-blue-200 py-2 px-4 rounded-lg text-sm font-medium\">\n                  Chat\n                </button>\n              </div>\n            </div>\n\n            <MenuButton \n              icon={HelpCircle} \n              title=\"FAQs\" \n              subtitle=\"Find answers to common questions\"\n              color=\"text-indigo-600\"\n            />\n            <MenuButton \n              icon={MessageCircle} \n              title=\"Give Feedback\" \n              subtitle=\"Help us improve the app\"\n              color=\"text-green-600\"\n              rightElement={\n                <div className=\"flex items-center space-x-2\">\n                  <div className=\"flex space-x-1\">\n                    {[1,2,3,4,5].map(i => (\n                      <Star key={i} className=\"w-4 h-4 text-yellow-400 fill-current\" />\n                    ))}\n                  </div>\n                  <ChevronRight className=\"w-4 h-4 text-gray-400\" />\n                </div>\n              }\n            />\n            \n            <div className=\"flex items-center justify-between p-4 bg-gray-50 rounded-xl\">\n              <div className=\"flex items-center space-x-3\">\n                <div className=\"w-10 h-10 bg-green-100 rounded-full flex items-center justify-center\">\n                  <Users className=\"w-5 h-5 text-green-600\" />\n                </div>\n                <div>\n                  <div className=\"font-medium text-gray-900\">Share Usage Data</div>\n                  <div className=\"text-xs text-gray-500\">Anonymous data helps improve advisory</div>\n                </div>\n              </div>\n              <label className=\"relative inline-flex items-center cursor-pointer\">\n                <input type=\"checkbox\" defaultChecked className=\"sr-only peer\" />\n                <div className=\"w-11 h-6 bg-gray-200 peer-focus:outline-none rounded-full peer peer-checked:after:translate-x-full peer-checked:after:border-white after:content-[''] after:absolute after:top-[2px] after:left-[2px] after:bg-white after:rounded-full after:h-5 after:w-5 after:transition-all peer-checked:bg-green-600\"></div>\n              </label>\n            </div>\n          </div>\n        </ProfileSection>\n\n        {/* Legal & Logout */}\n        <ProfileSection>\n          <div className=\"px-6 py-4\">\n            <MenuButton \n              icon={Info} \n              title=\"About Us\" \n              subtitle=\"Learn more about KisanMitra\"\n              color=\"text-gray-600\"\n            />\n            <MenuButton \n              icon={Shield} \n              title=\"Privacy Policy\" \n              subtitle=\"How we protect your data\"\n              color=\"text-gray-600\"\n            />\n            <MenuButton \n              icon={FileText} \n              title=\"Terms & Conditions\" \n              subtitle=\"App usage guidelines\"\n              color=\"text-gray-600\"\n            />\n          </div>\n        </ProfileSection>\n\n        {/* Logout Button - Last item */}\n        <div className=\"bg-white rounded-2xl shadow-sm border border-red-100\">\n          <button className=\"w-full flex items-center justify-center space-x-3 p-4 hover:bg-red-50 rounded-2xl transition-all duration-200\">\n            <div className=\"w-10 h-10 bg-red-100 rounded-full flex items-center justify-center\">\n              <LogOut className=\"w-5 h-5 text-red-600\" />\n            </div>\n            <span className=\"font-semibold text-red-600\">Logout</span>\n          </button>\n        </div>\n\n        {/* Bottom spacing for mobile */}\n        <div className=\"h-8\"></div>\n      </div>\n    </div>\n  );\n};\n\nexport default Profile;","size_bytes":16740},"kisan/src/pages/ProfileEdit.tsx":{"content":"import { useState } from 'react';\nimport { useNavigate } from 'react-router-dom';\nimport { \n  ArrowLeft, \n  Save, \n  Camera,\n  User,\n  Phone, \n  MapPin, \n  Calendar,\n  Globe,\n  Mail\n} from 'lucide-react';\nimport { Button } from '@/components/ui/button';\nimport { Input } from '@/components/ui/input';\nimport { Label } from '@/components/ui/label';\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';\nimport { toast } from '@/components/ui/use-toast';\n\nconst ProfileEdit = () => {\n  const navigate = useNavigate();\n  const [userData, setUserData] = useState({\n    name: 'Ramu Ji',\n    phone: '+91 98765 43210',\n    email: 'ramu@example.com',\n    birthDate: '1985-03-15',\n    location: 'Hyderabad',\n    state: 'Telangana',\n    pincode: '500001',\n    language: 'English'\n  });\n\n  const handleSave = () => {\n    // Save to localStorage\n    localStorage.setItem('kisanmitra_user', JSON.stringify(userData));\n    \n    toast({\n      title: \"Profile Updated\",\n      description: \"Your profile has been successfully updated.\"\n    });\n    \n    navigate('/profile');\n  };\n\n  const handleInputChange = (field: string, value: string) => {\n    setUserData(prev => ({\n      ...prev,\n      [field]: value\n    }));\n  };\n\n  return (\n    <div className=\"mobile-container bg-background\">\n      {/* Header */}\n      <div className=\"mobile-header bg-white\">\n        <div className=\"flex items-center space-x-3\">\n          <button \n            onClick={() => navigate('/profile')}\n            className=\"w-10 h-10 bg-agri-light rounded-full flex items-center justify-center\"\n          >\n            <ArrowLeft className=\"w-5 h-5 text-agri-accent\" />\n          </button>\n          <h1 className=\"text-xl font-bold text-agri-accent\">Edit Profile</h1>\n        </div>\n        \n        <Button \n          onClick={handleSave}\n          className=\"bg-agri-primary hover:bg-agri-secondary text-white\"\n        >\n          <Save className=\"w-4 h-4 mr-2\" />\n          Save\n        </Button>\n      </div>\n\n      <div className=\"mobile-content space-y-6 pt-4\">\n        {/* Profile Photo */}\n        <div className=\"bg-white rounded-2xl p-6 shadow-soft\">\n          <div className=\"text-center\">\n            <div className=\"w-20 h-20 bg-agri-primary rounded-full flex items-center justify-center text-white text-2xl font-bold mx-auto mb-4\">\n              RJ\n            </div>\n            <Button variant=\"outline\" className=\"border-agri-primary text-agri-primary\">\n              <Camera className=\"w-4 h-4 mr-2\" />\n              Change Photo\n            </Button>\n          </div>\n        </div>\n\n        {/* Personal Information */}\n        <div className=\"bg-white rounded-2xl p-6 shadow-soft\">\n          <div className=\"flex items-center space-x-2 mb-6\">\n            <User className=\"w-5 h-5 text-agri-primary\" />\n            <h3 className=\"text-lg font-bold text-agri-accent\">Personal Information</h3>\n          </div>\n\n          <div className=\"space-y-4\">\n            <div>\n              <Label htmlFor=\"name\" className=\"text-agri-accent font-medium\">Full Name</Label>\n              <Input\n                id=\"name\"\n                value={userData.name}\n                onChange={(e) => handleInputChange('name', e.target.value)}\n                className=\"mt-2 border-agri-primary/20 focus:border-agri-primary\"\n              />\n            </div>\n\n            <div>\n              <Label htmlFor=\"phone\" className=\"text-agri-accent font-medium\">Phone Number</Label>\n              <Input\n                id=\"phone\"\n                value={userData.phone}\n                onChange={(e) => handleInputChange('phone', e.target.value)}\n                className=\"mt-2 border-agri-primary/20 focus:border-agri-primary\"\n              />\n            </div>\n\n            <div>\n              <Label htmlFor=\"email\" className=\"text-agri-accent font-medium\">Email Address</Label>\n              <Input\n                id=\"email\"\n                type=\"email\"\n                value={userData.email}\n                onChange={(e) => handleInputChange('email', e.target.value)}\n                className=\"mt-2 border-agri-primary/20 focus:border-agri-primary\"\n              />\n            </div>\n\n            <div>\n              <Label htmlFor=\"birthDate\" className=\"text-agri-accent font-medium\">Date of Birth</Label>\n              <Input\n                id=\"birthDate\"\n                type=\"date\"\n                value={userData.birthDate}\n                onChange={(e) => handleInputChange('birthDate', e.target.value)}\n                className=\"mt-2 border-agri-primary/20 focus:border-agri-primary\"\n              />\n            </div>\n          </div>\n        </div>\n\n        {/* Location Information */}\n        <div className=\"bg-white rounded-2xl p-6 shadow-soft\">\n          <div className=\"flex items-center space-x-2 mb-6\">\n            <MapPin className=\"w-5 h-5 text-agri-primary\" />\n            <h3 className=\"text-lg font-bold text-agri-accent\">Location Details</h3>\n          </div>\n\n          <div className=\"space-y-4\">\n            <div>\n              <Label htmlFor=\"location\" className=\"text-agri-accent font-medium\">City</Label>\n              <Input\n                id=\"location\"\n                value={userData.location}\n                onChange={(e) => handleInputChange('location', e.target.value)}\n                className=\"mt-2 border-agri-primary/20 focus:border-agri-primary\"\n              />\n            </div>\n\n            <div>\n              <Label htmlFor=\"state\" className=\"text-agri-accent font-medium\">State</Label>\n              <Select value={userData.state} onValueChange={(value) => handleInputChange('state', value)}>\n                <SelectTrigger className=\"mt-2 border-agri-primary/20 focus:border-agri-primary\">\n                  <SelectValue />\n                </SelectTrigger>\n                <SelectContent>\n                  <SelectItem value=\"Telangana\">Telangana</SelectItem>\n                  <SelectItem value=\"Andhra Pradesh\">Andhra Pradesh</SelectItem>\n                  <SelectItem value=\"Karnataka\">Karnataka</SelectItem>\n                  <SelectItem value=\"Tamil Nadu\">Tamil Nadu</SelectItem>\n                  <SelectItem value=\"Kerala\">Kerala</SelectItem>\n                  <SelectItem value=\"Maharashtra\">Maharashtra</SelectItem>\n                  <SelectItem value=\"Gujarat\">Gujarat</SelectItem>\n                  <SelectItem value=\"Rajasthan\">Rajasthan</SelectItem>\n                  <SelectItem value=\"Uttar Pradesh\">Uttar Pradesh</SelectItem>\n                  <SelectItem value=\"Bihar\">Bihar</SelectItem>\n                  <SelectItem value=\"West Bengal\">West Bengal</SelectItem>\n                  <SelectItem value=\"Odisha\">Odisha</SelectItem>\n                  <SelectItem value=\"Madhya Pradesh\">Madhya Pradesh</SelectItem>\n                  <SelectItem value=\"Chhattisgarh\">Chhattisgarh</SelectItem>\n                  <SelectItem value=\"Jharkhand\">Jharkhand</SelectItem>\n                  <SelectItem value=\"Assam\">Assam</SelectItem>\n                  <SelectItem value=\"Punjab\">Punjab</SelectItem>\n                  <SelectItem value=\"Haryana\">Haryana</SelectItem>\n                  <SelectItem value=\"Himachal Pradesh\">Himachal Pradesh</SelectItem>\n                  <SelectItem value=\"Uttarakhand\">Uttarakhand</SelectItem>\n                </SelectContent>\n              </Select>\n            </div>\n\n            <div>\n              <Label htmlFor=\"pincode\" className=\"text-agri-accent font-medium\">PIN Code</Label>\n              <Input\n                id=\"pincode\"\n                value={userData.pincode}\n                onChange={(e) => handleInputChange('pincode', e.target.value)}\n                className=\"mt-2 border-agri-primary/20 focus:border-agri-primary\"\n              />\n            </div>\n          </div>\n        </div>\n\n        {/* Preferences */}\n        <div className=\"bg-white rounded-2xl p-6 shadow-soft\">\n          <div className=\"flex items-center space-x-2 mb-6\">\n            <Globe className=\"w-5 h-5 text-agri-primary\" />\n            <h3 className=\"text-lg font-bold text-agri-accent\">Preferences</h3>\n          </div>\n\n          <div>\n            <Label htmlFor=\"language\" className=\"text-agri-accent font-medium\">Preferred Language</Label>\n            <Select value={userData.language} onValueChange={(value) => handleInputChange('language', value)}>\n              <SelectTrigger className=\"mt-2 border-agri-primary/20 focus:border-agri-primary\">\n                <SelectValue />\n              </SelectTrigger>\n              <SelectContent>\n                <SelectItem value=\"English\">🇮🇳 English</SelectItem>\n                <SelectItem value=\"Hindi\">🇮🇳 हिंदी (Hindi)</SelectItem>\n                <SelectItem value=\"Telugu\">🇮🇳 తెలుగు (Telugu)</SelectItem>\n                <SelectItem value=\"Tamil\">🇮🇳 தமிழ் (Tamil)</SelectItem>\n                <SelectItem value=\"Kannada\">🇮🇳 ಕನ್ನಡ (Kannada)</SelectItem>\n              </SelectContent>\n            </Select>\n          </div>\n        </div>\n\n        {/* Save Button */}\n        <div className=\"pb-8\">\n          <Button \n            onClick={handleSave}\n            className=\"w-full bg-agri-primary hover:bg-agri-secondary text-white h-12 text-lg font-semibold\"\n          >\n            <Save className=\"w-5 h-5 mr-2\" />\n            Save Changes\n          </Button>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default ProfileEdit;","size_bytes":9463},"kisan/src/pages/SellProduce.tsx":{"content":"import { useState } from 'react';\nimport { useNavigate } from 'react-router-dom';\nimport {\n  ArrowLeft,\n  Plus,\n  MapPin,\n  Clock,\n  Eye,\n  Truck,\n  CheckCircle,\n  X,\n  TrendingUp\n} from 'lucide-react';\nimport { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';\nimport { Button } from '@/components/ui/button';\nimport { Input } from '@/components/ui/input';\nimport { Badge } from '@/components/ui/badge';\nimport { Dialog, DialogContent, DialogHeader, DialogTitle } from '@/components/ui/dialog';\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';\nimport { Switch } from '@/components/ui/switch';\n\nconst SellProduce = () => {\n  const navigate = useNavigate();\n  const [selectedTab, setSelectedTab] = useState('active');\n  const [showCreateListingDialog, setShowCreateListingDialog] = useState(false);\n  const [selectedCrop, setSelectedCrop] = useState('');\n  const [quantity, setQuantity] = useState('');\n  const [pricePerKg, setPricePerKg] = useState('');\n  const [needTransport, setNeedTransport] = useState(false);\n\n  // Sample data\n  const activeListings = [\n    {\n      id: '1',\n      crop: '🥔 Potato',\n      quantity: '100 kg',\n      pricePerKg: 12,\n      transport: 'Yes',\n      views: 24,\n      inquiries: 3,\n      postedDate: '2 days ago'\n    },\n    {\n      id: '2',\n      crop: '🍅 Tomato',\n      quantity: '50 kg',\n      pricePerKg: 25,\n      transport: 'No',\n      views: 18,\n      inquiries: 2,\n      postedDate: '1 day ago'\n    },\n    {\n      id: '3',\n      crop: '🌾 Wheat',\n      quantity: '200 kg',\n      pricePerKg: 22,\n      transport: 'Yes',\n      views: 35,\n      inquiries: 5,\n      postedDate: '3 days ago'\n    }\n  ];\n\n  const soldListings = [\n    {\n      id: '4',\n      crop: '🍅 Tomato',\n      quantity: '80 kg',\n      pricePerKg: 25,\n      transport: 'Yes',\n      soldPrice: 2000,\n      soldDate: '2024-01-15',\n      buyer: 'Fresh Mart'\n    },\n    {\n      id: '5',\n      crop: '🥔 Potato',\n      quantity: '150 kg',\n      pricePerKg: 15,\n      transport: 'No',\n      soldPrice: 2250,\n      soldDate: '2024-01-12',\n      buyer: 'Local Market'\n    },\n    {\n      id: '6',\n      crop: '🌾 Wheat',\n      quantity: '300 kg',\n      pricePerKg: 20,\n      transport: 'Yes',\n      soldPrice: 6000,\n      soldDate: '2024-01-10',\n      buyer: 'Grain Depot'\n    }\n  ];\n\n  const marketPrices = [\n    { crop: '🍅 Tomato', avgPrice: 25, emoji: '🍅', name: 'Tomato' },\n    { crop: '🌾 Wheat', avgPrice: 22, emoji: '🌾', name: 'Wheat' },\n    { crop: '🥔 Potato', avgPrice: 12, emoji: '🥔', name: 'Potato' },\n    { crop: '🌽 Maize', avgPrice: 18, emoji: '🌽', name: 'Maize' },\n    { crop: '🌶️ Chili', avgPrice: 80, emoji: '🌶️', name: 'Green Chili' },\n    { crop: '☁️ Cotton', avgPrice: 55, emoji: '☁️', name: 'Cotton' }\n  ];\n\n  const totalEarnings = soldListings.reduce((sum, listing) => sum + listing.soldPrice, 0);\n\n  const handleCreateListing = () => {\n    // Handle form submission logic here\n    console.log('Creating listing:', {\n      crop: selectedCrop,\n      quantity,\n      pricePerKg,\n      needTransport\n    });\n    setShowCreateListingDialog(false);\n    // Reset form\n    setSelectedCrop('');\n    setQuantity('');\n    setPricePerKg('');\n    setNeedTransport(false);\n  };\n\n  const prefillFromMarketPrice = (crop: any) => {\n    setSelectedCrop(crop.name);\n    setPricePerKg(crop.avgPrice.toString());\n    setShowCreateListingDialog(true);\n  };\n\n  return (\n    <div className=\"min-h-screen bg-gradient-to-br from-green-50 to-blue-50 pb-20\">\n      {/* Header - Mobile Optimized */}\n      <div className=\"bg-white shadow-sm border-b border-green-100 sticky top-0 z-10\">\n        <div className=\"px-4 py-3\">\n          <div className=\"flex items-center space-x-3\">\n            <button\n              onClick={() => navigate('/home')}\n              className=\"p-2 hover:bg-gray-100 rounded-xl transition-colors\"\n            >\n              <ArrowLeft className=\"w-5 h-5 text-gray-600\" />\n            </button>\n            <div>\n              <h1 className=\"text-xl font-bold text-gray-900\">My Listings</h1>\n              <p className=\"text-xs text-gray-600\">Manage your crop listings</p>\n            </div>\n          </div>\n        </div>\n      </div>\n\n      {/* Top Section - Mobile Optimized Tabs and Earnings */}\n      <div className=\"px-4 py-4\">\n        <div className=\"flex items-center justify-between mb-4\">\n          {/* Tabs - Mobile Sized */}\n          <div className=\"flex bg-white rounded-2xl p-1 shadow-sm border\">\n            <button\n              onClick={() => setSelectedTab('active')}\n              className={`px-4 py-2.5 rounded-xl font-bold text-sm transition-all ${\n                selectedTab === 'active'\n                  ? 'bg-green-500 text-white shadow-sm'\n                  : 'text-gray-600 hover:text-green-600'\n              }`}\n            >\n              Active\n            </button>\n            <button\n              onClick={() => setSelectedTab('sold')}\n              className={`px-4 py-2.5 rounded-xl font-bold text-sm transition-all ${\n                selectedTab === 'sold'\n                  ? 'bg-green-500 text-white shadow-sm'\n                  : 'text-gray-600 hover:text-green-600'\n              }`}\n            >\n              Sold\n            </button>\n          </div>\n\n          {/* Total Earnings - Mobile Optimized */}\n          <div className=\"text-right bg-green-50 px-3 py-2 rounded-xl border border-green-200\">\n            <p className=\"text-xs text-green-600 font-medium\">Earned</p>\n            <p className=\"text-lg font-bold text-green-700\">₹{totalEarnings.toLocaleString()}</p>\n          </div>\n        </div>\n\n        {/* Listings Section - Mobile Optimized */}\n        <div className=\"space-y-3 mb-6\">\n          {selectedTab === 'active' && (\n            <>\n              {activeListings.map((listing) => (\n                <Card key={listing.id} className=\"bg-white rounded-2xl shadow-sm border border-gray-100\">\n                  <CardContent className=\"p-4\">\n                    {/* Mobile Layout: Vertical Stack */}\n                    <div className=\"flex items-start justify-between mb-3\">\n                      <div className=\"flex items-center space-x-3 flex-1\">\n                        <div className=\"text-3xl\">{listing.crop.split(' ')[0]}</div>\n                        <div className=\"flex-1\">\n                          <h3 className=\"font-bold text-lg text-gray-900 leading-tight\">{listing.crop}</h3>\n                          <p className=\"text-sm text-gray-500\">{listing.quantity} – ₹{listing.pricePerKg}/kg – Transport: {listing.transport}</p>\n                        </div>\n                      </div>\n                    </div>\n                    <div className=\"flex items-center justify-between bg-gray-50 rounded-xl p-3\">\n                      <div className=\"flex items-center space-x-4\">\n                        <div className=\"flex items-center space-x-1 text-blue-600\">\n                          <Eye className=\"w-4 h-4\" />\n                          <span className=\"text-xs font-medium\">{listing.views}</span>\n                        </div>\n                        <div className=\"flex items-center space-x-1 text-orange-600\">\n                          <Clock className=\"w-4 h-4\" />\n                          <span className=\"text-xs font-medium\">{listing.inquiries}</span>\n                        </div>\n                      </div>\n                      <p className=\"text-xs text-gray-500\">{listing.postedDate}</p>\n                    </div>\n                  </CardContent>\n                </Card>\n              ))}\n            </>\n          )}\n\n          {selectedTab === 'sold' && (\n            <>\n              {soldListings.map((listing) => (\n                <Card key={listing.id} className=\"bg-white rounded-2xl shadow-sm border border-gray-100\">\n                  <CardContent className=\"p-4\">\n                    {/* Mobile Layout: Vertical Stack */}\n                    <div className=\"flex items-start justify-between mb-3\">\n                      <div className=\"flex items-center space-x-3 flex-1\">\n                        <div className=\"text-3xl\">{listing.crop.split(' ')[0]}</div>\n                        <div className=\"flex-1\">\n                          <h3 className=\"font-bold text-lg text-gray-900 leading-tight\">{listing.crop}</h3>\n                          <p className=\"text-sm text-gray-500\">{listing.quantity} – ₹{listing.pricePerKg}/kg – Transport: {listing.transport}</p>\n                          <p className=\"text-lg font-bold text-green-600 mt-1\">Earned: ₹{listing.soldPrice.toLocaleString()}</p>\n                        </div>\n                      </div>\n                    </div>\n                    <div className=\"flex items-center justify-between bg-green-50 rounded-xl p-3 border border-green-200\">\n                      <div className=\"flex items-center space-x-2 text-green-600\">\n                        <CheckCircle className=\"w-4 h-4\" />\n                        <span className=\"text-sm font-medium\">Sold to {listing.buyer}</span>\n                      </div>\n                      <p className=\"text-xs text-gray-500\">{new Date(listing.soldDate).toLocaleDateString()}</p>\n                    </div>\n                  </CardContent>\n                </Card>\n              ))}\n            </>\n          )}\n        </div>\n\n        {/* Market Prices Section - Mobile Optimized */}\n        <div className=\"mb-6\">\n          <h2 className=\"text-lg font-bold text-gray-900 mb-3\">Select Crop to Sell</h2>\n          <div className=\"grid grid-cols-2 gap-2\">\n            {marketPrices.map((crop, index) => (\n              <Card \n                key={index}\n                className=\"bg-white rounded-2xl shadow-sm border border-gray-100 cursor-pointer hover:shadow-md transition-shadow active:scale-95\"\n                onClick={() => prefillFromMarketPrice(crop)}\n              >\n                <CardContent className=\"p-3 text-center\">\n                  <div className=\"text-2xl mb-1\">{crop.emoji}</div>\n                  <h3 className=\"font-bold text-sm text-gray-900 truncate\">{crop.name}</h3>\n                  <p className=\"text-green-600 font-bold text-sm\">₹{crop.avgPrice}/kg avg</p>\n                </CardContent>\n              </Card>\n            ))}\n          </div>\n        </div>\n      </div>\n\n      {/* Floating Action Button (FAB) - Mobile Optimized */}\n      <button\n        onClick={() => setShowCreateListingDialog(true)}\n        className=\"fixed bottom-6 right-4 w-14 h-14 bg-green-500 hover:bg-green-600 text-white rounded-full shadow-2xl hover:shadow-3xl transition-all duration-300 flex items-center justify-center group z-50\"\n      >\n        <Plus className=\"w-7 h-7 group-hover:rotate-90 transition-transform duration-300\" />\n      </button>\n\n      {/* Create New Listing Dialog - Mobile Optimized */}\n      <Dialog open={showCreateListingDialog} onOpenChange={setShowCreateListingDialog}>\n        <DialogContent className=\"max-w-sm mx-auto m-4 rounded-2xl\">\n          <DialogHeader className=\"text-center\">\n            <DialogTitle className=\"text-lg font-bold text-gray-900\">Create New Listing</DialogTitle>\n          </DialogHeader>\n          <div className=\"space-y-4 py-2\">\n            {/* Crop Name */}\n            <div>\n              <label className=\"block text-sm font-bold text-gray-700 mb-2\">Crop Name</label>\n              <Select value={selectedCrop} onValueChange={setSelectedCrop}>\n                <SelectTrigger className=\"w-full h-12 text-base\">\n                  <SelectValue placeholder=\"Select crop\" />\n                </SelectTrigger>\n                <SelectContent>\n                  {marketPrices.map((crop) => (\n                    <SelectItem key={crop.name} value={crop.name} className=\"text-base py-3\">\n                      {crop.emoji} {crop.name}\n                    </SelectItem>\n                  ))}\n                </SelectContent>\n              </Select>\n            </div>\n\n            {/* Quantity */}\n            <div>\n              <label className=\"block text-sm font-bold text-gray-700 mb-2\">Quantity (kg)</label>\n              <Input\n                type=\"number\"\n                placeholder=\"Enter quantity\"\n                value={quantity}\n                onChange={(e) => setQuantity(e.target.value)}\n                className=\"w-full h-12 text-base\"\n              />\n            </div>\n\n            {/* Price per kg */}\n            <div>\n              <label className=\"block text-sm font-bold text-gray-700 mb-2\">Price per kg (₹)</label>\n              <Input\n                type=\"number\"\n                placeholder=\"Enter price\"\n                value={pricePerKg}\n                onChange={(e) => setPricePerKg(e.target.value)}\n                className=\"w-full h-12 text-base\"\n              />\n              {selectedCrop && (\n                <p className=\"text-xs text-gray-500 mt-1\">\n                  Market average: ₹{marketPrices.find(p => p.name === selectedCrop)?.avgPrice}/kg\n                </p>\n              )}\n            </div>\n\n            {/* Transport Toggle */}\n            <div className=\"bg-gray-50 rounded-xl p-3\">\n              <div className=\"flex items-center justify-between\">\n                <label className=\"text-sm font-bold text-gray-700\">Need Transport?</label>\n                <div className=\"flex items-center space-x-3\">\n                  <span className={`text-sm font-medium ${!needTransport ? 'text-gray-900' : 'text-gray-500'}`}>No</span>\n                  <Switch\n                    checked={needTransport}\n                    onCheckedChange={setNeedTransport}\n                  />\n                  <span className={`text-sm font-medium ${needTransport ? 'text-gray-900' : 'text-gray-500'}`}>Yes</span>\n                </div>\n              </div>\n            </div>\n\n            {/* Submit Button */}\n            <Button\n              onClick={handleCreateListing}\n              disabled={!selectedCrop || !quantity || !pricePerKg}\n              className=\"w-full py-4 bg-green-500 hover:bg-green-600 text-white font-bold text-lg rounded-2xl h-12 mt-4\"\n            >\n              Create Listing\n            </Button>\n          </div>\n        </DialogContent>\n      </Dialog>\n    </div>\n  );\n};\n\nexport default SellProduce;","size_bytes":14314},"kisan/src/pages/Shop.tsx":{"content":"import { useState, useEffect } from 'react';\nimport { useNavigate } from 'react-router-dom';\nimport { \n  ArrowLeft, \n  Search, \n  Filter, \n  ShoppingCart, \n  Star, \n  Heart,\n  Plus,\n  Minus,\n  Package,\n  Truck,\n  Shield,\n  Zap,\n  Sparkles\n} from 'lucide-react';\nimport { cartManager } from '@/lib/cart';\n\nconst Shop = () => {\n  const navigate = useNavigate();\n  const [searchQuery, setSearchQuery] = useState('');\n  const [selectedCategory, setSelectedCategory] = useState('all');\n  const [cartItems, setCartItems] = useState({});\n  const [wishlist, setWishlist] = useState({});\n  const [cartCount, setCartCount] = useState(0);\n  const [cartTotal, setCartTotal] = useState(0);\n\n  useEffect(() => {\n    updateCartDisplay();\n    const unsubscribe = cartManager.onCartChange(() => {\n      updateCartDisplay();\n    });\n    return unsubscribe;\n  }, []);\n\n  const updateCartDisplay = () => {\n    const cart = cartManager.getCart();\n    const itemCounts = {};\n    cart.forEach(item => {\n      itemCounts[item.id] = item.quantity;\n    });\n    setCartItems(itemCounts);\n    setCartCount(cartManager.getCartCount());\n    setCartTotal(cartManager.getCartTotal());\n  };\n\n  const categories = [\n    { id: 'all', name: 'All Products', icon: Package },\n    { id: 'fertilizers', name: 'Fertilizers', icon: Zap },\n    { id: 'seeds', name: 'Seeds', icon: Package },\n    { id: 'pesticides', name: 'Pesticides', icon: Shield },\n    { id: 'tools', name: 'Tools', icon: Package }\n  ];\n\n  const products = [\n    {\n      id: '1',\n      name: 'Organic NPK Fertilizer',\n      brand: 'FarmGrow',\n      price: 245,\n      originalPrice: 299,\n      rating: 4.5,\n      reviews: 1243,\n      category: 'fertilizers',\n      inStock: true,\n      bestseller: true,\n      organic: true,\n      size: '1kg',\n      features: ['Organic', 'Fast Acting', 'All Crops']\n    },\n    {\n      id: '2',\n      name: 'Tomato Hybrid Seeds',\n      brand: 'SeedMaster',\n      price: 120,\n      originalPrice: 150,\n      rating: 4.8,\n      reviews: 856,\n      category: 'seeds',\n      inStock: true,\n      bestseller: false,\n      organic: false,\n      size: '50g',\n      features: ['Hybrid', 'Disease Resistant', 'High Yield']\n    },\n    {\n      id: '3',\n      name: 'Copper Fungicide Spray',\n      brand: 'CropCare',\n      price: 180,\n      originalPrice: 210,\n      rating: 4.3,\n      reviews: 634,\n      category: 'pesticides',\n      inStock: true,\n      bestseller: false,\n      organic: false,\n      size: '500ml',\n      features: ['Fungicide', 'Long Lasting', 'Safe']\n    },\n    {\n      id: '4',\n      name: 'Premium Garden Spade',\n      brand: 'ToolMaster',\n      price: 350,\n      originalPrice: 420,\n      rating: 4.6,\n      reviews: 432,\n      category: 'tools',\n      inStock: false,\n      bestseller: false,\n      organic: false,\n      size: 'Standard',\n      features: ['Steel', 'Ergonomic', 'Durable']\n    },\n    {\n      id: '5',\n      name: 'Bio Compost Fertilizer',\n      brand: 'EcoGrow',\n      price: 180,\n      originalPrice: 220,\n      rating: 4.7,\n      reviews: 965,\n      category: 'fertilizers',\n      inStock: true,\n      bestseller: true,\n      organic: true,\n      size: '2kg',\n      features: ['Bio-Compost', 'Soil Health', 'Eco-Friendly']\n    }\n  ];\n\n  const filteredProducts = products.filter(product => {\n    const matchesSearch = product.name.toLowerCase().includes(searchQuery.toLowerCase()) ||\n                         product.brand.toLowerCase().includes(searchQuery.toLowerCase());\n    const matchesCategory = selectedCategory === 'all' || product.category === selectedCategory;\n    return matchesSearch && matchesCategory;\n  });\n\n  const addToCart = (productId) => {\n    const product = products.find(p => p.id === productId);\n    if (product) {\n      cartManager.addToCart(product);\n    }\n  };\n\n  const removeFromCart = (productId) => {\n    cartManager.removeFromCart(productId);\n  };\n\n  const toggleWishlist = (productId) => {\n    setWishlist(prev => ({\n      ...prev,\n      [productId]: !prev[productId]\n    }));\n  };\n\n  const getTotalItems = () => {\n    return cartCount;\n  };\n\n  const getDiscountPercentage = (original, current) => {\n    return Math.round(((original - current) / original) * 100);\n  };\n\n  return (\n    <div className=\"min-h-screen bg-gray-50\">\n      {/* Header */}\n      <div className=\"sticky top-0 z-40 bg-white shadow-sm border-b border-gray-100\">\n        <div className=\"flex items-center justify-between px-4 py-4\">\n          <div className=\"flex items-center space-x-3\">\n            <button \n              onClick={() => navigate('/home')}\n              className=\"p-2 -ml-2 hover:bg-gray-100 rounded-full transition-colors\"\n            >\n              <ArrowLeft className=\"w-6 h-6 text-gray-700\" />\n            </button>\n            <h1 className=\"text-xl font-bold text-gray-900\">Shop</h1>\n          </div>\n          \n          <div className=\"relative\">\n            <button \n              onClick={() => navigate('/cart')}\n              className=\"p-2 hover:bg-gray-100 rounded-full transition-colors\"\n            >\n              <ShoppingCart className=\"w-6 h-6 text-gray-700\" />\n              {getTotalItems() > 0 && (\n                <div className=\"absolute -top-1 -right-1 w-5 h-5 bg-red-500 rounded-full flex items-center justify-center\">\n                  <span className=\"text-xs font-bold text-white\">{getTotalItems()}</span>\n                </div>\n              )}\n            </button>\n          </div>\n        </div>\n      </div>\n\n      <div className=\"px-4 py-6 space-y-6 pb-24\">\n        {/* Search Bar */}\n        <div className=\"relative\">\n          <div className=\"absolute inset-y-0 left-0 pl-4 flex items-center pointer-events-none\">\n            <Search className=\"h-5 w-5 text-gray-400\" />\n          </div>\n          <input\n            type=\"text\"\n            placeholder=\"Search fertilizers, seeds, tools...\"\n            value={searchQuery}\n            onChange={(e) => setSearchQuery(e.target.value)}\n            className=\"w-full pl-12 pr-12 py-4 text-base bg-white border border-gray-200 rounded-2xl focus:ring-2 focus:ring-green-500 focus:border-transparent shadow-sm outline-none\"\n          />\n          <div className=\"absolute inset-y-0 right-0 pr-4 flex items-center\">\n            <button className=\"p-1 hover:bg-gray-100 rounded-lg transition-colors\">\n              <Filter className=\"h-5 w-5 text-gray-400\" />\n            </button>\n          </div>\n        </div>\n\n        {/* Category Tabs */}\n        <div className=\"flex space-x-3 overflow-x-auto pb-2\" style={{scrollbarWidth: 'none', msOverflowStyle: 'none'}}>\n          {categories.map((category) => (\n            <button\n              key={category.id}\n              onClick={() => setSelectedCategory(category.id)}\n              className={`flex items-center space-x-2 px-5 py-3 rounded-full whitespace-nowrap font-medium transition-all duration-200 ${\n                selectedCategory === category.id\n                  ? 'bg-green-600 text-white shadow-lg'\n                  : 'bg-white text-gray-600 border border-gray-200 hover:border-green-300 hover:text-green-600'\n              }`}\n            >\n              <category.icon className=\"w-4 h-4\" />\n              <span className=\"text-sm\">{category.name}</span>\n            </button>\n          ))}\n        </div>\n\n        {/* Promo Banner */}\n        <div className=\"relative bg-gradient-to-r from-green-600 to-green-700 rounded-3xl p-6 text-white overflow-hidden\">\n          <div className=\"relative z-10\">\n            <div className=\"flex items-center space-x-2 mb-2\">\n              <Truck className=\"w-5 h-5\" />\n              <span className=\"text-sm font-semibold uppercase tracking-wide\">Free Delivery</span>\n            </div>\n            <h2 className=\"text-2xl font-bold mb-2\">Orders above ₹500</h2>\n            <p className=\"text-green-100 text-sm leading-relaxed\">\n              Get premium agricultural products delivered free to your doorstep.\n            </p>\n          </div>\n          <div className=\"absolute -right-8 -top-8 w-32 h-32 bg-white opacity-10 rounded-full\" />\n          <div className=\"absolute -right-16 -bottom-4 w-24 h-24 bg-white opacity-5 rounded-full\" />\n          <div className=\"absolute right-4 top-4 w-12 h-12 bg-white opacity-10 rounded-full flex items-center justify-center\">\n            <Sparkles className=\"w-6 h-6\" />\n          </div>\n        </div>\n\n        {/* Products Section */}\n        <div className=\"space-y-4\">\n          <div className=\"flex items-center justify-between\">\n            <h2 className=\"text-xl font-bold text-gray-900\">\n              {selectedCategory === 'all' ? 'All Products' : categories.find(c => c.id === selectedCategory)?.name}\n            </h2>\n            <span className=\"text-sm text-gray-500 bg-gray-100 px-3 py-1 rounded-full\">\n              {filteredProducts.length} products\n            </span>\n          </div>\n\n          {/* Product Grid */}\n          <div className=\"space-y-4\">\n            {filteredProducts.map((product) => (\n              <div \n                key={product.id} \n                className=\"bg-white rounded-2xl p-5 shadow-sm border border-gray-100 hover:shadow-md transition-shadow duration-200\"\n              >\n                <div className=\"flex space-x-4\">\n                  {/* Product Image & Labels */}\n                  <div className=\"relative flex-shrink-0\">\n                    <div className=\"w-24 h-24 bg-gray-100 rounded-2xl flex items-center justify-center\">\n                      <Package className=\"w-10 h-10 text-gray-400\" />\n                    </div>\n                    \n                    {/* Labels */}\n                    <div className=\"absolute -top-2 -right-2 space-y-1\">\n                      {product.bestseller && (\n                        <div className=\"bg-orange-500 text-white text-xs px-2 py-1 rounded-full shadow-lg font-medium\">\n                          Bestseller\n                        </div>\n                      )}\n                      {product.organic && (\n                        <div className=\"bg-green-500 text-white text-xs px-2 py-1 rounded-full shadow-lg font-medium\">\n                          Organic\n                        </div>\n                      )}\n                    </div>\n                  </div>\n\n                  {/* Product Info */}\n                  <div className=\"flex-1 min-w-0\">\n                    <div className=\"flex justify-between items-start\">\n                      <div className=\"flex-1 min-w-0\">\n                        <h3 className=\"font-bold text-gray-900 text-base leading-tight mb-1\">\n                          {product.name}\n                        </h3>\n                        <p className=\"text-sm text-gray-500 mb-3\">\n                          {product.brand} • {product.size}\n                        </p>\n                        \n                        {/* Rating */}\n                        <div className=\"flex items-center space-x-2 mb-3\">\n                          <div className=\"flex items-center space-x-1\">\n                            <Star className=\"w-4 h-4 fill-yellow-400 text-yellow-400\" />\n                            <span className=\"text-sm font-semibold text-gray-700\">{product.rating}</span>\n                          </div>\n                          <span className=\"text-sm text-gray-400\">({product.reviews} reviews)</span>\n                        </div>\n\n                        {/* Feature Tags */}\n                        <div className=\"flex flex-wrap gap-2 mb-4\">\n                          {product.features.slice(0, 3).map((feature, index) => (\n                            <span \n                              key={index}\n                              className=\"text-xs px-2 py-1 border border-green-200 text-green-700 bg-green-50 font-medium rounded-full\"\n                            >\n                              {feature}\n                            </span>\n                          ))}\n                        </div>\n\n                        {/* Price */}\n                        <div className=\"flex items-center space-x-3 mb-4\">\n                          <span className=\"text-xl font-bold text-gray-900\">₹{product.price}</span>\n                          <span className=\"text-base text-gray-400 line-through\">₹{product.originalPrice}</span>\n                          <span className=\"bg-green-100 text-green-800 text-xs font-semibold px-2 py-1 rounded-full\">\n                            {getDiscountPercentage(product.originalPrice, product.price)}% OFF\n                          </span>\n                        </div>\n                      </div>\n\n                      {/* Wishlist Button */}\n                      <button\n                        onClick={() => toggleWishlist(product.id)}\n                        className=\"p-2 hover:bg-gray-50 rounded-full transition-colors\"\n                      >\n                        <Heart \n                          className={`w-5 h-5 ${\n                            wishlist[product.id] \n                              ? 'fill-red-500 text-red-500' \n                              : 'text-gray-400 hover:text-red-400'\n                          }`} \n                        />\n                      </button>\n                    </div>\n\n                    {/* Add to Cart Section */}\n                    <div className=\"flex items-center justify-end\">\n                      {product.inStock ? (\n                        <div className=\"flex items-center space-x-3\">\n                          {cartItems[product.id] > 0 ? (\n                            <div className=\"flex items-center space-x-3 bg-gray-50 rounded-full p-1\">\n                              <button\n                                onClick={() => removeFromCart(product.id)}\n                                className=\"w-8 h-8 bg-white rounded-full flex items-center justify-center shadow-sm hover:shadow-md transition-shadow\"\n                              >\n                                <Minus className=\"w-4 h-4 text-gray-600\" />\n                              </button>\n                              <span className=\"font-bold text-gray-900 min-w-[24px] text-center\">\n                                {cartItems[product.id]}\n                              </span>\n                              <button\n                                onClick={() => addToCart(product.id)}\n                                className=\"w-8 h-8 bg-green-600 rounded-full flex items-center justify-center shadow-sm hover:shadow-md transition-shadow\"\n                              >\n                                <Plus className=\"w-4 h-4 text-white\" />\n                              </button>\n                            </div>\n                          ) : (\n                            <button\n                              onClick={() => addToCart(product.id)}\n                              className=\"bg-green-600 hover:bg-green-700 text-white px-6 py-2 rounded-full font-semibold shadow-sm hover:shadow-md transition-all duration-200\"\n                            >\n                              Add to Cart\n                            </button>\n                          )}\n                        </div>\n                      ) : (\n                        <span className=\"text-red-600 border border-red-200 bg-red-50 px-3 py-1 rounded-full text-sm\">\n                          Out of Stock\n                        </span>\n                      )}\n                    </div>\n                  </div>\n                </div>\n              </div>\n            ))}\n          </div>\n        </div>\n      </div>\n\n      {/* Floating Cart Button */}\n      {getTotalItems() > 0 && (\n        <div className=\"fixed bottom-6 left-4 right-4 z-50\">\n          <button \n            onClick={() => navigate('/cart')}\n            className=\"w-full bg-green-600 hover:bg-green-700 text-white py-4 rounded-2xl shadow-2xl flex items-center justify-between text-lg font-bold px-6\"\n          >\n            <span className=\"flex items-center space-x-3\">\n              <ShoppingCart className=\"w-6 h-6\" />\n              <span>View Cart ({getTotalItems()} items)</span>\n            </span>\n            <span>₹{cartTotal}</span>\n          </button>\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default Shop;","size_bytes":16182},"kisan/src/pages/Signup.tsx":{"content":"import React, { useState } from \"react\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Eye, EyeOff, User, Phone, MapPin, Lock, Sprout } from \"lucide-react\";\nimport { toast } from \"@/hooks/use-toast\";\nimport { useNavigate } from \"react-router-dom\";\nimport LanguageSwitcher from '@/components/LanguageSwitcher';\n\nconst indianStates = [\n  \"Andhra Pradesh\", \"Arunachal Pradesh\", \"Assam\", \"Bihar\", \"Chhattisgarh\", \n  \"Goa\", \"Gujarat\", \"Haryana\", \"Himachal Pradesh\", \"Jharkhand\", \"Karnataka\", \n  \"Kerala\", \"Madhya Pradesh\", \"Maharashtra\", \"Manipur\", \"Meghalaya\", \"Mizoram\", \n  \"Nagaland\", \"Odisha\", \"Punjab\", \"Rajasthan\", \"Sikkim\", \"Tamil Nadu\", \n  \"Telangana\", \"Tripura\", \"Uttar Pradesh\", \"Uttarakhand\", \"West Bengal\"\n];\n\nconst Signup = () => {\n  const [formData, setFormData] = useState({\n    name: \"\",\n    mobile: \"\",\n    state: \"\",\n    district: \"\",\n    pin: \"\",\n    confirmPin: \"\"\n  });\n  const [loading, setLoading] = useState(false);\n  const [showPin, setShowPin] = useState(false);\n  const [showConfirmPin, setShowConfirmPin] = useState(false);\n  const navigate = useNavigate();\n\n  const handleInputChange = (field: string, value: string) => {\n    if (field === \"name\") {\n      // Only allow alphabets and spaces\n      value = value.replace(/[^A-Za-z\\s]/g, \"\");\n    }\n    if (field === \"mobile\") {\n      // Only allow digits, max 10\n      value = value.replace(/\\D/g, \"\").slice(0, 10);\n    }\n    if ((field === \"pin\" || field === \"confirmPin\") && value.length > 4) {\n      return;\n    }\n    setFormData(prev => ({ ...prev, [field]: value }));\n  };\n\n  const isFormValid = () => {\n    return formData.name.trim() !== \"\" &&\n           formData.mobile.length === 10 &&\n           formData.state !== \"\" &&\n           formData.district.trim() !== \"\" &&\n           formData.pin.length === 4 &&\n           formData.confirmPin.length === 4 &&\n           formData.pin === formData.confirmPin;\n  };\n\n  const handleSubmit = async (e: React.FormEvent) => {\n    e.preventDefault();\n    \n    if (formData.pin !== formData.confirmPin) {\n      toast({\n        title: \"PIN Mismatch\",\n        description: \"PIN and Confirm PIN must match\",\n        variant: \"destructive\"\n      });\n      return;\n    }\n    \n    if (!isFormValid()) {\n      toast({\n        title: \"Missing Information\",\n        description: \"Please fill all required fields\",\n        variant: \"destructive\"\n      });\n      return;\n    }\n\n    setLoading(true);\n    \n    try {\n      // Simulate API call\n      await new Promise(resolve => setTimeout(resolve, 2000));\n      \n      // Store user data\n      localStorage.setItem('kisanmitra_user', JSON.stringify({\n        name: formData.name,\n        mobile: formData.mobile,\n        state: formData.state,\n        district: formData.district\n      }));\n      \n      toast({\n        title: \"Account Created! 🎉\",\n        description: `Welcome to KisanMitra, ${formData.name}!`,\n      });\n      \n      navigate(\"/home\");\n      \n    } catch (error) {\n      toast({\n        title: \"Registration failed\",\n        description: \"Please try again\",\n        variant: \"destructive\"\n      });\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  return (\n    <div className=\"mobile-container min-h-screen bg-gradient-to-br from-agri-light to-white overflow-y-auto\">\n      {/* Subtle Background Pattern */}\n      <div className=\"absolute inset-0 opacity-5\">\n        <div className=\"absolute inset-0\" style={{\n          backgroundImage: `url(\"data:image/svg+xml,%3Csvg width='40' height='40' viewBox='0 0 40 40' xmlns='http://www.w3.org/2000/svg'%3E%3Cg fill='%23059669' fill-opacity='0.1'%3E%3Cpath d='M20 20c0-5.5-4.5-10-10-10s-10 4.5-10 10 4.5 10 10 10 10-4.5 10-10zm10 0c0-5.5-4.5-10-10-10s-10 4.5-10 10 4.5 10 10 10 10-4.5 10-10z'/%3E%3C/g%3E%3C/svg%3E\")`,\n        }} />\n      </div>\n\n      <div className=\"relative z-10 min-h-screen flex flex-col\">\n        {/* Top Bar */}\n        <div className=\"flex items-center justify-between p-4 bg-white/80 backdrop-blur-sm\">\n          <div className=\"flex items-center space-x-3\">\n            <div className=\"w-10 h-10 bg-agri-primary rounded-xl flex items-center justify-center\">\n              <Sprout className=\"w-6 h-6 text-white\" />\n            </div>\n            <div>\n              <h1 className=\"text-lg font-bold text-agri-primary\">KisanMitra</h1>\n              <p className=\"text-xs text-agri-gray\">Smart Farming Assistant</p>\n            </div>\n          </div>\n          <LanguageSwitcher />\n        </div>\n\n        {/* Header */}\n        <div className=\"text-center px-6 pt-4 pb-6\">\n          <div className=\"w-20 h-20 bg-agri-primary rounded-3xl mx-auto mb-4 flex items-center justify-center shadow-lg\">\n            <Sprout className=\"w-10 h-10 text-white\" />\n          </div>\n          <h1 className=\"text-3xl font-bold text-agri-primary mb-2\">\n            🌱 Join 50,000+ Smart Farmers\n          </h1>\n          <p className=\"text-lg text-agri-gray\">\n            Create your farming account\n          </p>\n        </div>\n\n          {/* Form */}\n          <div className=\"flex-1 px-6\">\n            <div className=\"bg-white rounded-3xl p-6 shadow-large border border-agri-primary/10\">\n              <form onSubmit={handleSubmit} className=\"space-y-5\">\n                {/* Name Field */}\n                <div className=\"space-y-2\">\n                  <label className=\"text-lg font-bold text-agri-primary flex items-center\">\n                    <User className=\"w-6 h-6 mr-3\" />\n                    Full Name\n                  </label>\n                  <Input\n                    type=\"text\"\n                    placeholder=\"Enter your name (alphabets only)\"\n                    value={formData.name}\n                    onChange={(e) => handleInputChange(\"name\", e.target.value)}\n                    className=\"h-16 text-xl rounded-2xl border-2 border-agri-primary/30 focus:border-agri-primary bg-agri-light/30 font-semibold\"\n                  />\n                </div>\n\n                {/* Mobile Field */}\n                <div className=\"space-y-2\">\n                  <label className=\"text-lg font-bold text-agri-primary flex items-center\">\n                    <Phone className=\"w-6 h-6 mr-3\" />\n                    Mobile Number\n                  </label>\n                  <div className=\"relative\">\n                    <div className=\"absolute left-4 top-1/2 transform -translate-y-1/2 bg-agri-light rounded-lg px-3 py-2\">\n                      <span className=\"text-agri-primary font-bold text-lg\">🇮🇳 +91</span>\n                    </div>\n                    <Input\n                      type=\"tel\"\n                      placeholder=\"10 digits only\"\n                      value={formData.mobile}\n                      onChange={(e) => handleInputChange(\"mobile\", e.target.value)}\n                      maxLength={10}\n                      className=\"pl-24 h-16 text-xl rounded-2xl border-2 border-agri-primary/30 focus:border-agri-primary bg-agri-light/30 font-bold text-center tracking-wider\"\n                    />\n                  </div>\n                </div>\n\n                {/* State Field */}\n                <div className=\"space-y-2\">\n                  <label className=\"text-lg font-bold text-agri-primary flex items-center\">\n                    <MapPin className=\"w-6 h-6 mr-3\" />\n                    State\n                  </label>\n                  <Select onValueChange={(value) => handleInputChange(\"state\", value)}>\n                    <SelectTrigger className=\"h-16 text-xl rounded-2xl border-2 border-agri-primary/30 focus:border-agri-primary bg-agri-light/30 font-semibold\">\n                      <SelectValue placeholder=\"Select your state\" />\n                    </SelectTrigger>\n                    <SelectContent className=\"bg-white border border-agri-primary/20 shadow-large rounded-lg max-h-48\">\n                      {indianStates.map((state) => (\n                        <SelectItem \n                          key={state} \n                          value={state}\n                          className=\"text-lg py-3 px-4 hover:bg-agri-light\"\n                        >\n                          {state}\n                        </SelectItem>\n                      ))}\n                    </SelectContent>\n                  </Select>\n                </div>\n\n                {/* District Field */}\n                <div className=\"space-y-2\">\n                  <label className=\"text-lg font-bold text-agri-primary flex items-center\">\n                    <MapPin className=\"w-6 h-6 mr-3\" />\n                    District\n                  </label>\n                  <Input\n                    type=\"text\"\n                    placeholder=\"Enter your district name\"\n                    value={formData.district}\n                    onChange={(e) => handleInputChange(\"district\", e.target.value)}\n                    className=\"h-16 text-xl rounded-2xl border-2 border-agri-primary/30 focus:border-agri-primary bg-agri-light/30 font-semibold\"\n                  />\n                </div>\n\n                {/* PIN Fields */}\n                <div className=\"grid grid-cols-1 gap-4\">\n                  {/* PIN */}\n                  <div className=\"space-y-2\">\n                    <label className=\"text-lg font-bold text-agri-primary flex items-center\">\n                      <Lock className=\"w-6 h-6 mr-3\" />\n                      4-Digit PIN\n                    </label>\n                    <div className=\"relative\">\n                      <Input\n                        type={showPin ? \"text\" : \"password\"}\n                        placeholder=\"Create PIN\"\n                        value={formData.pin}\n                        onChange={(e) => handleInputChange(\"pin\", e.target.value)}\n                        maxLength={4}\n                        className=\"pr-16 h-16 text-2xl rounded-2xl border-2 border-agri-primary/30 focus:border-agri-primary bg-agri-light/30 font-bold text-center tracking-[0.8em]\"\n                      />\n                      <button\n                        type=\"button\"\n                        onClick={() => setShowPin(!showPin)}\n                        className=\"absolute right-4 top-1/2 transform -translate-y-1/2 p-2\"\n                      >\n                        {showPin ? (\n                          <EyeOff className=\"w-6 h-6 text-agri-primary\" />\n                        ) : (\n                          <Eye className=\"w-6 h-6 text-agri-primary\" />\n                        )}\n                      </button>\n                    </div>\n                  </div>\n\n                  {/* Confirm PIN */}\n                  <div className=\"space-y-2\">\n                    <label className=\"text-lg font-bold text-agri-primary flex items-center\">\n                      <Lock className=\"w-6 h-6 mr-3\" />\n                      Confirm PIN\n                    </label>\n                    <div className=\"relative\">\n                      <Input\n                        type={showConfirmPin ? \"text\" : \"password\"}\n                        placeholder=\"Confirm PIN\"\n                        value={formData.confirmPin}\n                        onChange={(e) => handleInputChange(\"confirmPin\", e.target.value)}\n                        maxLength={4}\n                        className=\"pr-16 h-16 text-2xl rounded-2xl border-2 border-agri-primary/30 focus:border-agri-primary bg-agri-light/30 font-bold text-center tracking-[0.8em]\"\n                      />\n                      <button\n                        type=\"button\"\n                        onClick={() => setShowConfirmPin(!showConfirmPin)}\n                        className=\"absolute right-4 top-1/2 transform -translate-y-1/2 p-2\"\n                      >\n                        {showConfirmPin ? (\n                          <EyeOff className=\"w-6 h-6 text-agri-primary\" />\n                        ) : (\n                          <Eye className=\"w-6 h-6 text-agri-primary\" />\n                        )}\n                      </button>\n                    </div>\n                  </div>\n                </div>\n\n                {/* Submit Button */}\n                <Button\n                  type=\"submit\"\n                  disabled={!isFormValid() || loading}\n                  className=\"w-full h-20 bg-agri-primary hover:bg-agri-secondary text-white font-bold text-2xl rounded-2xl shadow-large mt-6 disabled:opacity-50\"\n                >\n                  {loading ? (\n                    <div className=\"flex items-center space-x-3\">\n                      <div className=\"w-8 h-8 border-4 border-white border-t-transparent rounded-full animate-spin\" />\n                      <span>Creating Account...</span>\n                    </div>\n                  ) : (\n                    <div className=\"flex items-center space-x-3\">\n                      <Sprout className=\"w-8 h-8\" />\n                      <span>Create My Account</span>\n                    </div>\n                  )}\n                </Button>\n              </form>\n            </div>\n\n            {/* Login Link */}\n            <div className=\"text-center mt-6 mb-6\">\n              <button\n                onClick={() => navigate('/login')}\n                className=\"text-agri-primary font-bold text-xl hover:text-agri-secondary transition-colors\"\n              >\n                Already have an account? Login →\n              </button>\n            </div>\n          </div>\n      </div>\n    </div>\n  );\n};\n\nexport default Signup;","size_bytes":13518},"kisan/src/pages/SoilHealth.tsx":{"content":"import { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Progress } from \"@/components/ui/progress\";\nimport { ArrowLeft, Share2, RefreshCw, Droplets, Beaker, Leaf } from \"lucide-react\";\nimport { useNavigate } from \"react-router-dom\";\n\ninterface SoilParameter {\n  name: string;\n  value: string | number;\n  status: 'good' | 'warning' | 'poor';\n  interpretation: string;\n  icon: string;\n}\n\nconst SoilHealth = () => {\n  const navigate = useNavigate();\n\n  // Soil health data\n  const overallStatus = 'warning'; // 'good', 'warning', 'poor'\n  const soilParameters: SoilParameter[] = [\n    {\n      name: \"pH Level\",\n      value: 6.5,\n      status: 'good',\n      interpretation: \"Neutral ✅\",\n      icon: \"🧪\"\n    },\n    {\n      name: \"Moisture\",\n      value: \"18%\",\n      status: 'warning',\n      interpretation: \"Low ⚠️\",\n      icon: \"💧\"\n    },\n    {\n      name: \"Nitrogen (N)\",\n      value: \"Medium\",\n      status: 'good',\n      interpretation: \"Adequate ✅\",\n      icon: \"🌿\"\n    },\n    {\n      name: \"Phosphorus (P)\",\n      value: \"Low\",\n      status: 'poor',\n      interpretation: \"Needs boost ❌\",\n      icon: \"🌾\"\n    },\n    {\n      name: \"Potassium (K)\",\n      value: \"High\",\n      status: 'good',\n      interpretation: \"Excellent ✅\",\n      icon: \"🌱\"\n    }\n  ];\n\n  // NPK data for chart\n  const npkData = [\n    { name: 'Nitrogen', value: 65, color: 'bg-green-500' },\n    { name: 'Phosphorus', value: 30, color: 'bg-red-500' },\n    { name: 'Potassium', value: 85, color: 'bg-blue-500' }\n  ];\n\n  // Moisture trend data (last 7 days)\n  const moistureTrend = [\n    { day: 'Mon', moisture: 22 },\n    { day: 'Tue', moisture: 20 },\n    { day: 'Wed', moisture: 18 },\n    { day: 'Thu', moisture: 16 },\n    { day: 'Fri', moisture: 18 },\n    { day: 'Sat', moisture: 17 },\n    { day: 'Sun', moisture: 18 }\n  ];\n\n  const getStatusColor = (status: string) => {\n    switch (status) {\n      case 'good': return 'bg-green-100 text-green-800 border-green-200';\n      case 'warning': return 'bg-yellow-100 text-yellow-800 border-yellow-200';\n      case 'poor': return 'bg-red-100 text-red-800 border-red-200';\n      default: return 'bg-gray-100 text-gray-800 border-gray-200';\n    }\n  };\n\n  const getOverallStatusIcon = () => {\n    switch (overallStatus) {\n      case 'good': return '🌱';\n      case 'warning': return '⚠️';\n      case 'poor': return '❌';\n      default: return '🌱';\n    }\n  };\n\n  const getOverallStatusText = () => {\n    switch (overallStatus) {\n      case 'good': return 'Healthy';\n      case 'warning': return 'Needs Attention';\n      case 'poor': return 'Poor';\n      default: return 'Unknown';\n    }\n  };\n\n  return (\n    <div className=\"min-h-screen bg-gradient-to-b from-green-50 to-white\">\n      {/* Header */}\n      <div className=\"flex items-center justify-between p-4 bg-white shadow-sm\">\n        <Button\n          variant=\"ghost\"\n          size=\"sm\"\n          onClick={() => navigate('/home')}\n          className=\"text-green-700 hover:text-green-800\"\n        >\n          <ArrowLeft className=\"w-4 h-4 mr-2\" />\n          Back to Home\n        </Button>\n        <h1 className=\"text-lg font-semibold text-green-900\">Soil Health</h1>\n        <div className=\"w-20\" /> {/* Spacer for center alignment */}\n      </div>\n\n      <div className=\"p-4 space-y-6\">\n        {/* Top Section - Overview Card */}\n        <Card className={`${getStatusColor(overallStatus)} border-2`}>\n          <CardContent className=\"p-6\">\n            <div className=\"flex items-center justify-between\">\n              <div>\n                <h2 className=\"text-xl font-bold mb-2\">Your Soil Health Today</h2>\n                <div className=\"flex items-center gap-2\">\n                  <span className=\"text-3xl\">{getOverallStatusIcon()}</span>\n                  <span className=\"text-2xl font-bold\">{getOverallStatusText()}</span>\n                </div>\n              </div>\n              <div className=\"text-right\">\n                <div className=\"text-sm opacity-75\">Last Updated</div>\n                <div className=\"font-semibold\">Today, 2:30 PM</div>\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n\n        {/* Soil Data Section */}\n        <div className=\"space-y-4\">\n          <h3 className=\"text-lg font-semibold text-green-900 flex items-center gap-2\">\n            <Beaker className=\"w-5 h-5\" />\n            Soil Parameters\n          </h3>\n          \n          <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n            {soilParameters.map((param, index) => (\n              <Card key={index} className=\"hover:shadow-md transition-shadow\">\n                <CardContent className=\"p-4\">\n                  <div className=\"flex items-center justify-between mb-2\">\n                    <div className=\"flex items-center gap-2\">\n                      <span className=\"text-lg\">{param.icon}</span>\n                      <span className=\"font-semibold text-gray-900\">{param.name}</span>\n                    </div>\n                    <Badge className={getStatusColor(param.status)}>\n                      {param.value}\n                    </Badge>\n                  </div>\n                  <div className=\"text-sm text-gray-600\">\n                    {param.interpretation}\n                  </div>\n                </CardContent>\n              </Card>\n            ))}\n          </div>\n        </div>\n\n        {/* Visualization Section */}\n        <div className=\"space-y-6\">\n          <h3 className=\"text-lg font-semibold text-green-900 flex items-center gap-2\">\n            <Leaf className=\"w-5 h-5\" />\n            Nutrient Analysis\n          </h3>\n\n          {/* NPK Bar Chart */}\n          <Card>\n            <CardHeader>\n              <CardTitle className=\"text-base\">N-P-K Levels</CardTitle>\n            </CardHeader>\n            <CardContent>\n              <div className=\"space-y-4\">\n                {npkData.map((nutrient, index) => (\n                  <div key={index} className=\"space-y-2\">\n                    <div className=\"flex justify-between text-sm\">\n                      <span className=\"font-medium\">{nutrient.name}</span>\n                      <span className=\"text-gray-600\">{nutrient.value}%</span>\n                    </div>\n                    <Progress value={nutrient.value} className=\"h-3\" />\n                  </div>\n                ))}\n              </div>\n            </CardContent>\n          </Card>\n\n          {/* Moisture Trend Chart */}\n          <Card>\n            <CardHeader>\n              <CardTitle className=\"text-base flex items-center gap-2\">\n                <Droplets className=\"w-4 h-4\" />\n                Moisture Trend (Last 7 Days)\n              </CardTitle>\n            </CardHeader>\n            <CardContent>\n              <div className=\"flex items-end justify-between h-32 gap-2\">\n                {moistureTrend.map((data, index) => (\n                  <div key={index} className=\"flex-1 flex flex-col items-center\">\n                    <div \n                      className=\"w-full bg-blue-500 rounded-t-lg mb-2 transition-all duration-300 hover:bg-blue-600\"\n                      style={{ height: `${(data.moisture / 25) * 100}%` }}\n                    />\n                    <div className=\"text-xs font-medium text-gray-600\">{data.day}</div>\n                    <div className=\"text-xs text-gray-500\">{data.moisture}%</div>\n                  </div>\n                ))}\n              </div>\n            </CardContent>\n          </Card>\n        </div>\n\n        {/* Recommendations Section */}\n        <Card>\n          <CardHeader>\n            <CardTitle className=\"text-lg text-green-900\">🎯 Recommendations</CardTitle>\n          </CardHeader>\n          <CardContent className=\"space-y-4\">\n            <div className=\"space-y-3\">\n              <div className=\"p-3 bg-blue-50 rounded-lg border-l-4 border-blue-500\">\n                <div className=\"font-semibold text-blue-900\">Fertilizer Guidance</div>\n                <div className=\"text-blue-700\">Apply Phosphorus-rich fertilizer: 40kg/acre</div>\n              </div>\n              \n              <div className=\"p-3 bg-cyan-50 rounded-lg border-l-4 border-cyan-500\">\n                <div className=\"font-semibold text-cyan-900\">Irrigation Tip</div>\n                <div className=\"text-cyan-700\">Increase watering - irrigate once every 2 days</div>\n              </div>\n              \n              <div className=\"p-3 bg-green-50 rounded-lg border-l-4 border-green-500\">\n                <div className=\"font-semibold text-green-900\">Crop Suggestion</div>\n                <div className=\"text-green-700\">Best crops for current soil: Wheat, Barley, Mustard</div>\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n\n        {/* Action Section */}\n        <div className=\"flex flex-col sm:flex-row gap-3\">\n          <Button \n            className=\"flex-1 bg-green-600 hover:bg-green-700 text-white\"\n            onClick={() => {/* Handle update soil data */}}\n          >\n            <RefreshCw className=\"w-4 h-4 mr-2\" />\n            Update Soil Data\n          </Button>\n          \n          <Button \n            variant=\"outline\" \n            className=\"flex-1 border-green-600 text-green-600 hover:bg-green-50\"\n            onClick={() => {/* Handle share report */}}\n          >\n            <Share2 className=\"w-4 h-4 mr-2\" />\n            Share Report\n          </Button>\n        </div>\n\n        {/* Bottom spacing for mobile */}\n        <div className=\"h-6\" />\n      </div>\n    </div>\n  );\n};\n\nexport default SoilHealth;","size_bytes":9636},"kisan/src/pages/Splash.tsx":{"content":"import { useEffect, useState } from 'react';\nimport { useNavigate } from 'react-router-dom';\nimport { Sprout, Sparkles } from 'lucide-react';\nimport splashBg from '@/assets/splash-bg.jpg';\nimport logo from '@/assets/logo.png';\n\nconst Splash = () => {\n  const navigate = useNavigate();\n  const [seedlingGrown, setSeedlingGrown] = useState(false);\n  const [textVisible, setTextVisible] = useState(false);\n  const [taglineVisible, setTaglineVisible] = useState(false);\n\n  useEffect(() => {\n    // Animate seedling growth\n    setTimeout(() => setSeedlingGrown(true), 500);\n    \n    // Show brand text\n    setTimeout(() => setTextVisible(true), 1000);\n    \n    // Show tagline with typewriter effect\n    setTimeout(() => setTaglineVisible(true), 1500);\n    \n    // Navigate to onboarding after animation\n    setTimeout(() => {\n      const hasSeenOnboarding = localStorage.getItem('kisanmitra_onboarding_seen');\n      if (hasSeenOnboarding) {\n        navigate('/login');\n      } else {\n        navigate('/onboarding');\n      }\n    }, 3500);\n  }, [navigate]);\n\n  return (\n    <div className=\"mobile-container relative overflow-hidden\">\n      {/* Background with animated gradient */}\n      <div \n        className=\"absolute inset-0 gradient-splash\"\n        style={{\n          backgroundImage: `linear-gradient(135deg, rgba(16, 185, 129, 0.9), rgba(4, 120, 87, 0.9)), url(${splashBg})`,\n          backgroundSize: 'cover',\n          backgroundPosition: 'center',\n        }}\n      />\n      \n      {/* Floating particles animation */}\n      <div className=\"absolute inset-0 overflow-hidden\">\n        {[...Array(20)].map((_, i) => (\n          <div\n            key={i}\n            className=\"absolute bg-white/20 rounded-full animate-pulse\"\n            style={{\n              width: Math.random() * 8 + 4 + 'px',\n              height: Math.random() * 8 + 4 + 'px',\n              left: Math.random() * 100 + '%',\n              top: Math.random() * 100 + '%',\n              animationDelay: Math.random() * 3 + 's',\n              animationDuration: (Math.random() * 3 + 2) + 's',\n            }}\n          />\n        ))}\n      </div>\n\n      {/* Content */}\n      <div className=\"relative z-10 flex flex-col items-center justify-center min-h-screen px-8 text-center\">\n        {/* Logo and Seedling Animation */}\n        <div className=\"mb-8 relative\">\n          <div className={`transition-all duration-1000 transform ${seedlingGrown ? 'scale-100 rotate-0' : 'scale-0 -rotate-180'}`}>\n            <div className=\"relative\">\n              <img src={logo} alt=\"KisanMitra\" className=\"w-24 h-24 mx-auto mb-4 drop-shadow-lg\" />\n              \n              {/* Sparkle effects around logo */}\n              <div className=\"absolute -top-2 -right-2\">\n                <Sparkles className=\"w-6 h-6 text-yellow-300 animate-pulse\" />\n              </div>\n              <div className=\"absolute -bottom-2 -left-2\">\n                <Sparkles className=\"w-4 h-4 text-yellow-200 animate-pulse\" style={{ animationDelay: '0.5s' }} />\n              </div>\n            </div>\n          </div>\n        </div>\n\n        {/* Brand Name */}\n        <div className={`mb-4 transition-all duration-800 transform ${textVisible ? 'opacity-100 translate-y-0' : 'opacity-0 translate-y-4'}`}>\n          <h1 className=\"text-5xl font-bold text-white mb-2 tracking-tight\">\n            KisanMitra\n          </h1>\n          <div className=\"w-24 h-1 bg-white/60 mx-auto rounded-full shadow-glow\" />\n        </div>\n\n        {/* Tagline with typewriter effect */}\n        <div className={`mb-12 transition-all duration-800 ${taglineVisible ? 'opacity-100' : 'opacity-0'}`}>\n          <p className=\"text-xl text-white/90 font-medium tracking-wide\">\n            <span className={`inline-block ${taglineVisible ? 'animate-typing' : ''}`}>\n              Your Smart Farming Companion\n            </span>\n          </p>\n        </div>\n\n        {/* Growing seedling animation at bottom */}\n        <div className=\"absolute bottom-20 left-1/2 transform -translate-x-1/2\">\n          <div className={`transition-all duration-2000 transform ${seedlingGrown ? 'scale-100 opacity-100' : 'scale-0 opacity-0'}`}>\n            <Sprout className=\"w-8 h-8 text-green-200 animate-bounce\" style={{ animationDelay: '2s' }} />\n          </div>\n        </div>\n\n        {/* Subtle loading indicator */}\n        <div className=\"absolute bottom-8 left-1/2 transform -translate-x-1/2\">\n          <div className=\"flex space-x-2\">\n            {[...Array(3)].map((_, i) => (\n              <div\n                key={i}\n                className=\"w-2 h-2 bg-white/60 rounded-full animate-pulse\"\n                style={{ animationDelay: i * 0.2 + 's' }}\n              />\n            ))}\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default Splash;","size_bytes":4784},"kisan/src/pages/Treatments.tsx":{"content":"import { useState } from 'react';\nimport { \n  Plus, \n  ChevronDown, \n  ChevronUp,\n  Calendar,\n  AlertCircle,\n  CheckCircle,\n  Camera,\n  Edit3,\n  Mic,\n  Globe,\n  TrendingUp,\n  Droplets,\n  Bug,\n  Leaf,\n  Clock,\n  ChevronRight,\n  Check,\n  X\n} from 'lucide-react';\n\nconst ActiveTreatments = () => {\n  const [expandedCards, setExpandedCards] = useState([]);\n  const [selectedLanguage, setSelectedLanguage] = useState('en');\n  const [activeFilter, setActiveFilter] = useState('active'); // 'active', 'completed', or 'all'\n  \n  const languages = {\n    en: { label: 'English', flag: '🇬🇧' },\n    hi: { label: 'हिन्दी', flag: '🇮🇳' },\n    ta: { label: 'தமிழ்', flag: '🇮🇳' }\n  };\n\n  const allTreatments = [\n    {\n      id: 1,\n      cropName: 'Tomato',\n      disease: 'Early Blight',\n      severity: 'moderate',\n      startDate: '2025-08-28',\n      totalDays: 21,\n      currentDay: 8,\n      status: 'active',\n      nextAction: {\n        title: 'Apply fungicide spray',\n        dueTime: 'Tomorrow, 6:00 AM',\n        overdue: false\n      },\n      products: [\n        { name: 'Copper Fungicide', used: 65, total: 100, unit: 'ml', icon: '💧' },\n        { name: 'Bio Booster', used: 30, total: 50, unit: 'ml', icon: '🌱' }\n      ],\n      notes: 'Leaves showing improvement after first application',\n      photos: 2\n    },\n    {\n      id: 2,\n      cropName: 'Rice Paddy',\n      disease: 'Leaf Blast',\n      severity: 'high',\n      startDate: '2025-08-25',\n      totalDays: 14,\n      currentDay: 11,\n      status: 'active',\n      nextAction: {\n        title: 'Final fungicide application',\n        dueTime: 'Overdue by 2 days',\n        overdue: true\n      },\n      products: [\n        { name: 'Tricyclazole', used: 80, total: 100, unit: 'g', icon: '💊' },\n        { name: 'Sticker Solution', used: 45, total: 50, unit: 'ml', icon: '💧' }\n      ],\n      notes: 'Disease progression stopped, new growth appearing healthy',\n      photos: 4\n    },\n    {\n      id: 3,\n      cropName: 'Chili',\n      disease: 'Powdery Mildew',\n      severity: 'low',\n      startDate: '2025-09-01',\n      totalDays: 10,\n      currentDay: 4,\n      status: 'active',\n      nextAction: {\n        title: 'Apply neem oil spray',\n        dueTime: 'Today, 5:30 PM',\n        overdue: false\n      },\n      products: [\n        { name: 'Neem Oil', used: 20, total: 100, unit: 'ml', icon: '🌿' }\n      ],\n      notes: 'Early detection, expecting quick recovery',\n      photos: 1\n    },\n    {\n      id: 4,\n      cropName: 'Wheat',\n      disease: 'Rust Disease',\n      severity: 'moderate',\n      startDate: '2025-08-15',\n      totalDays: 18,\n      currentDay: 18,\n      status: 'completed',\n      completedDate: '2025-09-02',\n      products: [\n        { name: 'Rust Fungicide', used: 100, total: 100, unit: 'ml', icon: '💧' }\n      ],\n      notes: 'Treatment completed successfully, crop recovered fully',\n      photos: 6\n    },\n    {\n      id: 5,\n      cropName: 'Cotton',\n      disease: 'Bollworm Attack',\n      severity: 'high',\n      startDate: '2025-08-10',\n      totalDays: 12,\n      currentDay: 12,\n      status: 'completed',\n      completedDate: '2025-08-22',\n      products: [\n        { name: 'Bt Pesticide', used: 150, total: 150, unit: 'ml', icon: '🐛' },\n        { name: 'Growth Booster', used: 75, total: 75, unit: 'ml', icon: '🌱' }\n      ],\n      notes: 'Excellent results, pest control achieved',\n      photos: 8\n    }\n  ];\n\n  // Filter treatments based on active filter\n  const treatments = allTreatments.filter(treatment => {\n    if (activeFilter === 'all') return true;\n    return treatment.status === activeFilter;\n  });\n\n  const summaryData = {\n    active: allTreatments.filter(t => t.status === 'active').length,\n    completed: allTreatments.filter(t => t.status === 'completed').length,\n    successRate: 87\n  };\n\n  const toggleExpand = (id) => {\n    setExpandedCards(prev => \n      prev.includes(id) \n        ? prev.filter(cardId => cardId !== id)\n        : [...prev, id]\n    );\n  };\n\n  const getSeverityStyle = (severity) => {\n    switch(severity) {\n      case 'low':\n        return 'bg-green-100 text-green-700 border-green-300';\n      case 'moderate':\n        return 'bg-yellow-100 text-yellow-700 border-yellow-300';\n      case 'high':\n        return 'bg-red-100 text-red-700 border-red-300';\n      default:\n        return 'bg-gray-100 text-gray-700';\n    }\n  };\n\n  const getProgressPercentage = (current, total) => {\n    return Math.round((current / total) * 100);\n  };\n\n  return (\n    <div className=\"min-h-screen bg-gray-50\">\n      {/* Header */}\n      <div className=\"bg-white shadow-sm sticky top-0 z-10\">\n        <div className=\"px-6 py-4\">\n          <div className=\"flex justify-between items-center\">\n            <h1 className=\"text-2xl font-bold text-gray-900\">Active Treatments</h1>\n            <div className=\"flex items-center space-x-2\">\n              <button className=\"p-3 hover:bg-gray-100 rounded-full transition-colors\">\n                <Mic className=\"w-5 h-5 text-gray-600\" />\n              </button>\n              <button className=\"flex items-center space-x-2 px-4 py-2 bg-gray-100 rounded-full\">\n                <span className=\"text-lg\">{languages[selectedLanguage].flag}</span>\n                <span className=\"text-sm font-medium text-gray-700\">{languages[selectedLanguage].label}</span>\n              </button>\n            </div>\n          </div>\n        </div>\n      </div>\n\n      {/* Summary Strip with Filter Buttons */}\n      <div className=\"px-6 py-6\">\n        <div className=\"grid grid-cols-3 gap-4\">\n          <button \n            onClick={() => setActiveFilter('active')}\n            className={`rounded-2xl p-4 transition-all duration-200 ${\n              activeFilter === 'active' \n                ? 'bg-blue-100 border-2 border-blue-400 shadow-lg' \n                : 'bg-blue-50 border border-blue-200 hover:bg-blue-100'\n            }`}\n          >\n            <div className=\"text-center\">\n              <div className=\"w-12 h-12 bg-blue-500 rounded-xl flex items-center justify-center mx-auto mb-3\">\n                <Leaf className=\"w-6 h-6 text-white\" />\n              </div>\n              <p className=\"text-sm font-medium text-blue-600 mb-1\">Active</p>\n              <p className=\"text-2xl font-bold text-blue-700\">{summaryData.active}</p>\n            </div>\n          </button>\n          \n          <button \n            onClick={() => setActiveFilter('completed')}\n            className={`rounded-2xl p-4 transition-all duration-200 ${\n              activeFilter === 'completed' \n                ? 'bg-green-100 border-2 border-green-400 shadow-lg' \n                : 'bg-green-50 border border-green-200 hover:bg-green-100'\n            }`}\n          >\n            <div className=\"text-center\">\n              <div className=\"w-12 h-12 bg-green-500 rounded-xl flex items-center justify-center mx-auto mb-3\">\n                <CheckCircle className=\"w-6 h-6 text-white\" />\n              </div>\n              <p className=\"text-sm font-medium text-green-600 mb-1\">Completed</p>\n              <p className=\"text-2xl font-bold text-green-700\">{summaryData.completed}</p>\n            </div>\n          </button>\n          \n          <button \n            onClick={() => setActiveFilter('all')}\n            className={`rounded-2xl p-4 transition-all duration-200 ${\n              activeFilter === 'all' \n                ? 'bg-purple-100 border-2 border-purple-400 shadow-lg' \n                : 'bg-purple-50 border border-purple-200 hover:bg-purple-100'\n            }`}\n          >\n            <div className=\"text-center\">\n              <div className=\"w-12 h-12 bg-purple-500 rounded-xl flex items-center justify-center mx-auto mb-3\">\n                <TrendingUp className=\"w-6 h-6 text-white\" />\n              </div>\n              <p className=\"text-sm font-medium text-purple-600 mb-1\">All</p>\n              <p className=\"text-2xl font-bold text-purple-700\">{summaryData.active + summaryData.completed}</p>\n            </div>\n          </button>\n        </div>\n      </div>\n\n      {/* Treatment Cards */}\n      <div className=\"px-6 pb-24 space-y-6\">\n        {treatments.map(treatment => {\n          const isExpanded = expandedCards.includes(treatment.id);\n          const progress = getProgressPercentage(treatment.currentDay, treatment.totalDays);\n          const isCompleted = treatment.status === 'completed';\n          \n          return (\n            <div key={treatment.id} className={`bg-white rounded-3xl shadow-md border overflow-hidden ${\n              isCompleted ? 'border-green-200 bg-green-50/30' : 'border-gray-100'\n            }`}>\n              {/* Main Card Content */}\n              <div className=\"p-6\">\n                {/* Header Row */}\n                <div className=\"flex justify-between items-start mb-4\">\n                  <div className=\"flex-1\">\n                    <div className=\"flex items-center space-x-3 mb-2\">\n                      <h3 className=\"text-xl font-bold text-gray-900\">{treatment.cropName}</h3>\n                      <span className={`px-3 py-1 text-xs font-bold rounded-full border ${getSeverityStyle(treatment.severity)} uppercase tracking-wide`}>\n                        {treatment.severity}\n                      </span>\n                    </div>\n                    <p className=\"text-base text-gray-600 font-medium\">{treatment.disease}</p>\n                  </div>\n                  <button\n                    onClick={() => toggleExpand(treatment.id)}\n                    className=\"p-3 hover:bg-gray-100 rounded-full transition-colors\"\n                  >\n                    {isExpanded ? (\n                      <ChevronUp className=\"w-6 h-6 text-gray-500\" />\n                    ) : (\n                      <ChevronDown className=\"w-6 h-6 text-gray-500\" />\n                    )}\n                  </button>\n                </div>\n\n                {/* Progress Bar */}\n                <div className=\"mb-6\">\n                  <div className=\"flex justify-between items-center mb-3\">\n                    <span className=\"text-sm font-medium text-gray-600\">\n                      Day {treatment.currentDay} of {treatment.totalDays}\n                    </span>\n                    <span className=\"text-sm font-bold text-gray-800\">{progress}% Complete</span>\n                  </div>\n                  <div className=\"w-full h-3 bg-gray-200 rounded-full overflow-hidden\">\n                    <div \n                      className=\"h-full bg-gradient-to-r from-green-400 to-green-500 rounded-full transition-all duration-500\"\n                      style={{ width: `${progress}%` }}\n                    />\n                  </div>\n                </div>\n\n                {/* Next Action or Completion Status */}\n                {isCompleted ? (\n                  <div className=\"p-5 rounded-2xl bg-green-50 border-2 border-green-200\">\n                    <div className=\"flex items-center space-x-3\">\n                      <div className=\"w-10 h-10 rounded-xl flex items-center justify-center bg-green-100\">\n                        <CheckCircle className=\"w-5 h-5 text-green-600\" />\n                      </div>\n                      <div className=\"flex-1\">\n                        <p className=\"text-sm font-bold text-gray-900 mb-1\">Treatment Completed</p>\n                        <p className=\"text-base font-medium text-green-800 mb-2\">Successfully treated on {treatment.completedDate}</p>\n                        <p className=\"text-sm text-green-700 font-medium\">\n                          ✓ 100% Progress Complete\n                        </p>\n                      </div>\n                    </div>\n                  </div>\n                ) : (\n                  <div className={`p-5 rounded-2xl ${treatment.nextAction.overdue ? 'bg-orange-50 border-2 border-orange-200' : 'bg-blue-50 border-2 border-blue-100'}`}>\n                    <div className=\"flex items-start justify-between mb-4\">\n                      <div className=\"flex items-start space-x-3 flex-1\">\n                        <div className={`w-10 h-10 rounded-xl flex items-center justify-center ${treatment.nextAction.overdue ? 'bg-orange-100' : 'bg-blue-100'}`}>\n                          <Clock className={`w-5 h-5 ${treatment.nextAction.overdue ? 'text-orange-600' : 'text-blue-600'}`} />\n                        </div>\n                        <div className=\"flex-1\">\n                          <p className=\"text-sm font-bold text-gray-900 mb-1\">Next Action</p>\n                          <p className=\"text-base font-medium text-gray-800 mb-2\">{treatment.nextAction.title}</p>\n                          <p className=\"text-sm text-gray-600\">\n                            {treatment.nextAction.overdue && (\n                              <span className=\"inline-flex items-center space-x-2 text-orange-700 font-medium\">\n                                <AlertCircle className=\"w-4 h-4\" />\n                                <span>{treatment.nextAction.dueTime}</span>\n                              </span>\n                            )}\n                            {!treatment.nextAction.overdue && (\n                              <span className=\"text-blue-700 font-medium\">{treatment.nextAction.dueTime}</span>\n                            )}\n                          </p>\n                        </div>\n                      </div>\n                    </div>\n                    <button className=\"w-full py-3 bg-white text-green-600 font-bold border-2 border-green-300 rounded-xl hover:bg-green-50 transition-colors flex items-center justify-center space-x-2\">\n                      <Check className=\"w-5 h-5\" />\n                      <span>Mark Complete</span>\n                    </button>\n                  </div>\n                )}\n\n                {/* Expanded Content */}\n                {isExpanded && (\n                  <div className=\"mt-4 space-y-4\">\n                    {/* Products Used */}\n                    <div>\n                      <p className=\"text-sm font-medium text-gray-700 mb-2\">Products Used</p>\n                      <div className=\"space-y-2\">\n                        {treatment.products.map((product, index) => (\n                          <div key={index} className=\"flex items-center justify-between p-2 bg-gray-50 rounded-lg\">\n                            <div className=\"flex items-center space-x-2\">\n                              <span className=\"text-lg\">{product.icon}</span>\n                              <span className=\"text-sm text-gray-700\">{product.name}</span>\n                            </div>\n                            <div className=\"flex items-center space-x-2\">\n                              <div className=\"text-right\">\n                                <p className=\"text-xs text-gray-500\">Remaining</p>\n                                <p className=\"text-sm font-medium text-gray-700\">\n                                  {product.total - product.used}{product.unit}\n                                </p>\n                              </div>\n                              <div className=\"w-12 h-1.5 bg-gray-200 rounded-full overflow-hidden\">\n                                <div \n                                  className=\"h-full bg-blue-500 rounded-full\"\n                                  style={{ width: `${((product.total - product.used) / product.total) * 100}%` }}\n                                />\n                              </div>\n                            </div>\n                          </div>\n                        ))}\n                      </div>\n                    </div>\n\n                    {/* Photos & Notes */}\n                    <div className=\"border-t pt-4\">\n                      <div className=\"flex items-center justify-between mb-2\">\n                        <p className=\"text-sm font-medium text-gray-700\">Progress Photos & Notes</p>\n                        <button className=\"text-blue-600 text-sm hover:text-blue-700\">\n                          View All\n                        </button>\n                      </div>\n                      <div className=\"flex items-center space-x-3\">\n                        <div className=\"flex items-center space-x-2 text-gray-600\">\n                          <Camera className=\"w-4 h-4\" />\n                          <span className=\"text-sm\">{treatment.photos} photos</span>\n                        </div>\n                        <div className=\"flex items-center space-x-2 text-gray-600\">\n                          <Edit3 className=\"w-4 h-4\" />\n                          <span className=\"text-sm truncate max-w-[200px]\">{treatment.notes}</span>\n                        </div>\n                      </div>\n                      <div className=\"flex space-x-2 mt-3\">\n                        <button className=\"flex-1 py-2 px-3 bg-gray-100 text-gray-700 rounded-lg text-sm font-medium hover:bg-gray-200 transition-colors flex items-center justify-center space-x-2\">\n                          <Camera className=\"w-4 h-4\" />\n                          <span>Add Photo</span>\n                        </button>\n                        <button className=\"flex-1 py-2 px-3 bg-gray-100 text-gray-700 rounded-lg text-sm font-medium hover:bg-gray-200 transition-colors flex items-center justify-center space-x-2\">\n                          <Edit3 className=\"w-4 h-4\" />\n                          <span>Add Note</span>\n                        </button>\n                      </div>\n                    </div>\n                  </div>\n                )}\n              </div>\n            </div>\n          );\n        })}\n      </div>\n\n    </div>\n  );\n};\n\nexport default ActiveTreatments;","size_bytes":17586},"kisan/src/pages/Weather.tsx":{"content":"import React, { useState, useEffect } from 'react';\nimport { ArrowLeft, MapPin, Thermometer, Droplets, Wind, Eye, Sunrise, Sunset, AlertTriangle, RefreshCw } from 'lucide-react';\nimport { useNavigate } from 'react-router-dom';\nimport { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';\nimport { Button } from '@/components/ui/button';\nimport { weatherService, WeatherData, DailyForecast } from '@/lib/weather';\n\nconst Weather = () => {\n  const navigate = useNavigate();\n  const [currentWeather, setCurrentWeather] = useState<WeatherData | null>(null);\n  const [forecast, setForecast] = useState<DailyForecast[]>([]);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState<string | null>(null);\n  const [location, setLocation] = useState({ lat: 0, lon: 0 });\n\n  const loadWeatherData = async () => {\n    try {\n      setLoading(true);\n      setError(null);\n\n      // Try to get current location first\n      try {\n        const currentLocation = await weatherService.getCurrentLocation();\n        setLocation(currentLocation);\n        \n        // Fetch current weather and forecast\n        const [weather, forecastData] = await Promise.all([\n          weatherService.getCurrentWeather(currentLocation.lat, currentLocation.lon),\n          weatherService.getForecast(currentLocation.lat, currentLocation.lon)\n        ]);\n        \n        setCurrentWeather(weather);\n        setForecast(forecastData);\n      } catch (locationError) {\n        // If location access fails, use a default location (Delhi, India)\n        console.warn('Location access failed, using default location');\n        const defaultWeather = await weatherService.getWeatherByCity('Delhi, IN');\n        const defaultForecast = await weatherService.getForecast(28.6139, 77.2090); // Delhi coordinates\n        \n        setCurrentWeather(defaultWeather);\n        setForecast(defaultForecast);\n      }\n    } catch (err) {\n      setError('Unable to fetch weather data. Please try again.');\n      console.error('Weather fetch error:', err);\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  useEffect(() => {\n    loadWeatherData();\n  }, []);\n\n  const formatTime = (timestamp: number) => {\n    return new Date(timestamp * 1000).toLocaleTimeString('en-US', {\n      hour: '2-digit',\n      minute: '2-digit'\n    });\n  };\n\n  const getWeatherAdvice = (weather: WeatherData) => {\n    return weatherService.generateFarmingAdvice(weather);\n  };\n\n  if (loading) {\n    return (\n      <div className=\"min-h-screen bg-gradient-to-br from-green-50 to-green-100 p-4\">\n        <div className=\"max-w-md mx-auto\">\n          <div className=\"flex items-center justify-between mb-6\">\n            <Button\n              variant=\"ghost\"\n              size=\"sm\"\n              onClick={() => navigate(-1)}\n              className=\"text-green-700\"\n            >\n              <ArrowLeft className=\"h-5 w-5 mr-1\" />\n              Back\n            </Button>\n            <h1 className=\"text-xl font-bold text-green-800\">Weather Forecast</h1>\n            <div className=\"w-16\" />\n          </div>\n          \n          <div className=\"flex items-center justify-center py-20\">\n            <RefreshCw className=\"h-8 w-8 animate-spin text-green-600\" />\n          </div>\n        </div>\n      </div>\n    );\n  }\n\n  if (error) {\n    return (\n      <div className=\"min-h-screen bg-gradient-to-br from-green-50 to-green-100 p-4\">\n        <div className=\"max-w-md mx-auto\">\n          <div className=\"flex items-center justify-between mb-6\">\n            <Button\n              variant=\"ghost\"\n              size=\"sm\"\n              onClick={() => navigate(-1)}\n              className=\"text-green-700\"\n            >\n              <ArrowLeft className=\"h-5 w-5 mr-1\" />\n              Back\n            </Button>\n            <h1 className=\"text-xl font-bold text-green-800\">Weather Forecast</h1>\n            <div className=\"w-16\" />\n          </div>\n          \n          <Card className=\"mb-6\">\n            <CardContent className=\"p-6 text-center\">\n              <AlertTriangle className=\"h-12 w-12 text-red-500 mx-auto mb-4\" />\n              <p className=\"text-red-600 mb-4\">{error}</p>\n              <Button onClick={loadWeatherData} variant=\"outline\">\n                Try Again\n              </Button>\n            </CardContent>\n          </Card>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"min-h-screen bg-gradient-to-br from-green-50 to-green-100 p-4\">\n      <div className=\"max-w-md mx-auto\">\n        {/* Header */}\n        <div className=\"flex items-center justify-between mb-6\">\n          <Button\n            variant=\"ghost\"\n            size=\"sm\"\n            onClick={() => navigate(-1)}\n            className=\"text-green-700\"\n          >\n            <ArrowLeft className=\"h-5 w-5 mr-1\" />\n            Back\n          </Button>\n          <h1 className=\"text-xl font-bold text-green-800\">Weather Forecast</h1>\n          <Button\n            variant=\"ghost\"\n            size=\"sm\"\n            onClick={loadWeatherData}\n            className=\"text-green-700\"\n          >\n            <RefreshCw className=\"h-5 w-5\" />\n          </Button>\n        </div>\n\n        {/* Current Weather */}\n        {currentWeather && (\n          <Card className=\"mb-6 bg-gradient-to-r from-blue-500 to-blue-600 text-white\">\n            <CardContent className=\"p-6\">\n              <div className=\"flex items-center justify-between mb-4\">\n                <div>\n                  <div className=\"flex items-center mb-2\">\n                    <MapPin className=\"h-4 w-4 mr-1\" />\n                    <span className=\"text-sm\">{currentWeather.location}</span>\n                  </div>\n                  <div className=\"text-3xl font-bold mb-1\">\n                    {currentWeather.temperature}°C\n                  </div>\n                  <div className=\"text-sm opacity-90 capitalize\">\n                    {currentWeather.description}\n                  </div>\n                  <div className=\"text-sm opacity-90\">\n                    Feels like {currentWeather.feelsLike}°C\n                  </div>\n                </div>\n                <img\n                  src={weatherService.getWeatherIconUrl(currentWeather.icon)}\n                  alt={currentWeather.description}\n                  className=\"h-20 w-20\"\n                />\n              </div>\n\n              {/* Weather Details */}\n              <div className=\"grid grid-cols-2 gap-4 text-sm\">\n                <div className=\"flex items-center\">\n                  <Droplets className=\"h-4 w-4 mr-2\" />\n                  <span>Humidity: {currentWeather.humidity}%</span>\n                </div>\n                <div className=\"flex items-center\">\n                  <Wind className=\"h-4 w-4 mr-2\" />\n                  <span>Wind: {currentWeather.windSpeed} m/s</span>\n                </div>\n                <div className=\"flex items-center\">\n                  <Thermometer className=\"h-4 w-4 mr-2\" />\n                  <span>Pressure: {currentWeather.pressure} hPa</span>\n                </div>\n                <div className=\"flex items-center\">\n                  <Eye className=\"h-4 w-4 mr-2\" />\n                  <span>Visibility: {currentWeather.visibility} km</span>\n                </div>\n              </div>\n\n              {/* Sun Times */}\n              <div className=\"flex items-center justify-between mt-4 pt-4 border-t border-white/20\">\n                <div className=\"flex items-center\">\n                  <Sunrise className=\"h-4 w-4 mr-2\" />\n                  <span className=\"text-sm\">\n                    Sunrise: {formatTime(currentWeather.sunrise)}\n                  </span>\n                </div>\n                <div className=\"flex items-center\">\n                  <Sunset className=\"h-4 w-4 mr-2\" />\n                  <span className=\"text-sm\">\n                    Sunset: {formatTime(currentWeather.sunset)}\n                  </span>\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n        )}\n\n        {/* Farming Advice */}\n        {currentWeather && (\n          <Card className=\"mb-6 bg-green-50 border-green-200\">\n            <CardHeader className=\"pb-3\">\n              <CardTitle className=\"text-sm text-green-800\">🌾 Farming Advice</CardTitle>\n            </CardHeader>\n            <CardContent className=\"pt-0\">\n              <p className=\"text-sm text-green-700\">\n                {getWeatherAdvice(currentWeather)}\n              </p>\n            </CardContent>\n          </Card>\n        )}\n\n        {/* 7-Day Forecast */}\n        <Card>\n          <CardHeader>\n            <CardTitle className=\"text-green-800\">7-Day Forecast</CardTitle>\n          </CardHeader>\n          <CardContent className=\"p-0\">\n            {forecast.map((day, index) => (\n              <div\n                key={day.date}\n                className={`p-4 flex items-center justify-between ${\n                  index !== forecast.length - 1 ? 'border-b border-gray-100' : ''\n                } ${index === 0 ? 'bg-green-50' : ''}`}\n              >\n                <div className=\"flex items-center flex-1\">\n                  <img\n                    src={weatherService.getWeatherIconUrl(day.icon)}\n                    alt={day.description}\n                    className=\"h-10 w-10 mr-3\"\n                  />\n                  <div>\n                    <div className=\"font-medium text-gray-800\">\n                      {index === 0 ? 'Today' : day.dayName}\n                    </div>\n                    <div className=\"text-xs text-gray-500 capitalize\">\n                      {day.description}\n                    </div>\n                  </div>\n                </div>\n                \n                <div className=\"text-right\">\n                  <div className=\"font-bold text-gray-800\">\n                    {day.temperature.max}°/{day.temperature.min}°\n                  </div>\n                  <div className=\"text-xs text-gray-500\">\n                    {day.humidity}% humidity\n                  </div>\n                </div>\n              </div>\n            ))}\n          </CardContent>\n        </Card>\n\n        {/* Additional Info */}\n        <div className=\"mt-6 text-center text-xs text-gray-500\">\n          Data provided by OpenWeatherMap\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default Weather;","size_bytes":10297},"kisan/src/components/ui/accordion.tsx":{"content":"import * as React from \"react\"\nimport * as AccordionPrimitive from \"@radix-ui/react-accordion\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Accordion = AccordionPrimitive.Root\n\nconst AccordionItem = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <AccordionPrimitive.Item\n    ref={ref}\n    className={cn(\"border-b\", className)}\n    {...props}\n  />\n))\nAccordionItem.displayName = \"AccordionItem\"\n\nconst AccordionTrigger = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Header className=\"flex\">\n    <AccordionPrimitive.Trigger\n      ref={ref}\n      className={cn(\n        \"flex flex-1 items-center justify-between py-4 font-medium transition-all hover:underline [&[data-state=open]>svg]:rotate-180\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <ChevronDown className=\"h-4 w-4 shrink-0 transition-transform duration-200\" />\n    </AccordionPrimitive.Trigger>\n  </AccordionPrimitive.Header>\n))\nAccordionTrigger.displayName = AccordionPrimitive.Trigger.displayName\n\nconst AccordionContent = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Content\n    ref={ref}\n    className=\"overflow-hidden text-sm transition-all data-[state=closed]:animate-accordion-up data-[state=open]:animate-accordion-down\"\n    {...props}\n  >\n    <div className={cn(\"pb-4 pt-0\", className)}>{children}</div>\n  </AccordionPrimitive.Content>\n))\n\nAccordionContent.displayName = AccordionPrimitive.Content.displayName\n\nexport { Accordion, AccordionItem, AccordionTrigger, AccordionContent }\n","size_bytes":1977},"kisan/src/components/ui/alert-dialog.tsx":{"content":"import * as React from \"react\"\nimport * as AlertDialogPrimitive from \"@radix-ui/react-alert-dialog\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nconst AlertDialog = AlertDialogPrimitive.Root\n\nconst AlertDialogTrigger = AlertDialogPrimitive.Trigger\n\nconst AlertDialogPortal = AlertDialogPrimitive.Portal\n\nconst AlertDialogOverlay = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nAlertDialogOverlay.displayName = AlertDialogPrimitive.Overlay.displayName\n\nconst AlertDialogContent = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPortal>\n    <AlertDialogOverlay />\n    <AlertDialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    />\n  </AlertDialogPortal>\n))\nAlertDialogContent.displayName = AlertDialogPrimitive.Content.displayName\n\nconst AlertDialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogHeader.displayName = \"AlertDialogHeader\"\n\nconst AlertDialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogFooter.displayName = \"AlertDialogFooter\"\n\nconst AlertDialogTitle = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold\", className)}\n    {...props}\n  />\n))\nAlertDialogTitle.displayName = AlertDialogPrimitive.Title.displayName\n\nconst AlertDialogDescription = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nAlertDialogDescription.displayName =\n  AlertDialogPrimitive.Description.displayName\n\nconst AlertDialogAction = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Action>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Action>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Action\n    ref={ref}\n    className={cn(buttonVariants(), className)}\n    {...props}\n  />\n))\nAlertDialogAction.displayName = AlertDialogPrimitive.Action.displayName\n\nconst AlertDialogCancel = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Cancel>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Cancel>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Cancel\n    ref={ref}\n    className={cn(\n      buttonVariants({ variant: \"outline\" }),\n      \"mt-2 sm:mt-0\",\n      className\n    )}\n    {...props}\n  />\n))\nAlertDialogCancel.displayName = AlertDialogPrimitive.Cancel.displayName\n\nexport {\n  AlertDialog,\n  AlertDialogPortal,\n  AlertDialogOverlay,\n  AlertDialogTrigger,\n  AlertDialogContent,\n  AlertDialogHeader,\n  AlertDialogFooter,\n  AlertDialogTitle,\n  AlertDialogDescription,\n  AlertDialogAction,\n  AlertDialogCancel,\n}\n","size_bytes":4420},"kisan/src/components/ui/alert.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst alertVariants = cva(\n  \"relative w-full rounded-lg border p-4 [&>svg~*]:pl-7 [&>svg+div]:translate-y-[-3px] [&>svg]:absolute [&>svg]:left-4 [&>svg]:top-4 [&>svg]:text-foreground\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-background text-foreground\",\n        destructive:\n          \"border-destructive/50 text-destructive dark:border-destructive [&>svg]:text-destructive\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Alert = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & VariantProps<typeof alertVariants>\n>(({ className, variant, ...props }, ref) => (\n  <div\n    ref={ref}\n    role=\"alert\"\n    className={cn(alertVariants({ variant }), className)}\n    {...props}\n  />\n))\nAlert.displayName = \"Alert\"\n\nconst AlertTitle = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLHeadingElement>\n>(({ className, ...props }, ref) => (\n  <h5\n    ref={ref}\n    className={cn(\"mb-1 font-medium leading-none tracking-tight\", className)}\n    {...props}\n  />\n))\nAlertTitle.displayName = \"AlertTitle\"\n\nconst AlertDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm [&_p]:leading-relaxed\", className)}\n    {...props}\n  />\n))\nAlertDescription.displayName = \"AlertDescription\"\n\nexport { Alert, AlertTitle, AlertDescription }\n","size_bytes":1584},"kisan/src/components/ui/aspect-ratio.tsx":{"content":"import * as AspectRatioPrimitive from \"@radix-ui/react-aspect-ratio\"\n\nconst AspectRatio = AspectRatioPrimitive.Root\n\nexport { AspectRatio }\n","size_bytes":140},"kisan/src/components/ui/avatar.tsx":{"content":"import * as React from \"react\"\nimport * as AvatarPrimitive from \"@radix-ui/react-avatar\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Avatar = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative flex h-10 w-10 shrink-0 overflow-hidden rounded-full\",\n      className\n    )}\n    {...props}\n  />\n))\nAvatar.displayName = AvatarPrimitive.Root.displayName\n\nconst AvatarImage = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Image>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Image>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Image\n    ref={ref}\n    className={cn(\"aspect-square h-full w-full\", className)}\n    {...props}\n  />\n))\nAvatarImage.displayName = AvatarPrimitive.Image.displayName\n\nconst AvatarFallback = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Fallback>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Fallback>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Fallback\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full items-center justify-center rounded-full bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nAvatarFallback.displayName = AvatarPrimitive.Fallback.displayName\n\nexport { Avatar, AvatarImage, AvatarFallback }\n","size_bytes":1405},"kisan/src/components/ui/badge.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst badgeVariants = cva(\n  \"inline-flex items-center rounded-full border px-2.5 py-0.5 text-xs font-semibold transition-colors focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2\",\n  {\n    variants: {\n      variant: {\n        default:\n          \"border-transparent bg-primary text-primary-foreground hover:bg-primary/80\",\n        secondary:\n          \"border-transparent bg-secondary text-secondary-foreground hover:bg-secondary/80\",\n        destructive:\n          \"border-transparent bg-destructive text-destructive-foreground hover:bg-destructive/80\",\n        outline: \"text-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nexport interface BadgeProps\n  extends React.HTMLAttributes<HTMLDivElement>,\n    VariantProps<typeof badgeVariants> {}\n\nfunction Badge({ className, variant, ...props }: BadgeProps) {\n  return (\n    <div className={cn(badgeVariants({ variant }), className)} {...props} />\n  )\n}\n\nexport { Badge, badgeVariants }\n","size_bytes":1128},"kisan/src/components/ui/breadcrumb.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Breadcrumb = React.forwardRef<\n  HTMLElement,\n  React.ComponentPropsWithoutRef<\"nav\"> & {\n    separator?: React.ReactNode\n  }\n>(({ ...props }, ref) => <nav ref={ref} aria-label=\"breadcrumb\" {...props} />)\nBreadcrumb.displayName = \"Breadcrumb\"\n\nconst BreadcrumbList = React.forwardRef<\n  HTMLOListElement,\n  React.ComponentPropsWithoutRef<\"ol\">\n>(({ className, ...props }, ref) => (\n  <ol\n    ref={ref}\n    className={cn(\n      \"flex flex-wrap items-center gap-1.5 break-words text-sm text-muted-foreground sm:gap-2.5\",\n      className\n    )}\n    {...props}\n  />\n))\nBreadcrumbList.displayName = \"BreadcrumbList\"\n\nconst BreadcrumbItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentPropsWithoutRef<\"li\">\n>(({ className, ...props }, ref) => (\n  <li\n    ref={ref}\n    className={cn(\"inline-flex items-center gap-1.5\", className)}\n    {...props}\n  />\n))\nBreadcrumbItem.displayName = \"BreadcrumbItem\"\n\nconst BreadcrumbLink = React.forwardRef<\n  HTMLAnchorElement,\n  React.ComponentPropsWithoutRef<\"a\"> & {\n    asChild?: boolean\n  }\n>(({ asChild, className, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      ref={ref}\n      className={cn(\"transition-colors hover:text-foreground\", className)}\n      {...props}\n    />\n  )\n})\nBreadcrumbLink.displayName = \"BreadcrumbLink\"\n\nconst BreadcrumbPage = React.forwardRef<\n  HTMLSpanElement,\n  React.ComponentPropsWithoutRef<\"span\">\n>(({ className, ...props }, ref) => (\n  <span\n    ref={ref}\n    role=\"link\"\n    aria-disabled=\"true\"\n    aria-current=\"page\"\n    className={cn(\"font-normal text-foreground\", className)}\n    {...props}\n  />\n))\nBreadcrumbPage.displayName = \"BreadcrumbPage\"\n\nconst BreadcrumbSeparator = ({\n  children,\n  className,\n  ...props\n}: React.ComponentProps<\"li\">) => (\n  <li\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"[&>svg]:size-3.5\", className)}\n    {...props}\n  >\n    {children ?? <ChevronRight />}\n  </li>\n)\nBreadcrumbSeparator.displayName = \"BreadcrumbSeparator\"\n\nconst BreadcrumbEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More</span>\n  </span>\n)\nBreadcrumbEllipsis.displayName = \"BreadcrumbElipssis\"\n\nexport {\n  Breadcrumb,\n  BreadcrumbList,\n  BreadcrumbItem,\n  BreadcrumbLink,\n  BreadcrumbPage,\n  BreadcrumbSeparator,\n  BreadcrumbEllipsis,\n}\n","size_bytes":2701},"kisan/src/components/ui/button.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst buttonVariants = cva(\n  \"inline-flex items-center justify-center gap-2 whitespace-nowrap rounded-md text-sm font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-primary text-primary-foreground hover:bg-primary/90\",\n        destructive:\n          \"bg-destructive text-destructive-foreground hover:bg-destructive/90\",\n        outline:\n          \"border border-input bg-background hover:bg-accent hover:text-accent-foreground\",\n        secondary:\n          \"bg-secondary text-secondary-foreground hover:bg-secondary/80\",\n        ghost: \"hover:bg-accent hover:text-accent-foreground\",\n        link: \"text-primary underline-offset-4 hover:underline\",\n      },\n      size: {\n        default: \"h-10 px-4 py-2\",\n        sm: \"h-9 rounded-md px-3\",\n        lg: \"h-11 rounded-md px-8\",\n        icon: \"h-10 w-10\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nexport interface ButtonProps\n  extends React.ButtonHTMLAttributes<HTMLButtonElement>,\n    VariantProps<typeof buttonVariants> {\n  asChild?: boolean\n}\n\nconst Button = React.forwardRef<HTMLButtonElement, ButtonProps>(\n  ({ className, variant, size, asChild = false, ...props }, ref) => {\n    const Comp = asChild ? Slot : \"button\"\n    return (\n      <Comp\n        className={cn(buttonVariants({ variant, size, className }))}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nButton.displayName = \"Button\"\n\nexport { Button, buttonVariants }\n","size_bytes":1901},"kisan/src/components/ui/calendar.tsx":{"content":"import * as React from \"react\";\nimport { ChevronLeft, ChevronRight } from \"lucide-react\";\nimport { DayPicker } from \"react-day-picker\";\n\nimport { cn } from \"@/lib/utils\";\nimport { buttonVariants } from \"@/components/ui/button\";\n\nexport type CalendarProps = React.ComponentProps<typeof DayPicker>;\n\nfunction Calendar({\n  className,\n  classNames,\n  showOutsideDays = true,\n  ...props\n}: CalendarProps) {\n  return (\n    <DayPicker\n      showOutsideDays={showOutsideDays}\n      className={cn(\"p-3\", className)}\n      classNames={{\n        months: \"flex flex-col sm:flex-row space-y-4 sm:space-x-4 sm:space-y-0\",\n        month: \"space-y-4\",\n        caption: \"flex justify-center pt-1 relative items-center\",\n        caption_label: \"text-sm font-medium\",\n        nav: \"space-x-1 flex items-center\",\n        nav_button: cn(\n          buttonVariants({ variant: \"outline\" }),\n          \"h-7 w-7 bg-transparent p-0 opacity-50 hover:opacity-100\"\n        ),\n        nav_button_previous: \"absolute left-1\",\n        nav_button_next: \"absolute right-1\",\n        table: \"w-full border-collapse space-y-1\",\n        head_row: \"flex\",\n        head_cell:\n          \"text-muted-foreground rounded-md w-9 font-normal text-[0.8rem]\",\n        row: \"flex w-full mt-2\",\n        cell: \"h-9 w-9 text-center text-sm p-0 relative [&:has([aria-selected].day-range-end)]:rounded-r-md [&:has([aria-selected].day-outside)]:bg-accent/50 [&:has([aria-selected])]:bg-accent first:[&:has([aria-selected])]:rounded-l-md last:[&:has([aria-selected])]:rounded-r-md focus-within:relative focus-within:z-20\",\n        day: cn(\n          buttonVariants({ variant: \"ghost\" }),\n          \"h-9 w-9 p-0 font-normal aria-selected:opacity-100\"\n        ),\n        day_range_end: \"day-range-end\",\n        day_selected:\n          \"bg-primary text-primary-foreground hover:bg-primary hover:text-primary-foreground focus:bg-primary focus:text-primary-foreground\",\n        day_today: \"bg-accent text-accent-foreground\",\n        day_outside:\n          \"day-outside text-muted-foreground opacity-50 aria-selected:bg-accent/50 aria-selected:text-muted-foreground aria-selected:opacity-30\",\n        day_disabled: \"text-muted-foreground opacity-50\",\n        day_range_middle:\n          \"aria-selected:bg-accent aria-selected:text-accent-foreground\",\n        day_hidden: \"invisible\",\n        ...classNames,\n      }}\n      components={{\n        IconLeft: ({ ..._props }) => <ChevronLeft className=\"h-4 w-4\" />,\n        IconRight: ({ ..._props }) => <ChevronRight className=\"h-4 w-4\" />,\n      }}\n      {...props}\n    />\n  );\n}\nCalendar.displayName = \"Calendar\";\n\nexport { Calendar };\n","size_bytes":2620},"kisan/src/components/ui/card.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Card = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"rounded-lg border bg-card text-card-foreground shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n))\nCard.displayName = \"Card\"\n\nconst CardHeader = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex flex-col space-y-1.5 p-6\", className)}\n    {...props}\n  />\n))\nCardHeader.displayName = \"CardHeader\"\n\nconst CardTitle = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLHeadingElement>\n>(({ className, ...props }, ref) => (\n  <h3\n    ref={ref}\n    className={cn(\n      \"text-2xl font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nCardTitle.displayName = \"CardTitle\"\n\nconst CardDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => (\n  <p\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nCardDescription.displayName = \"CardDescription\"\n\nconst CardContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"p-6 pt-0\", className)} {...props} />\n))\nCardContent.displayName = \"CardContent\"\n\nconst CardFooter = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex items-center p-6 pt-0\", className)}\n    {...props}\n  />\n))\nCardFooter.displayName = \"CardFooter\"\n\nexport { Card, CardHeader, CardFooter, CardTitle, CardDescription, CardContent }\n","size_bytes":1877},"kisan/src/components/ui/carousel.tsx":{"content":"import * as React from \"react\"\nimport useEmblaCarousel, {\n  type UseEmblaCarouselType,\n} from \"embla-carousel-react\"\nimport { ArrowLeft, ArrowRight } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\n\ntype CarouselApi = UseEmblaCarouselType[1]\ntype UseCarouselParameters = Parameters<typeof useEmblaCarousel>\ntype CarouselOptions = UseCarouselParameters[0]\ntype CarouselPlugin = UseCarouselParameters[1]\n\ntype CarouselProps = {\n  opts?: CarouselOptions\n  plugins?: CarouselPlugin\n  orientation?: \"horizontal\" | \"vertical\"\n  setApi?: (api: CarouselApi) => void\n}\n\ntype CarouselContextProps = {\n  carouselRef: ReturnType<typeof useEmblaCarousel>[0]\n  api: ReturnType<typeof useEmblaCarousel>[1]\n  scrollPrev: () => void\n  scrollNext: () => void\n  canScrollPrev: boolean\n  canScrollNext: boolean\n} & CarouselProps\n\nconst CarouselContext = React.createContext<CarouselContextProps | null>(null)\n\nfunction useCarousel() {\n  const context = React.useContext(CarouselContext)\n\n  if (!context) {\n    throw new Error(\"useCarousel must be used within a <Carousel />\")\n  }\n\n  return context\n}\n\nconst Carousel = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & CarouselProps\n>(\n  (\n    {\n      orientation = \"horizontal\",\n      opts,\n      setApi,\n      plugins,\n      className,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const [carouselRef, api] = useEmblaCarousel(\n      {\n        ...opts,\n        axis: orientation === \"horizontal\" ? \"x\" : \"y\",\n      },\n      plugins\n    )\n    const [canScrollPrev, setCanScrollPrev] = React.useState(false)\n    const [canScrollNext, setCanScrollNext] = React.useState(false)\n\n    const onSelect = React.useCallback((api: CarouselApi) => {\n      if (!api) {\n        return\n      }\n\n      setCanScrollPrev(api.canScrollPrev())\n      setCanScrollNext(api.canScrollNext())\n    }, [])\n\n    const scrollPrev = React.useCallback(() => {\n      api?.scrollPrev()\n    }, [api])\n\n    const scrollNext = React.useCallback(() => {\n      api?.scrollNext()\n    }, [api])\n\n    const handleKeyDown = React.useCallback(\n      (event: React.KeyboardEvent<HTMLDivElement>) => {\n        if (event.key === \"ArrowLeft\") {\n          event.preventDefault()\n          scrollPrev()\n        } else if (event.key === \"ArrowRight\") {\n          event.preventDefault()\n          scrollNext()\n        }\n      },\n      [scrollPrev, scrollNext]\n    )\n\n    React.useEffect(() => {\n      if (!api || !setApi) {\n        return\n      }\n\n      setApi(api)\n    }, [api, setApi])\n\n    React.useEffect(() => {\n      if (!api) {\n        return\n      }\n\n      onSelect(api)\n      api.on(\"reInit\", onSelect)\n      api.on(\"select\", onSelect)\n\n      return () => {\n        api?.off(\"select\", onSelect)\n      }\n    }, [api, onSelect])\n\n    return (\n      <CarouselContext.Provider\n        value={{\n          carouselRef,\n          api: api,\n          opts,\n          orientation:\n            orientation || (opts?.axis === \"y\" ? \"vertical\" : \"horizontal\"),\n          scrollPrev,\n          scrollNext,\n          canScrollPrev,\n          canScrollNext,\n        }}\n      >\n        <div\n          ref={ref}\n          onKeyDownCapture={handleKeyDown}\n          className={cn(\"relative\", className)}\n          role=\"region\"\n          aria-roledescription=\"carousel\"\n          {...props}\n        >\n          {children}\n        </div>\n      </CarouselContext.Provider>\n    )\n  }\n)\nCarousel.displayName = \"Carousel\"\n\nconst CarouselContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { carouselRef, orientation } = useCarousel()\n\n  return (\n    <div ref={carouselRef} className=\"overflow-hidden\">\n      <div\n        ref={ref}\n        className={cn(\n          \"flex\",\n          orientation === \"horizontal\" ? \"-ml-4\" : \"-mt-4 flex-col\",\n          className\n        )}\n        {...props}\n      />\n    </div>\n  )\n})\nCarouselContent.displayName = \"CarouselContent\"\n\nconst CarouselItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { orientation } = useCarousel()\n\n  return (\n    <div\n      ref={ref}\n      role=\"group\"\n      aria-roledescription=\"slide\"\n      className={cn(\n        \"min-w-0 shrink-0 grow-0 basis-full\",\n        orientation === \"horizontal\" ? \"pl-4\" : \"pt-4\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nCarouselItem.displayName = \"CarouselItem\"\n\nconst CarouselPrevious = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollPrev, canScrollPrev } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute  h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-left-12 top-1/2 -translate-y-1/2\"\n          : \"-top-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollPrev}\n      onClick={scrollPrev}\n      {...props}\n    >\n      <ArrowLeft className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Previous slide</span>\n    </Button>\n  )\n})\nCarouselPrevious.displayName = \"CarouselPrevious\"\n\nconst CarouselNext = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollNext, canScrollNext } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-right-12 top-1/2 -translate-y-1/2\"\n          : \"-bottom-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollNext}\n      onClick={scrollNext}\n      {...props}\n    >\n      <ArrowRight className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Next slide</span>\n    </Button>\n  )\n})\nCarouselNext.displayName = \"CarouselNext\"\n\nexport {\n  type CarouselApi,\n  Carousel,\n  CarouselContent,\n  CarouselItem,\n  CarouselPrevious,\n  CarouselNext,\n}\n","size_bytes":6210},"kisan/src/components/ui/chart.tsx":{"content":"import * as React from \"react\"\nimport * as RechartsPrimitive from \"recharts\"\n\nimport { cn } from \"@/lib/utils\"\n\n// Format: { THEME_NAME: CSS_SELECTOR }\nconst THEMES = { light: \"\", dark: \".dark\" } as const\n\nexport type ChartConfig = {\n  [k in string]: {\n    label?: React.ReactNode\n    icon?: React.ComponentType\n  } & (\n    | { color?: string; theme?: never }\n    | { color?: never; theme: Record<keyof typeof THEMES, string> }\n  )\n}\n\ntype ChartContextProps = {\n  config: ChartConfig\n}\n\nconst ChartContext = React.createContext<ChartContextProps | null>(null)\n\nfunction useChart() {\n  const context = React.useContext(ChartContext)\n\n  if (!context) {\n    throw new Error(\"useChart must be used within a <ChartContainer />\")\n  }\n\n  return context\n}\n\nconst ChartContainer = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    config: ChartConfig\n    children: React.ComponentProps<\n      typeof RechartsPrimitive.ResponsiveContainer\n    >[\"children\"]\n  }\n>(({ id, className, children, config, ...props }, ref) => {\n  const uniqueId = React.useId()\n  const chartId = `chart-${id || uniqueId.replace(/:/g, \"\")}`\n\n  return (\n    <ChartContext.Provider value={{ config }}>\n      <div\n        data-chart={chartId}\n        ref={ref}\n        className={cn(\n          \"flex aspect-video justify-center text-xs [&_.recharts-cartesian-axis-tick_text]:fill-muted-foreground [&_.recharts-cartesian-grid_line[stroke='#ccc']]:stroke-border/50 [&_.recharts-curve.recharts-tooltip-cursor]:stroke-border [&_.recharts-dot[stroke='#fff']]:stroke-transparent [&_.recharts-layer]:outline-none [&_.recharts-polar-grid_[stroke='#ccc']]:stroke-border [&_.recharts-radial-bar-background-sector]:fill-muted [&_.recharts-rectangle.recharts-tooltip-cursor]:fill-muted [&_.recharts-reference-line_[stroke='#ccc']]:stroke-border [&_.recharts-sector[stroke='#fff']]:stroke-transparent [&_.recharts-sector]:outline-none [&_.recharts-surface]:outline-none\",\n          className\n        )}\n        {...props}\n      >\n        <ChartStyle id={chartId} config={config} />\n        <RechartsPrimitive.ResponsiveContainer>\n          {children}\n        </RechartsPrimitive.ResponsiveContainer>\n      </div>\n    </ChartContext.Provider>\n  )\n})\nChartContainer.displayName = \"Chart\"\n\nconst ChartStyle = ({ id, config }: { id: string; config: ChartConfig }) => {\n  const colorConfig = Object.entries(config).filter(\n    ([_, config]) => config.theme || config.color\n  )\n\n  if (!colorConfig.length) {\n    return null\n  }\n\n  return (\n    <style\n      dangerouslySetInnerHTML={{\n        __html: Object.entries(THEMES)\n          .map(\n            ([theme, prefix]) => `\n${prefix} [data-chart=${id}] {\n${colorConfig\n  .map(([key, itemConfig]) => {\n    const color =\n      itemConfig.theme?.[theme as keyof typeof itemConfig.theme] ||\n      itemConfig.color\n    return color ? `  --color-${key}: ${color};` : null\n  })\n  .join(\"\\n\")}\n}\n`\n          )\n          .join(\"\\n\"),\n      }}\n    />\n  )\n}\n\nconst ChartTooltip = RechartsPrimitive.Tooltip\n\nconst ChartTooltipContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<typeof RechartsPrimitive.Tooltip> &\n    React.ComponentProps<\"div\"> & {\n      hideLabel?: boolean\n      hideIndicator?: boolean\n      indicator?: \"line\" | \"dot\" | \"dashed\"\n      nameKey?: string\n      labelKey?: string\n    }\n>(\n  (\n    {\n      active,\n      payload,\n      className,\n      indicator = \"dot\",\n      hideLabel = false,\n      hideIndicator = false,\n      label,\n      labelFormatter,\n      labelClassName,\n      formatter,\n      color,\n      nameKey,\n      labelKey,\n    },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    const tooltipLabel = React.useMemo(() => {\n      if (hideLabel || !payload?.length) {\n        return null\n      }\n\n      const [item] = payload\n      const key = `${labelKey || item.dataKey || item.name || \"value\"}`\n      const itemConfig = getPayloadConfigFromPayload(config, item, key)\n      const value =\n        !labelKey && typeof label === \"string\"\n          ? config[label as keyof typeof config]?.label || label\n          : itemConfig?.label\n\n      if (labelFormatter) {\n        return (\n          <div className={cn(\"font-medium\", labelClassName)}>\n            {labelFormatter(value, payload)}\n          </div>\n        )\n      }\n\n      if (!value) {\n        return null\n      }\n\n      return <div className={cn(\"font-medium\", labelClassName)}>{value}</div>\n    }, [\n      label,\n      labelFormatter,\n      payload,\n      hideLabel,\n      labelClassName,\n      config,\n      labelKey,\n    ])\n\n    if (!active || !payload?.length) {\n      return null\n    }\n\n    const nestLabel = payload.length === 1 && indicator !== \"dot\"\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"grid min-w-[8rem] items-start gap-1.5 rounded-lg border border-border/50 bg-background px-2.5 py-1.5 text-xs shadow-xl\",\n          className\n        )}\n      >\n        {!nestLabel ? tooltipLabel : null}\n        <div className=\"grid gap-1.5\">\n          {payload.map((item, index) => {\n            const key = `${nameKey || item.name || item.dataKey || \"value\"}`\n            const itemConfig = getPayloadConfigFromPayload(config, item, key)\n            const indicatorColor = color || item.payload.fill || item.color\n\n            return (\n              <div\n                key={item.dataKey}\n                className={cn(\n                  \"flex w-full flex-wrap items-stretch gap-2 [&>svg]:h-2.5 [&>svg]:w-2.5 [&>svg]:text-muted-foreground\",\n                  indicator === \"dot\" && \"items-center\"\n                )}\n              >\n                {formatter && item?.value !== undefined && item.name ? (\n                  formatter(item.value, item.name, item, index, item.payload)\n                ) : (\n                  <>\n                    {itemConfig?.icon ? (\n                      <itemConfig.icon />\n                    ) : (\n                      !hideIndicator && (\n                        <div\n                          className={cn(\n                            \"shrink-0 rounded-[2px] border-[--color-border] bg-[--color-bg]\",\n                            {\n                              \"h-2.5 w-2.5\": indicator === \"dot\",\n                              \"w-1\": indicator === \"line\",\n                              \"w-0 border-[1.5px] border-dashed bg-transparent\":\n                                indicator === \"dashed\",\n                              \"my-0.5\": nestLabel && indicator === \"dashed\",\n                            }\n                          )}\n                          style={\n                            {\n                              \"--color-bg\": indicatorColor,\n                              \"--color-border\": indicatorColor,\n                            } as React.CSSProperties\n                          }\n                        />\n                      )\n                    )}\n                    <div\n                      className={cn(\n                        \"flex flex-1 justify-between leading-none\",\n                        nestLabel ? \"items-end\" : \"items-center\"\n                      )}\n                    >\n                      <div className=\"grid gap-1.5\">\n                        {nestLabel ? tooltipLabel : null}\n                        <span className=\"text-muted-foreground\">\n                          {itemConfig?.label || item.name}\n                        </span>\n                      </div>\n                      {item.value && (\n                        <span className=\"font-mono font-medium tabular-nums text-foreground\">\n                          {item.value.toLocaleString()}\n                        </span>\n                      )}\n                    </div>\n                  </>\n                )}\n              </div>\n            )\n          })}\n        </div>\n      </div>\n    )\n  }\n)\nChartTooltipContent.displayName = \"ChartTooltip\"\n\nconst ChartLegend = RechartsPrimitive.Legend\n\nconst ChartLegendContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> &\n    Pick<RechartsPrimitive.LegendProps, \"payload\" | \"verticalAlign\"> & {\n      hideIcon?: boolean\n      nameKey?: string\n    }\n>(\n  (\n    { className, hideIcon = false, payload, verticalAlign = \"bottom\", nameKey },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    if (!payload?.length) {\n      return null\n    }\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"flex items-center justify-center gap-4\",\n          verticalAlign === \"top\" ? \"pb-3\" : \"pt-3\",\n          className\n        )}\n      >\n        {payload.map((item) => {\n          const key = `${nameKey || item.dataKey || \"value\"}`\n          const itemConfig = getPayloadConfigFromPayload(config, item, key)\n\n          return (\n            <div\n              key={item.value}\n              className={cn(\n                \"flex items-center gap-1.5 [&>svg]:h-3 [&>svg]:w-3 [&>svg]:text-muted-foreground\"\n              )}\n            >\n              {itemConfig?.icon && !hideIcon ? (\n                <itemConfig.icon />\n              ) : (\n                <div\n                  className=\"h-2 w-2 shrink-0 rounded-[2px]\"\n                  style={{\n                    backgroundColor: item.color,\n                  }}\n                />\n              )}\n              {itemConfig?.label}\n            </div>\n          )\n        })}\n      </div>\n    )\n  }\n)\nChartLegendContent.displayName = \"ChartLegend\"\n\n// Helper to extract item config from a payload.\nfunction getPayloadConfigFromPayload(\n  config: ChartConfig,\n  payload: unknown,\n  key: string\n) {\n  if (typeof payload !== \"object\" || payload === null) {\n    return undefined\n  }\n\n  const payloadPayload =\n    \"payload\" in payload &&\n    typeof payload.payload === \"object\" &&\n    payload.payload !== null\n      ? payload.payload\n      : undefined\n\n  let configLabelKey: string = key\n\n  if (\n    key in payload &&\n    typeof payload[key as keyof typeof payload] === \"string\"\n  ) {\n    configLabelKey = payload[key as keyof typeof payload] as string\n  } else if (\n    payloadPayload &&\n    key in payloadPayload &&\n    typeof payloadPayload[key as keyof typeof payloadPayload] === \"string\"\n  ) {\n    configLabelKey = payloadPayload[\n      key as keyof typeof payloadPayload\n    ] as string\n  }\n\n  return configLabelKey in config\n    ? config[configLabelKey]\n    : config[key as keyof typeof config]\n}\n\nexport {\n  ChartContainer,\n  ChartTooltip,\n  ChartTooltipContent,\n  ChartLegend,\n  ChartLegendContent,\n  ChartStyle,\n}\n","size_bytes":10466},"kisan/src/components/ui/checkbox.tsx":{"content":"import * as React from \"react\"\nimport * as CheckboxPrimitive from \"@radix-ui/react-checkbox\"\nimport { Check } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Checkbox = React.forwardRef<\n  React.ElementRef<typeof CheckboxPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof CheckboxPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <CheckboxPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"peer h-4 w-4 shrink-0 rounded-sm border border-primary ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=checked]:text-primary-foreground\",\n      className\n    )}\n    {...props}\n  >\n    <CheckboxPrimitive.Indicator\n      className={cn(\"flex items-center justify-center text-current\")}\n    >\n      <Check className=\"h-4 w-4\" />\n    </CheckboxPrimitive.Indicator>\n  </CheckboxPrimitive.Root>\n))\nCheckbox.displayName = CheckboxPrimitive.Root.displayName\n\nexport { Checkbox }\n","size_bytes":1056},"kisan/src/components/ui/collapsible.tsx":{"content":"import * as CollapsiblePrimitive from \"@radix-ui/react-collapsible\"\n\nconst Collapsible = CollapsiblePrimitive.Root\n\nconst CollapsibleTrigger = CollapsiblePrimitive.CollapsibleTrigger\n\nconst CollapsibleContent = CollapsiblePrimitive.CollapsibleContent\n\nexport { Collapsible, CollapsibleTrigger, CollapsibleContent }\n","size_bytes":315},"kisan/src/components/ui/command.tsx":{"content":"import * as React from \"react\"\nimport { type DialogProps } from \"@radix-ui/react-dialog\"\nimport { Command as CommandPrimitive } from \"cmdk\"\nimport { Search } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Dialog, DialogContent } from \"@/components/ui/dialog\"\n\nconst Command = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full flex-col overflow-hidden rounded-md bg-popover text-popover-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nCommand.displayName = CommandPrimitive.displayName\n\ninterface CommandDialogProps extends DialogProps {}\n\nconst CommandDialog = ({ children, ...props }: CommandDialogProps) => {\n  return (\n    <Dialog {...props}>\n      <DialogContent className=\"overflow-hidden p-0 shadow-lg\">\n        <Command className=\"[&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground [&_[cmdk-group]:not([hidden])_~[cmdk-group]]:pt-0 [&_[cmdk-group]]:px-2 [&_[cmdk-input-wrapper]_svg]:h-5 [&_[cmdk-input-wrapper]_svg]:w-5 [&_[cmdk-input]]:h-12 [&_[cmdk-item]]:px-2 [&_[cmdk-item]]:py-3 [&_[cmdk-item]_svg]:h-5 [&_[cmdk-item]_svg]:w-5\">\n          {children}\n        </Command>\n      </DialogContent>\n    </Dialog>\n  )\n}\n\nconst CommandInput = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Input>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Input>\n>(({ className, ...props }, ref) => (\n  <div className=\"flex items-center border-b px-3\" cmdk-input-wrapper=\"\">\n    <Search className=\"mr-2 h-4 w-4 shrink-0 opacity-50\" />\n    <CommandPrimitive.Input\n      ref={ref}\n      className={cn(\n        \"flex h-11 w-full rounded-md bg-transparent py-3 text-sm outline-none placeholder:text-muted-foreground disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    />\n  </div>\n))\n\nCommandInput.displayName = CommandPrimitive.Input.displayName\n\nconst CommandList = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.List\n    ref={ref}\n    className={cn(\"max-h-[300px] overflow-y-auto overflow-x-hidden\", className)}\n    {...props}\n  />\n))\n\nCommandList.displayName = CommandPrimitive.List.displayName\n\nconst CommandEmpty = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Empty>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Empty>\n>((props, ref) => (\n  <CommandPrimitive.Empty\n    ref={ref}\n    className=\"py-6 text-center text-sm\"\n    {...props}\n  />\n))\n\nCommandEmpty.displayName = CommandPrimitive.Empty.displayName\n\nconst CommandGroup = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Group>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Group>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Group\n    ref={ref}\n    className={cn(\n      \"overflow-hidden p-1 text-foreground [&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:py-1.5 [&_[cmdk-group-heading]]:text-xs [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandGroup.displayName = CommandPrimitive.Group.displayName\n\nconst CommandSeparator = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nCommandSeparator.displayName = CommandPrimitive.Separator.displayName\n\nconst CommandItem = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none data-[disabled=true]:pointer-events-none data-[selected='true']:bg-accent data-[selected=true]:text-accent-foreground data-[disabled=true]:opacity-50\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandItem.displayName = CommandPrimitive.Item.displayName\n\nconst CommandShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nCommandShortcut.displayName = \"CommandShortcut\"\n\nexport {\n  Command,\n  CommandDialog,\n  CommandInput,\n  CommandList,\n  CommandEmpty,\n  CommandGroup,\n  CommandItem,\n  CommandShortcut,\n  CommandSeparator,\n}\n","size_bytes":4879},"kisan/src/components/ui/context-menu.tsx":{"content":"import * as React from \"react\"\nimport * as ContextMenuPrimitive from \"@radix-ui/react-context-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ContextMenu = ContextMenuPrimitive.Root\n\nconst ContextMenuTrigger = ContextMenuPrimitive.Trigger\n\nconst ContextMenuGroup = ContextMenuPrimitive.Group\n\nconst ContextMenuPortal = ContextMenuPrimitive.Portal\n\nconst ContextMenuSub = ContextMenuPrimitive.Sub\n\nconst ContextMenuRadioGroup = ContextMenuPrimitive.RadioGroup\n\nconst ContextMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <ContextMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </ContextMenuPrimitive.SubTrigger>\n))\nContextMenuSubTrigger.displayName = ContextMenuPrimitive.SubTrigger.displayName\n\nconst ContextMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuSubContent.displayName = ContextMenuPrimitive.SubContent.displayName\n\nconst ContextMenuContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Portal>\n    <ContextMenuPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md animate-in fade-in-80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2\",\n        className\n      )}\n      {...props}\n    />\n  </ContextMenuPrimitive.Portal>\n))\nContextMenuContent.displayName = ContextMenuPrimitive.Content.displayName\n\nconst ContextMenuItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuItem.displayName = ContextMenuPrimitive.Item.displayName\n\nconst ContextMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <ContextMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.CheckboxItem>\n))\nContextMenuCheckboxItem.displayName =\n  ContextMenuPrimitive.CheckboxItem.displayName\n\nconst ContextMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <ContextMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.RadioItem>\n))\nContextMenuRadioItem.displayName = ContextMenuPrimitive.RadioItem.displayName\n\nconst ContextMenuLabel = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold text-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuLabel.displayName = ContextMenuPrimitive.Label.displayName\n\nconst ContextMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nContextMenuSeparator.displayName = ContextMenuPrimitive.Separator.displayName\n\nconst ContextMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nContextMenuShortcut.displayName = \"ContextMenuShortcut\"\n\nexport {\n  ContextMenu,\n  ContextMenuTrigger,\n  ContextMenuContent,\n  ContextMenuItem,\n  ContextMenuCheckboxItem,\n  ContextMenuRadioItem,\n  ContextMenuLabel,\n  ContextMenuSeparator,\n  ContextMenuShortcut,\n  ContextMenuGroup,\n  ContextMenuPortal,\n  ContextMenuSub,\n  ContextMenuSubContent,\n  ContextMenuSubTrigger,\n  ContextMenuRadioGroup,\n}\n","size_bytes":7246},"kisan/src/components/ui/dialog.tsx":{"content":"import * as React from \"react\"\nimport * as DialogPrimitive from \"@radix-ui/react-dialog\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Dialog = DialogPrimitive.Root\n\nconst DialogTrigger = DialogPrimitive.Trigger\n\nconst DialogPortal = DialogPrimitive.Portal\n\nconst DialogClose = DialogPrimitive.Close\n\nconst DialogOverlay = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Overlay\n    ref={ref}\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogOverlay.displayName = DialogPrimitive.Overlay.displayName\n\nconst DialogContent = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DialogPortal>\n    <DialogOverlay />\n    <DialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <DialogPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-accent data-[state=open]:text-muted-foreground\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </DialogPrimitive.Close>\n    </DialogPrimitive.Content>\n  </DialogPortal>\n))\nDialogContent.displayName = DialogPrimitive.Content.displayName\n\nconst DialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-1.5 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogHeader.displayName = \"DialogHeader\"\n\nconst DialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogFooter.displayName = \"DialogFooter\"\n\nconst DialogTitle = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogTitle.displayName = DialogPrimitive.Title.displayName\n\nconst DialogDescription = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDialogDescription.displayName = DialogPrimitive.Description.displayName\n\nexport {\n  Dialog,\n  DialogPortal,\n  DialogOverlay,\n  DialogClose,\n  DialogTrigger,\n  DialogContent,\n  DialogHeader,\n  DialogFooter,\n  DialogTitle,\n  DialogDescription,\n}\n","size_bytes":3835},"kisan/src/components/ui/drawer.tsx":{"content":"import * as React from \"react\"\nimport { Drawer as DrawerPrimitive } from \"vaul\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Drawer = ({\n  shouldScaleBackground = true,\n  ...props\n}: React.ComponentProps<typeof DrawerPrimitive.Root>) => (\n  <DrawerPrimitive.Root\n    shouldScaleBackground={shouldScaleBackground}\n    {...props}\n  />\n)\nDrawer.displayName = \"Drawer\"\n\nconst DrawerTrigger = DrawerPrimitive.Trigger\n\nconst DrawerPortal = DrawerPrimitive.Portal\n\nconst DrawerClose = DrawerPrimitive.Close\n\nconst DrawerOverlay = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Overlay\n    ref={ref}\n    className={cn(\"fixed inset-0 z-50 bg-black/80\", className)}\n    {...props}\n  />\n))\nDrawerOverlay.displayName = DrawerPrimitive.Overlay.displayName\n\nconst DrawerContent = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DrawerPortal>\n    <DrawerOverlay />\n    <DrawerPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed inset-x-0 bottom-0 z-50 mt-24 flex h-auto flex-col rounded-t-[10px] border bg-background\",\n        className\n      )}\n      {...props}\n    >\n      <div className=\"mx-auto mt-4 h-2 w-[100px] rounded-full bg-muted\" />\n      {children}\n    </DrawerPrimitive.Content>\n  </DrawerPortal>\n))\nDrawerContent.displayName = \"DrawerContent\"\n\nconst DrawerHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"grid gap-1.5 p-4 text-center sm:text-left\", className)}\n    {...props}\n  />\n)\nDrawerHeader.displayName = \"DrawerHeader\"\n\nconst DrawerFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"mt-auto flex flex-col gap-2 p-4\", className)}\n    {...props}\n  />\n)\nDrawerFooter.displayName = \"DrawerFooter\"\n\nconst DrawerTitle = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDrawerTitle.displayName = DrawerPrimitive.Title.displayName\n\nconst DrawerDescription = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDrawerDescription.displayName = DrawerPrimitive.Description.displayName\n\nexport {\n  Drawer,\n  DrawerPortal,\n  DrawerOverlay,\n  DrawerTrigger,\n  DrawerClose,\n  DrawerContent,\n  DrawerHeader,\n  DrawerFooter,\n  DrawerTitle,\n  DrawerDescription,\n}\n","size_bytes":3007},"kisan/src/components/ui/dropdown-menu.tsx":{"content":"import * as React from \"react\"\nimport * as DropdownMenuPrimitive from \"@radix-ui/react-dropdown-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst DropdownMenu = DropdownMenuPrimitive.Root\n\nconst DropdownMenuTrigger = DropdownMenuPrimitive.Trigger\n\nconst DropdownMenuGroup = DropdownMenuPrimitive.Group\n\nconst DropdownMenuPortal = DropdownMenuPrimitive.Portal\n\nconst DropdownMenuSub = DropdownMenuPrimitive.Sub\n\nconst DropdownMenuRadioGroup = DropdownMenuPrimitive.RadioGroup\n\nconst DropdownMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent data-[state=open]:bg-accent\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </DropdownMenuPrimitive.SubTrigger>\n))\nDropdownMenuSubTrigger.displayName =\n  DropdownMenuPrimitive.SubTrigger.displayName\n\nconst DropdownMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuSubContent.displayName =\n  DropdownMenuPrimitive.SubContent.displayName\n\nconst DropdownMenuContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <DropdownMenuPrimitive.Portal>\n    <DropdownMenuPrimitive.Content\n      ref={ref}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2\",\n        className\n      )}\n      {...props}\n    />\n  </DropdownMenuPrimitive.Portal>\n))\nDropdownMenuContent.displayName = DropdownMenuPrimitive.Content.displayName\n\nconst DropdownMenuItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuItem.displayName = DropdownMenuPrimitive.Item.displayName\n\nconst DropdownMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <DropdownMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.CheckboxItem>\n))\nDropdownMenuCheckboxItem.displayName =\n  DropdownMenuPrimitive.CheckboxItem.displayName\n\nconst DropdownMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.RadioItem>\n))\nDropdownMenuRadioItem.displayName = DropdownMenuPrimitive.RadioItem.displayName\n\nconst DropdownMenuLabel = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuLabel.displayName = DropdownMenuPrimitive.Label.displayName\n\nconst DropdownMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nDropdownMenuSeparator.displayName = DropdownMenuPrimitive.Separator.displayName\n\nconst DropdownMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\"ml-auto text-xs tracking-widest opacity-60\", className)}\n      {...props}\n    />\n  )\n}\nDropdownMenuShortcut.displayName = \"DropdownMenuShortcut\"\n\nexport {\n  DropdownMenu,\n  DropdownMenuTrigger,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuCheckboxItem,\n  DropdownMenuRadioItem,\n  DropdownMenuLabel,\n  DropdownMenuSeparator,\n  DropdownMenuShortcut,\n  DropdownMenuGroup,\n  DropdownMenuPortal,\n  DropdownMenuSub,\n  DropdownMenuSubContent,\n  DropdownMenuSubTrigger,\n  DropdownMenuRadioGroup,\n}\n","size_bytes":7295},"kisan/src/components/ui/form.tsx":{"content":"import * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport {\n  Controller,\n  ControllerProps,\n  FieldPath,\n  FieldValues,\n  FormProvider,\n  useFormContext,\n} from \"react-hook-form\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Label } from \"@/components/ui/label\"\n\nconst Form = FormProvider\n\ntype FormFieldContextValue<\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n> = {\n  name: TName\n}\n\nconst FormFieldContext = React.createContext<FormFieldContextValue>(\n  {} as FormFieldContextValue\n)\n\nconst FormField = <\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n>({\n  ...props\n}: ControllerProps<TFieldValues, TName>) => {\n  return (\n    <FormFieldContext.Provider value={{ name: props.name }}>\n      <Controller {...props} />\n    </FormFieldContext.Provider>\n  )\n}\n\nconst useFormField = () => {\n  const fieldContext = React.useContext(FormFieldContext)\n  const itemContext = React.useContext(FormItemContext)\n  const { getFieldState, formState } = useFormContext()\n\n  const fieldState = getFieldState(fieldContext.name, formState)\n\n  if (!fieldContext) {\n    throw new Error(\"useFormField should be used within <FormField>\")\n  }\n\n  const { id } = itemContext\n\n  return {\n    id,\n    name: fieldContext.name,\n    formItemId: `${id}-form-item`,\n    formDescriptionId: `${id}-form-item-description`,\n    formMessageId: `${id}-form-item-message`,\n    ...fieldState,\n  }\n}\n\ntype FormItemContextValue = {\n  id: string\n}\n\nconst FormItemContext = React.createContext<FormItemContextValue>(\n  {} as FormItemContextValue\n)\n\nconst FormItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const id = React.useId()\n\n  return (\n    <FormItemContext.Provider value={{ id }}>\n      <div ref={ref} className={cn(\"space-y-2\", className)} {...props} />\n    </FormItemContext.Provider>\n  )\n})\nFormItem.displayName = \"FormItem\"\n\nconst FormLabel = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  const { error, formItemId } = useFormField()\n\n  return (\n    <Label\n      ref={ref}\n      className={cn(error && \"text-destructive\", className)}\n      htmlFor={formItemId}\n      {...props}\n    />\n  )\n})\nFormLabel.displayName = \"FormLabel\"\n\nconst FormControl = React.forwardRef<\n  React.ElementRef<typeof Slot>,\n  React.ComponentPropsWithoutRef<typeof Slot>\n>(({ ...props }, ref) => {\n  const { error, formItemId, formDescriptionId, formMessageId } = useFormField()\n\n  return (\n    <Slot\n      ref={ref}\n      id={formItemId}\n      aria-describedby={\n        !error\n          ? `${formDescriptionId}`\n          : `${formDescriptionId} ${formMessageId}`\n      }\n      aria-invalid={!!error}\n      {...props}\n    />\n  )\n})\nFormControl.displayName = \"FormControl\"\n\nconst FormDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => {\n  const { formDescriptionId } = useFormField()\n\n  return (\n    <p\n      ref={ref}\n      id={formDescriptionId}\n      className={cn(\"text-sm text-muted-foreground\", className)}\n      {...props}\n    />\n  )\n})\nFormDescription.displayName = \"FormDescription\"\n\nconst FormMessage = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, children, ...props }, ref) => {\n  const { error, formMessageId } = useFormField()\n  const body = error ? String(error?.message) : children\n\n  if (!body) {\n    return null\n  }\n\n  return (\n    <p\n      ref={ref}\n      id={formMessageId}\n      className={cn(\"text-sm font-medium text-destructive\", className)}\n      {...props}\n    >\n      {body}\n    </p>\n  )\n})\nFormMessage.displayName = \"FormMessage\"\n\nexport {\n  useFormField,\n  Form,\n  FormItem,\n  FormLabel,\n  FormControl,\n  FormDescription,\n  FormMessage,\n  FormField,\n}\n","size_bytes":4085},"kisan/src/components/ui/hover-card.tsx":{"content":"import * as React from \"react\"\nimport * as HoverCardPrimitive from \"@radix-ui/react-hover-card\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst HoverCard = HoverCardPrimitive.Root\n\nconst HoverCardTrigger = HoverCardPrimitive.Trigger\n\nconst HoverCardContent = React.forwardRef<\n  React.ElementRef<typeof HoverCardPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof HoverCardPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <HoverCardPrimitive.Content\n    ref={ref}\n    align={align}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 w-64 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2\",\n      className\n    )}\n    {...props}\n  />\n))\nHoverCardContent.displayName = HoverCardPrimitive.Content.displayName\n\nexport { HoverCard, HoverCardTrigger, HoverCardContent }\n","size_bytes":1184},"kisan/src/components/ui/input-otp.tsx":{"content":"import * as React from \"react\"\nimport { OTPInput, OTPInputContext } from \"input-otp\"\nimport { Dot } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst InputOTP = React.forwardRef<\n  React.ElementRef<typeof OTPInput>,\n  React.ComponentPropsWithoutRef<typeof OTPInput>\n>(({ className, containerClassName, ...props }, ref) => (\n  <OTPInput\n    ref={ref}\n    containerClassName={cn(\n      \"flex items-center gap-2 has-[:disabled]:opacity-50\",\n      containerClassName\n    )}\n    className={cn(\"disabled:cursor-not-allowed\", className)}\n    {...props}\n  />\n))\nInputOTP.displayName = \"InputOTP\"\n\nconst InputOTPGroup = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"flex items-center\", className)} {...props} />\n))\nInputOTPGroup.displayName = \"InputOTPGroup\"\n\nconst InputOTPSlot = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\"> & { index: number }\n>(({ index, className, ...props }, ref) => {\n  const inputOTPContext = React.useContext(OTPInputContext)\n  const { char, hasFakeCaret, isActive } = inputOTPContext.slots[index]\n\n  return (\n    <div\n      ref={ref}\n      className={cn(\n        \"relative flex h-10 w-10 items-center justify-center border-y border-r border-input text-sm transition-all first:rounded-l-md first:border-l last:rounded-r-md\",\n        isActive && \"z-10 ring-2 ring-ring ring-offset-background\",\n        className\n      )}\n      {...props}\n    >\n      {char}\n      {hasFakeCaret && (\n        <div className=\"pointer-events-none absolute inset-0 flex items-center justify-center\">\n          <div className=\"h-4 w-px animate-caret-blink bg-foreground duration-1000\" />\n        </div>\n      )}\n    </div>\n  )\n})\nInputOTPSlot.displayName = \"InputOTPSlot\"\n\nconst InputOTPSeparator = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ ...props }, ref) => (\n  <div ref={ref} role=\"separator\" {...props}>\n    <Dot />\n  </div>\n))\nInputOTPSeparator.displayName = \"InputOTPSeparator\"\n\nexport { InputOTP, InputOTPGroup, InputOTPSlot, InputOTPSeparator }\n","size_bytes":2154},"kisan/src/components/ui/input.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Input = React.forwardRef<HTMLInputElement, React.ComponentProps<\"input\">>(\n  ({ className, type, ...props }, ref) => {\n    return (\n      <input\n        type={type}\n        className={cn(\n          \"flex h-10 w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background file:border-0 file:bg-transparent file:text-sm file:font-medium file:text-foreground placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n          className\n        )}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nInput.displayName = \"Input\"\n\nexport { Input }\n","size_bytes":791},"kisan/src/components/ui/label.tsx":{"content":"import * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst labelVariants = cva(\n  \"text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70\"\n)\n\nconst Label = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root> &\n    VariantProps<typeof labelVariants>\n>(({ className, ...props }, ref) => (\n  <LabelPrimitive.Root\n    ref={ref}\n    className={cn(labelVariants(), className)}\n    {...props}\n  />\n))\nLabel.displayName = LabelPrimitive.Root.displayName\n\nexport { Label }\n","size_bytes":710},"kisan/src/components/ui/menubar.tsx":{"content":"import * as React from \"react\"\nimport * as MenubarPrimitive from \"@radix-ui/react-menubar\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst MenubarMenu = MenubarPrimitive.Menu\n\nconst MenubarGroup = MenubarPrimitive.Group\n\nconst MenubarPortal = MenubarPrimitive.Portal\n\nconst MenubarSub = MenubarPrimitive.Sub\n\nconst MenubarRadioGroup = MenubarPrimitive.RadioGroup\n\nconst Menubar = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"flex h-10 items-center space-x-1 rounded-md border bg-background p-1\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubar.displayName = MenubarPrimitive.Root.displayName\n\nconst MenubarTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-3 py-1.5 text-sm font-medium outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarTrigger.displayName = MenubarPrimitive.Trigger.displayName\n\nconst MenubarSubTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <MenubarPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </MenubarPrimitive.SubTrigger>\n))\nMenubarSubTrigger.displayName = MenubarPrimitive.SubTrigger.displayName\n\nconst MenubarSubContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarSubContent.displayName = MenubarPrimitive.SubContent.displayName\n\nconst MenubarContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Content>\n>(\n  (\n    { className, align = \"start\", alignOffset = -4, sideOffset = 8, ...props },\n    ref\n  ) => (\n    <MenubarPrimitive.Portal>\n      <MenubarPrimitive.Content\n        ref={ref}\n        align={align}\n        alignOffset={alignOffset}\n        sideOffset={sideOffset}\n        className={cn(\n          \"z-50 min-w-[12rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2\",\n          className\n        )}\n        {...props}\n      />\n    </MenubarPrimitive.Portal>\n  )\n)\nMenubarContent.displayName = MenubarPrimitive.Content.displayName\n\nconst MenubarItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarItem.displayName = MenubarPrimitive.Item.displayName\n\nconst MenubarCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <MenubarPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.CheckboxItem>\n))\nMenubarCheckboxItem.displayName = MenubarPrimitive.CheckboxItem.displayName\n\nconst MenubarRadioItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <MenubarPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.RadioItem>\n))\nMenubarRadioItem.displayName = MenubarPrimitive.RadioItem.displayName\n\nconst MenubarLabel = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarLabel.displayName = MenubarPrimitive.Label.displayName\n\nconst MenubarSeparator = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nMenubarSeparator.displayName = MenubarPrimitive.Separator.displayName\n\nconst MenubarShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nMenubarShortcut.displayname = \"MenubarShortcut\"\n\nexport {\n  Menubar,\n  MenubarMenu,\n  MenubarTrigger,\n  MenubarContent,\n  MenubarItem,\n  MenubarSeparator,\n  MenubarLabel,\n  MenubarCheckboxItem,\n  MenubarRadioGroup,\n  MenubarRadioItem,\n  MenubarPortal,\n  MenubarSubContent,\n  MenubarSubTrigger,\n  MenubarGroup,\n  MenubarSub,\n  MenubarShortcut,\n}\n","size_bytes":7974},"kisan/src/components/ui/navigation-menu.tsx":{"content":"import * as React from \"react\"\nimport * as NavigationMenuPrimitive from \"@radix-ui/react-navigation-menu\"\nimport { cva } from \"class-variance-authority\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst NavigationMenu = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative z-10 flex max-w-max flex-1 items-center justify-center\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <NavigationMenuViewport />\n  </NavigationMenuPrimitive.Root>\n))\nNavigationMenu.displayName = NavigationMenuPrimitive.Root.displayName\n\nconst NavigationMenuList = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.List\n    ref={ref}\n    className={cn(\n      \"group flex flex-1 list-none items-center justify-center space-x-1\",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuList.displayName = NavigationMenuPrimitive.List.displayName\n\nconst NavigationMenuItem = NavigationMenuPrimitive.Item\n\nconst navigationMenuTriggerStyle = cva(\n  \"group inline-flex h-10 w-max items-center justify-center rounded-md bg-background px-4 py-2 text-sm font-medium transition-colors hover:bg-accent hover:text-accent-foreground focus:bg-accent focus:text-accent-foreground focus:outline-none disabled:pointer-events-none disabled:opacity-50 data-[active]:bg-accent/50 data-[state=open]:bg-accent/50\"\n)\n\nconst NavigationMenuTrigger = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Trigger\n    ref={ref}\n    className={cn(navigationMenuTriggerStyle(), \"group\", className)}\n    {...props}\n  >\n    {children}{\" \"}\n    <ChevronDown\n      className=\"relative top-[1px] ml-1 h-3 w-3 transition duration-200 group-data-[state=open]:rotate-180\"\n      aria-hidden=\"true\"\n    />\n  </NavigationMenuPrimitive.Trigger>\n))\nNavigationMenuTrigger.displayName = NavigationMenuPrimitive.Trigger.displayName\n\nconst NavigationMenuContent = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"left-0 top-0 w-full data-[motion^=from-]:animate-in data-[motion^=to-]:animate-out data-[motion^=from-]:fade-in data-[motion^=to-]:fade-out data-[motion=from-end]:slide-in-from-right-52 data-[motion=from-start]:slide-in-from-left-52 data-[motion=to-end]:slide-out-to-right-52 data-[motion=to-start]:slide-out-to-left-52 md:absolute md:w-auto \",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuContent.displayName = NavigationMenuPrimitive.Content.displayName\n\nconst NavigationMenuLink = NavigationMenuPrimitive.Link\n\nconst NavigationMenuViewport = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Viewport>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Viewport>\n>(({ className, ...props }, ref) => (\n  <div className={cn(\"absolute left-0 top-full flex justify-center\")}>\n    <NavigationMenuPrimitive.Viewport\n      className={cn(\n        \"origin-top-center relative mt-1.5 h-[var(--radix-navigation-menu-viewport-height)] w-full overflow-hidden rounded-md border bg-popover text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-90 md:w-[var(--radix-navigation-menu-viewport-width)]\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  </div>\n))\nNavigationMenuViewport.displayName =\n  NavigationMenuPrimitive.Viewport.displayName\n\nconst NavigationMenuIndicator = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Indicator>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Indicator>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Indicator\n    ref={ref}\n    className={cn(\n      \"top-full z-[1] flex h-1.5 items-end justify-center overflow-hidden data-[state=visible]:animate-in data-[state=hidden]:animate-out data-[state=hidden]:fade-out data-[state=visible]:fade-in\",\n      className\n    )}\n    {...props}\n  >\n    <div className=\"relative top-[60%] h-2 w-2 rotate-45 rounded-tl-sm bg-border shadow-md\" />\n  </NavigationMenuPrimitive.Indicator>\n))\nNavigationMenuIndicator.displayName =\n  NavigationMenuPrimitive.Indicator.displayName\n\nexport {\n  navigationMenuTriggerStyle,\n  NavigationMenu,\n  NavigationMenuList,\n  NavigationMenuItem,\n  NavigationMenuContent,\n  NavigationMenuTrigger,\n  NavigationMenuLink,\n  NavigationMenuIndicator,\n  NavigationMenuViewport,\n}\n","size_bytes":5046},"kisan/src/components/ui/pagination.tsx":{"content":"import * as React from \"react\"\nimport { ChevronLeft, ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { ButtonProps, buttonVariants } from \"@/components/ui/button\"\n\nconst Pagination = ({ className, ...props }: React.ComponentProps<\"nav\">) => (\n  <nav\n    role=\"navigation\"\n    aria-label=\"pagination\"\n    className={cn(\"mx-auto flex w-full justify-center\", className)}\n    {...props}\n  />\n)\nPagination.displayName = \"Pagination\"\n\nconst PaginationContent = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    className={cn(\"flex flex-row items-center gap-1\", className)}\n    {...props}\n  />\n))\nPaginationContent.displayName = \"PaginationContent\"\n\nconst PaginationItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ className, ...props }, ref) => (\n  <li ref={ref} className={cn(\"\", className)} {...props} />\n))\nPaginationItem.displayName = \"PaginationItem\"\n\ntype PaginationLinkProps = {\n  isActive?: boolean\n} & Pick<ButtonProps, \"size\"> &\n  React.ComponentProps<\"a\">\n\nconst PaginationLink = ({\n  className,\n  isActive,\n  size = \"icon\",\n  ...props\n}: PaginationLinkProps) => (\n  <a\n    aria-current={isActive ? \"page\" : undefined}\n    className={cn(\n      buttonVariants({\n        variant: isActive ? \"outline\" : \"ghost\",\n        size,\n      }),\n      className\n    )}\n    {...props}\n  />\n)\nPaginationLink.displayName = \"PaginationLink\"\n\nconst PaginationPrevious = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to previous page\"\n    size=\"default\"\n    className={cn(\"gap-1 pl-2.5\", className)}\n    {...props}\n  >\n    <ChevronLeft className=\"h-4 w-4\" />\n    <span>Previous</span>\n  </PaginationLink>\n)\nPaginationPrevious.displayName = \"PaginationPrevious\"\n\nconst PaginationNext = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to next page\"\n    size=\"default\"\n    className={cn(\"gap-1 pr-2.5\", className)}\n    {...props}\n  >\n    <span>Next</span>\n    <ChevronRight className=\"h-4 w-4\" />\n  </PaginationLink>\n)\nPaginationNext.displayName = \"PaginationNext\"\n\nconst PaginationEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    aria-hidden\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More pages</span>\n  </span>\n)\nPaginationEllipsis.displayName = \"PaginationEllipsis\"\n\nexport {\n  Pagination,\n  PaginationContent,\n  PaginationEllipsis,\n  PaginationItem,\n  PaginationLink,\n  PaginationNext,\n  PaginationPrevious,\n}\n","size_bytes":2751},"kisan/src/components/ui/popover.tsx":{"content":"import * as React from \"react\"\nimport * as PopoverPrimitive from \"@radix-ui/react-popover\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Popover = PopoverPrimitive.Root\n\nconst PopoverTrigger = PopoverPrimitive.Trigger\n\nconst PopoverContent = React.forwardRef<\n  React.ElementRef<typeof PopoverPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof PopoverPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <PopoverPrimitive.Portal>\n    <PopoverPrimitive.Content\n      ref={ref}\n      align={align}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 w-72 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2\",\n        className\n      )}\n      {...props}\n    />\n  </PopoverPrimitive.Portal>\n))\nPopoverContent.displayName = PopoverPrimitive.Content.displayName\n\nexport { Popover, PopoverTrigger, PopoverContent }\n","size_bytes":1230},"kisan/src/components/ui/progress.tsx":{"content":"import * as React from \"react\"\nimport * as ProgressPrimitive from \"@radix-ui/react-progress\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Progress = React.forwardRef<\n  React.ElementRef<typeof ProgressPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ProgressPrimitive.Root>\n>(({ className, value, ...props }, ref) => (\n  <ProgressPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative h-4 w-full overflow-hidden rounded-full bg-secondary\",\n      className\n    )}\n    {...props}\n  >\n    <ProgressPrimitive.Indicator\n      className=\"h-full w-full flex-1 bg-primary transition-all\"\n      style={{ transform: `translateX(-${100 - (value || 0)}%)` }}\n    />\n  </ProgressPrimitive.Root>\n))\nProgress.displayName = ProgressPrimitive.Root.displayName\n\nexport { Progress }\n","size_bytes":777},"kisan/src/components/ui/radio-group.tsx":{"content":"import * as React from \"react\"\nimport * as RadioGroupPrimitive from \"@radix-ui/react-radio-group\"\nimport { Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst RadioGroup = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Root\n      className={cn(\"grid gap-2\", className)}\n      {...props}\n      ref={ref}\n    />\n  )\n})\nRadioGroup.displayName = RadioGroupPrimitive.Root.displayName\n\nconst RadioGroupItem = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Item>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        \"aspect-square h-4 w-4 rounded-full border border-primary text-primary ring-offset-background focus:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    >\n      <RadioGroupPrimitive.Indicator className=\"flex items-center justify-center\">\n        <Circle className=\"h-2.5 w-2.5 fill-current text-current\" />\n      </RadioGroupPrimitive.Indicator>\n    </RadioGroupPrimitive.Item>\n  )\n})\nRadioGroupItem.displayName = RadioGroupPrimitive.Item.displayName\n\nexport { RadioGroup, RadioGroupItem }\n","size_bytes":1467},"kisan/src/components/ui/resizable.tsx":{"content":"import { GripVertical } from \"lucide-react\"\nimport * as ResizablePrimitive from \"react-resizable-panels\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ResizablePanelGroup = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelGroup>) => (\n  <ResizablePrimitive.PanelGroup\n    className={cn(\n      \"flex h-full w-full data-[panel-group-direction=vertical]:flex-col\",\n      className\n    )}\n    {...props}\n  />\n)\n\nconst ResizablePanel = ResizablePrimitive.Panel\n\nconst ResizableHandle = ({\n  withHandle,\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelResizeHandle> & {\n  withHandle?: boolean\n}) => (\n  <ResizablePrimitive.PanelResizeHandle\n    className={cn(\n      \"relative flex w-px items-center justify-center bg-border after:absolute after:inset-y-0 after:left-1/2 after:w-1 after:-translate-x-1/2 focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring focus-visible:ring-offset-1 data-[panel-group-direction=vertical]:h-px data-[panel-group-direction=vertical]:w-full data-[panel-group-direction=vertical]:after:left-0 data-[panel-group-direction=vertical]:after:h-1 data-[panel-group-direction=vertical]:after:w-full data-[panel-group-direction=vertical]:after:-translate-y-1/2 data-[panel-group-direction=vertical]:after:translate-x-0 [&[data-panel-group-direction=vertical]>div]:rotate-90\",\n      className\n    )}\n    {...props}\n  >\n    {withHandle && (\n      <div className=\"z-10 flex h-4 w-3 items-center justify-center rounded-sm border bg-border\">\n        <GripVertical className=\"h-2.5 w-2.5\" />\n      </div>\n    )}\n  </ResizablePrimitive.PanelResizeHandle>\n)\n\nexport { ResizablePanelGroup, ResizablePanel, ResizableHandle }\n","size_bytes":1709},"kisan/src/components/ui/scroll-area.tsx":{"content":"import * as React from \"react\"\nimport * as ScrollAreaPrimitive from \"@radix-ui/react-scroll-area\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ScrollArea = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <ScrollAreaPrimitive.Root\n    ref={ref}\n    className={cn(\"relative overflow-hidden\", className)}\n    {...props}\n  >\n    <ScrollAreaPrimitive.Viewport className=\"h-full w-full rounded-[inherit]\">\n      {children}\n    </ScrollAreaPrimitive.Viewport>\n    <ScrollBar />\n    <ScrollAreaPrimitive.Corner />\n  </ScrollAreaPrimitive.Root>\n))\nScrollArea.displayName = ScrollAreaPrimitive.Root.displayName\n\nconst ScrollBar = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>\n>(({ className, orientation = \"vertical\", ...props }, ref) => (\n  <ScrollAreaPrimitive.ScrollAreaScrollbar\n    ref={ref}\n    orientation={orientation}\n    className={cn(\n      \"flex touch-none select-none transition-colors\",\n      orientation === \"vertical\" &&\n        \"h-full w-2.5 border-l border-l-transparent p-[1px]\",\n      orientation === \"horizontal\" &&\n        \"h-2.5 flex-col border-t border-t-transparent p-[1px]\",\n      className\n    )}\n    {...props}\n  >\n    <ScrollAreaPrimitive.ScrollAreaThumb className=\"relative flex-1 rounded-full bg-border\" />\n  </ScrollAreaPrimitive.ScrollAreaScrollbar>\n))\nScrollBar.displayName = ScrollAreaPrimitive.ScrollAreaScrollbar.displayName\n\nexport { ScrollArea, ScrollBar }\n","size_bytes":1642},"kisan/src/components/ui/select.tsx":{"content":"import * as React from \"react\"\nimport * as SelectPrimitive from \"@radix-ui/react-select\"\nimport { Check, ChevronDown, ChevronUp } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Select = SelectPrimitive.Root\n\nconst SelectGroup = SelectPrimitive.Group\n\nconst SelectValue = SelectPrimitive.Value\n\nconst SelectTrigger = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex h-10 w-full items-center justify-between rounded-md border border-input bg-background px-3 py-2 text-sm ring-offset-background placeholder:text-muted-foreground focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 [&>span]:line-clamp-1\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <SelectPrimitive.Icon asChild>\n      <ChevronDown className=\"h-4 w-4 opacity-50\" />\n    </SelectPrimitive.Icon>\n  </SelectPrimitive.Trigger>\n))\nSelectTrigger.displayName = SelectPrimitive.Trigger.displayName\n\nconst SelectScrollUpButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollUpButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollUpButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollUpButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronUp className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollUpButton>\n))\nSelectScrollUpButton.displayName = SelectPrimitive.ScrollUpButton.displayName\n\nconst SelectScrollDownButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollDownButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollDownButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollDownButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronDown className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollDownButton>\n))\nSelectScrollDownButton.displayName =\n  SelectPrimitive.ScrollDownButton.displayName\n\nconst SelectContent = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Content>\n>(({ className, children, position = \"popper\", ...props }, ref) => (\n  <SelectPrimitive.Portal>\n    <SelectPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"relative z-50 max-h-96 min-w-[8rem] overflow-hidden rounded-md border bg-popover text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2\",\n        position === \"popper\" &&\n          \"data-[side=bottom]:translate-y-1 data-[side=left]:-translate-x-1 data-[side=right]:translate-x-1 data-[side=top]:-translate-y-1\",\n        className\n      )}\n      position={position}\n      {...props}\n    >\n      <SelectScrollUpButton />\n      <SelectPrimitive.Viewport\n        className={cn(\n          \"p-1\",\n          position === \"popper\" &&\n            \"h-[var(--radix-select-trigger-height)] w-full min-w-[var(--radix-select-trigger-width)]\"\n        )}\n      >\n        {children}\n      </SelectPrimitive.Viewport>\n      <SelectScrollDownButton />\n    </SelectPrimitive.Content>\n  </SelectPrimitive.Portal>\n))\nSelectContent.displayName = SelectPrimitive.Content.displayName\n\nconst SelectLabel = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Label>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Label\n    ref={ref}\n    className={cn(\"py-1.5 pl-8 pr-2 text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nSelectLabel.displayName = SelectPrimitive.Label.displayName\n\nconst SelectItem = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Item>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex w-full cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <SelectPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </SelectPrimitive.ItemIndicator>\n    </span>\n\n    <SelectPrimitive.ItemText>{children}</SelectPrimitive.ItemText>\n  </SelectPrimitive.Item>\n))\nSelectItem.displayName = SelectPrimitive.Item.displayName\n\nconst SelectSeparator = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nSelectSeparator.displayName = SelectPrimitive.Separator.displayName\n\nexport {\n  Select,\n  SelectGroup,\n  SelectValue,\n  SelectTrigger,\n  SelectContent,\n  SelectLabel,\n  SelectItem,\n  SelectSeparator,\n  SelectScrollUpButton,\n  SelectScrollDownButton,\n}\n","size_bytes":5615},"kisan/src/components/ui/separator.tsx":{"content":"import * as React from \"react\"\nimport * as SeparatorPrimitive from \"@radix-ui/react-separator\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Separator = React.forwardRef<\n  React.ElementRef<typeof SeparatorPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SeparatorPrimitive.Root>\n>(\n  (\n    { className, orientation = \"horizontal\", decorative = true, ...props },\n    ref\n  ) => (\n    <SeparatorPrimitive.Root\n      ref={ref}\n      decorative={decorative}\n      orientation={orientation}\n      className={cn(\n        \"shrink-0 bg-border\",\n        orientation === \"horizontal\" ? \"h-[1px] w-full\" : \"h-full w-[1px]\",\n        className\n      )}\n      {...props}\n    />\n  )\n)\nSeparator.displayName = SeparatorPrimitive.Root.displayName\n\nexport { Separator }\n","size_bytes":756},"kisan/src/components/ui/sheet.tsx":{"content":"import * as SheetPrimitive from \"@radix-ui/react-dialog\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\nimport * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Sheet = SheetPrimitive.Root\n\nconst SheetTrigger = SheetPrimitive.Trigger\n\nconst SheetClose = SheetPrimitive.Close\n\nconst SheetPortal = SheetPrimitive.Portal\n\nconst SheetOverlay = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nSheetOverlay.displayName = SheetPrimitive.Overlay.displayName\n\nconst sheetVariants = cva(\n  \"fixed z-50 gap-4 bg-background p-6 shadow-lg transition ease-in-out data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:duration-300 data-[state=open]:duration-500\",\n  {\n    variants: {\n      side: {\n        top: \"inset-x-0 top-0 border-b data-[state=closed]:slide-out-to-top data-[state=open]:slide-in-from-top\",\n        bottom:\n          \"inset-x-0 bottom-0 border-t data-[state=closed]:slide-out-to-bottom data-[state=open]:slide-in-from-bottom\",\n        left: \"inset-y-0 left-0 h-full w-3/4 border-r data-[state=closed]:slide-out-to-left data-[state=open]:slide-in-from-left sm:max-w-sm\",\n        right:\n          \"inset-y-0 right-0 h-full w-3/4  border-l data-[state=closed]:slide-out-to-right data-[state=open]:slide-in-from-right sm:max-w-sm\",\n      },\n    },\n    defaultVariants: {\n      side: \"right\",\n    },\n  }\n)\n\ninterface SheetContentProps\n  extends React.ComponentPropsWithoutRef<typeof SheetPrimitive.Content>,\n  VariantProps<typeof sheetVariants> { }\n\nconst SheetContent = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Content>,\n  SheetContentProps\n>(({ side = \"right\", className, children, ...props }, ref) => (\n  <SheetPortal>\n    <SheetOverlay />\n    <SheetPrimitive.Content\n      ref={ref}\n      className={cn(sheetVariants({ side }), className)}\n      {...props}\n    >\n      {children}\n      <SheetPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-secondary\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </SheetPrimitive.Close>\n    </SheetPrimitive.Content>\n  </SheetPortal>\n))\nSheetContent.displayName = SheetPrimitive.Content.displayName\n\nconst SheetHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetHeader.displayName = \"SheetHeader\"\n\nconst SheetFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetFooter.displayName = \"SheetFooter\"\n\nconst SheetTitle = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold text-foreground\", className)}\n    {...props}\n  />\n))\nSheetTitle.displayName = SheetPrimitive.Title.displayName\n\nconst SheetDescription = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nSheetDescription.displayName = SheetPrimitive.Description.displayName\n\nexport {\n  Sheet, SheetClose,\n  SheetContent, SheetDescription, SheetFooter, SheetHeader, SheetOverlay, SheetPortal, SheetTitle, SheetTrigger\n}\n\n","size_bytes":4250},"kisan/src/components/ui/sidebar.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { VariantProps, cva } from \"class-variance-authority\"\nimport { PanelLeft } from \"lucide-react\"\n\nimport { useIsMobile } from \"@/hooks/use-mobile\"\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\nimport { Input } from \"@/components/ui/input\"\nimport { Separator } from \"@/components/ui/separator\"\nimport { Sheet, SheetContent } from \"@/components/ui/sheet\"\nimport { Skeleton } from \"@/components/ui/skeleton\"\nimport {\n  Tooltip,\n  TooltipContent,\n  TooltipProvider,\n  TooltipTrigger,\n} from \"@/components/ui/tooltip\"\n\nconst SIDEBAR_COOKIE_NAME = \"sidebar:state\"\nconst SIDEBAR_COOKIE_MAX_AGE = 60 * 60 * 24 * 7\nconst SIDEBAR_WIDTH = \"16rem\"\nconst SIDEBAR_WIDTH_MOBILE = \"18rem\"\nconst SIDEBAR_WIDTH_ICON = \"3rem\"\nconst SIDEBAR_KEYBOARD_SHORTCUT = \"b\"\n\ntype SidebarContext = {\n  state: \"expanded\" | \"collapsed\"\n  open: boolean\n  setOpen: (open: boolean) => void\n  openMobile: boolean\n  setOpenMobile: (open: boolean) => void\n  isMobile: boolean\n  toggleSidebar: () => void\n}\n\nconst SidebarContext = React.createContext<SidebarContext | null>(null)\n\nfunction useSidebar() {\n  const context = React.useContext(SidebarContext)\n  if (!context) {\n    throw new Error(\"useSidebar must be used within a SidebarProvider.\")\n  }\n\n  return context\n}\n\nconst SidebarProvider = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    defaultOpen?: boolean\n    open?: boolean\n    onOpenChange?: (open: boolean) => void\n  }\n>(\n  (\n    {\n      defaultOpen = true,\n      open: openProp,\n      onOpenChange: setOpenProp,\n      className,\n      style,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const isMobile = useIsMobile()\n    const [openMobile, setOpenMobile] = React.useState(false)\n\n    // This is the internal state of the sidebar.\n    // We use openProp and setOpenProp for control from outside the component.\n    const [_open, _setOpen] = React.useState(defaultOpen)\n    const open = openProp ?? _open\n    const setOpen = React.useCallback(\n      (value: boolean | ((value: boolean) => boolean)) => {\n        const openState = typeof value === \"function\" ? value(open) : value\n        if (setOpenProp) {\n          setOpenProp(openState)\n        } else {\n          _setOpen(openState)\n        }\n\n        // This sets the cookie to keep the sidebar state.\n        document.cookie = `${SIDEBAR_COOKIE_NAME}=${openState}; path=/; max-age=${SIDEBAR_COOKIE_MAX_AGE}`\n      },\n      [setOpenProp, open]\n    )\n\n    // Helper to toggle the sidebar.\n    const toggleSidebar = React.useCallback(() => {\n      return isMobile\n        ? setOpenMobile((open) => !open)\n        : setOpen((open) => !open)\n    }, [isMobile, setOpen, setOpenMobile])\n\n    // Adds a keyboard shortcut to toggle the sidebar.\n    React.useEffect(() => {\n      const handleKeyDown = (event: KeyboardEvent) => {\n        if (\n          event.key === SIDEBAR_KEYBOARD_SHORTCUT &&\n          (event.metaKey || event.ctrlKey)\n        ) {\n          event.preventDefault()\n          toggleSidebar()\n        }\n      }\n\n      window.addEventListener(\"keydown\", handleKeyDown)\n      return () => window.removeEventListener(\"keydown\", handleKeyDown)\n    }, [toggleSidebar])\n\n    // We add a state so that we can do data-state=\"expanded\" or \"collapsed\".\n    // This makes it easier to style the sidebar with Tailwind classes.\n    const state = open ? \"expanded\" : \"collapsed\"\n\n    const contextValue = React.useMemo<SidebarContext>(\n      () => ({\n        state,\n        open,\n        setOpen,\n        isMobile,\n        openMobile,\n        setOpenMobile,\n        toggleSidebar,\n      }),\n      [state, open, setOpen, isMobile, openMobile, setOpenMobile, toggleSidebar]\n    )\n\n    return (\n      <SidebarContext.Provider value={contextValue}>\n        <TooltipProvider delayDuration={0}>\n          <div\n            style={\n              {\n                \"--sidebar-width\": SIDEBAR_WIDTH,\n                \"--sidebar-width-icon\": SIDEBAR_WIDTH_ICON,\n                ...style,\n              } as React.CSSProperties\n            }\n            className={cn(\n              \"group/sidebar-wrapper flex min-h-svh w-full has-[[data-variant=inset]]:bg-sidebar\",\n              className\n            )}\n            ref={ref}\n            {...props}\n          >\n            {children}\n          </div>\n        </TooltipProvider>\n      </SidebarContext.Provider>\n    )\n  }\n)\nSidebarProvider.displayName = \"SidebarProvider\"\n\nconst Sidebar = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    side?: \"left\" | \"right\"\n    variant?: \"sidebar\" | \"floating\" | \"inset\"\n    collapsible?: \"offcanvas\" | \"icon\" | \"none\"\n  }\n>(\n  (\n    {\n      side = \"left\",\n      variant = \"sidebar\",\n      collapsible = \"offcanvas\",\n      className,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const { isMobile, state, openMobile, setOpenMobile } = useSidebar()\n\n    if (collapsible === \"none\") {\n      return (\n        <div\n          className={cn(\n            \"flex h-full w-[--sidebar-width] flex-col bg-sidebar text-sidebar-foreground\",\n            className\n          )}\n          ref={ref}\n          {...props}\n        >\n          {children}\n        </div>\n      )\n    }\n\n    if (isMobile) {\n      return (\n        <Sheet open={openMobile} onOpenChange={setOpenMobile} {...props}>\n          <SheetContent\n            data-sidebar=\"sidebar\"\n            data-mobile=\"true\"\n            className=\"w-[--sidebar-width] bg-sidebar p-0 text-sidebar-foreground [&>button]:hidden\"\n            style={\n              {\n                \"--sidebar-width\": SIDEBAR_WIDTH_MOBILE,\n              } as React.CSSProperties\n            }\n            side={side}\n          >\n            <div className=\"flex h-full w-full flex-col\">{children}</div>\n          </SheetContent>\n        </Sheet>\n      )\n    }\n\n    return (\n      <div\n        ref={ref}\n        className=\"group peer hidden md:block text-sidebar-foreground\"\n        data-state={state}\n        data-collapsible={state === \"collapsed\" ? collapsible : \"\"}\n        data-variant={variant}\n        data-side={side}\n      >\n        {/* This is what handles the sidebar gap on desktop */}\n        <div\n          className={cn(\n            \"duration-200 relative h-svh w-[--sidebar-width] bg-transparent transition-[width] ease-linear\",\n            \"group-data-[collapsible=offcanvas]:w-0\",\n            \"group-data-[side=right]:rotate-180\",\n            variant === \"floating\" || variant === \"inset\"\n              ? \"group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)_+_theme(spacing.4))]\"\n              : \"group-data-[collapsible=icon]:w-[--sidebar-width-icon]\"\n          )}\n        />\n        <div\n          className={cn(\n            \"duration-200 fixed inset-y-0 z-10 hidden h-svh w-[--sidebar-width] transition-[left,right,width] ease-linear md:flex\",\n            side === \"left\"\n              ? \"left-0 group-data-[collapsible=offcanvas]:left-[calc(var(--sidebar-width)*-1)]\"\n              : \"right-0 group-data-[collapsible=offcanvas]:right-[calc(var(--sidebar-width)*-1)]\",\n            // Adjust the padding for floating and inset variants.\n            variant === \"floating\" || variant === \"inset\"\n              ? \"p-2 group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)_+_theme(spacing.4)_+2px)]\"\n              : \"group-data-[collapsible=icon]:w-[--sidebar-width-icon] group-data-[side=left]:border-r group-data-[side=right]:border-l\",\n            className\n          )}\n          {...props}\n        >\n          <div\n            data-sidebar=\"sidebar\"\n            className=\"flex h-full w-full flex-col bg-sidebar group-data-[variant=floating]:rounded-lg group-data-[variant=floating]:border group-data-[variant=floating]:border-sidebar-border group-data-[variant=floating]:shadow\"\n          >\n            {children}\n          </div>\n        </div>\n      </div>\n    )\n  }\n)\nSidebar.displayName = \"Sidebar\"\n\nconst SidebarTrigger = React.forwardRef<\n  React.ElementRef<typeof Button>,\n  React.ComponentProps<typeof Button>\n>(({ className, onClick, ...props }, ref) => {\n  const { toggleSidebar } = useSidebar()\n\n  return (\n    <Button\n      ref={ref}\n      data-sidebar=\"trigger\"\n      variant=\"ghost\"\n      size=\"icon\"\n      className={cn(\"h-7 w-7\", className)}\n      onClick={(event) => {\n        onClick?.(event)\n        toggleSidebar()\n      }}\n      {...props}\n    >\n      <PanelLeft />\n      <span className=\"sr-only\">Toggle Sidebar</span>\n    </Button>\n  )\n})\nSidebarTrigger.displayName = \"SidebarTrigger\"\n\nconst SidebarRail = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\">\n>(({ className, ...props }, ref) => {\n  const { toggleSidebar } = useSidebar()\n\n  return (\n    <button\n      ref={ref}\n      data-sidebar=\"rail\"\n      aria-label=\"Toggle Sidebar\"\n      tabIndex={-1}\n      onClick={toggleSidebar}\n      title=\"Toggle Sidebar\"\n      className={cn(\n        \"absolute inset-y-0 z-20 hidden w-4 -translate-x-1/2 transition-all ease-linear after:absolute after:inset-y-0 after:left-1/2 after:w-[2px] hover:after:bg-sidebar-border group-data-[side=left]:-right-4 group-data-[side=right]:left-0 sm:flex\",\n        \"[[data-side=left]_&]:cursor-w-resize [[data-side=right]_&]:cursor-e-resize\",\n        \"[[data-side=left][data-state=collapsed]_&]:cursor-e-resize [[data-side=right][data-state=collapsed]_&]:cursor-w-resize\",\n        \"group-data-[collapsible=offcanvas]:translate-x-0 group-data-[collapsible=offcanvas]:after:left-full group-data-[collapsible=offcanvas]:hover:bg-sidebar\",\n        \"[[data-side=left][data-collapsible=offcanvas]_&]:-right-2\",\n        \"[[data-side=right][data-collapsible=offcanvas]_&]:-left-2\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarRail.displayName = \"SidebarRail\"\n\nconst SidebarInset = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"main\">\n>(({ className, ...props }, ref) => {\n  return (\n    <main\n      ref={ref}\n      className={cn(\n        \"relative flex min-h-svh flex-1 flex-col bg-background\",\n        \"peer-data-[variant=inset]:min-h-[calc(100svh-theme(spacing.4))] md:peer-data-[variant=inset]:m-2 md:peer-data-[state=collapsed]:peer-data-[variant=inset]:ml-2 md:peer-data-[variant=inset]:ml-0 md:peer-data-[variant=inset]:rounded-xl md:peer-data-[variant=inset]:shadow\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarInset.displayName = \"SidebarInset\"\n\nconst SidebarInput = React.forwardRef<\n  React.ElementRef<typeof Input>,\n  React.ComponentProps<typeof Input>\n>(({ className, ...props }, ref) => {\n  return (\n    <Input\n      ref={ref}\n      data-sidebar=\"input\"\n      className={cn(\n        \"h-8 w-full bg-background shadow-none focus-visible:ring-2 focus-visible:ring-sidebar-ring\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarInput.displayName = \"SidebarInput\"\n\nconst SidebarHeader = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"header\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarHeader.displayName = \"SidebarHeader\"\n\nconst SidebarFooter = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"footer\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarFooter.displayName = \"SidebarFooter\"\n\nconst SidebarSeparator = React.forwardRef<\n  React.ElementRef<typeof Separator>,\n  React.ComponentProps<typeof Separator>\n>(({ className, ...props }, ref) => {\n  return (\n    <Separator\n      ref={ref}\n      data-sidebar=\"separator\"\n      className={cn(\"mx-2 w-auto bg-sidebar-border\", className)}\n      {...props}\n    />\n  )\n})\nSidebarSeparator.displayName = \"SidebarSeparator\"\n\nconst SidebarContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"content\"\n      className={cn(\n        \"flex min-h-0 flex-1 flex-col gap-2 overflow-auto group-data-[collapsible=icon]:overflow-hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarContent.displayName = \"SidebarContent\"\n\nconst SidebarGroup = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"group\"\n      className={cn(\"relative flex w-full min-w-0 flex-col p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarGroup.displayName = \"SidebarGroup\"\n\nconst SidebarGroupLabel = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & { asChild?: boolean }\n>(({ className, asChild = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"div\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"group-label\"\n      className={cn(\n        \"duration-200 flex h-8 shrink-0 items-center rounded-md px-2 text-xs font-medium text-sidebar-foreground/70 outline-none ring-sidebar-ring transition-[margin,opa] ease-linear focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        \"group-data-[collapsible=icon]:-mt-8 group-data-[collapsible=icon]:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarGroupLabel.displayName = \"SidebarGroupLabel\"\n\nconst SidebarGroupAction = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & { asChild?: boolean }\n>(({ className, asChild = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"group-action\"\n      className={cn(\n        \"absolute right-3 top-3.5 flex aspect-square w-5 items-center justify-center rounded-md p-0 text-sidebar-foreground outline-none ring-sidebar-ring transition-transform hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 after:md:hidden\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarGroupAction.displayName = \"SidebarGroupAction\"\n\nconst SidebarGroupContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    data-sidebar=\"group-content\"\n    className={cn(\"w-full text-sm\", className)}\n    {...props}\n  />\n))\nSidebarGroupContent.displayName = \"SidebarGroupContent\"\n\nconst SidebarMenu = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    data-sidebar=\"menu\"\n    className={cn(\"flex w-full min-w-0 flex-col gap-1\", className)}\n    {...props}\n  />\n))\nSidebarMenu.displayName = \"SidebarMenu\"\n\nconst SidebarMenuItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ className, ...props }, ref) => (\n  <li\n    ref={ref}\n    data-sidebar=\"menu-item\"\n    className={cn(\"group/menu-item relative\", className)}\n    {...props}\n  />\n))\nSidebarMenuItem.displayName = \"SidebarMenuItem\"\n\nconst sidebarMenuButtonVariants = cva(\n  \"peer/menu-button flex w-full items-center gap-2 overflow-hidden rounded-md p-2 text-left text-sm outline-none ring-sidebar-ring transition-[width,height,padding] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 group-has-[[data-sidebar=menu-action]]/menu-item:pr-8 aria-disabled:pointer-events-none aria-disabled:opacity-50 data-[active=true]:bg-sidebar-accent data-[active=true]:font-medium data-[active=true]:text-sidebar-accent-foreground data-[state=open]:hover:bg-sidebar-accent data-[state=open]:hover:text-sidebar-accent-foreground group-data-[collapsible=icon]:!size-8 group-data-[collapsible=icon]:!p-2 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default: \"hover:bg-sidebar-accent hover:text-sidebar-accent-foreground\",\n        outline:\n          \"bg-background shadow-[0_0_0_1px_hsl(var(--sidebar-border))] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground hover:shadow-[0_0_0_1px_hsl(var(--sidebar-accent))]\",\n      },\n      size: {\n        default: \"h-8 text-sm\",\n        sm: \"h-7 text-xs\",\n        lg: \"h-12 text-sm group-data-[collapsible=icon]:!p-0\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nconst SidebarMenuButton = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & {\n    asChild?: boolean\n    isActive?: boolean\n    tooltip?: string | React.ComponentProps<typeof TooltipContent>\n  } & VariantProps<typeof sidebarMenuButtonVariants>\n>(\n  (\n    {\n      asChild = false,\n      isActive = false,\n      variant = \"default\",\n      size = \"default\",\n      tooltip,\n      className,\n      ...props\n    },\n    ref\n  ) => {\n    const Comp = asChild ? Slot : \"button\"\n    const { isMobile, state } = useSidebar()\n\n    const button = (\n      <Comp\n        ref={ref}\n        data-sidebar=\"menu-button\"\n        data-size={size}\n        data-active={isActive}\n        className={cn(sidebarMenuButtonVariants({ variant, size }), className)}\n        {...props}\n      />\n    )\n\n    if (!tooltip) {\n      return button\n    }\n\n    if (typeof tooltip === \"string\") {\n      tooltip = {\n        children: tooltip,\n      }\n    }\n\n    return (\n      <Tooltip>\n        <TooltipTrigger asChild>{button}</TooltipTrigger>\n        <TooltipContent\n          side=\"right\"\n          align=\"center\"\n          hidden={state !== \"collapsed\" || isMobile}\n          {...tooltip}\n        />\n      </Tooltip>\n    )\n  }\n)\nSidebarMenuButton.displayName = \"SidebarMenuButton\"\n\nconst SidebarMenuAction = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & {\n    asChild?: boolean\n    showOnHover?: boolean\n  }\n>(({ className, asChild = false, showOnHover = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"menu-action\"\n      className={cn(\n        \"absolute right-1 top-1.5 flex aspect-square w-5 items-center justify-center rounded-md p-0 text-sidebar-foreground outline-none ring-sidebar-ring transition-transform hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 peer-hover/menu-button:text-sidebar-accent-foreground [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 after:md:hidden\",\n        \"peer-data-[size=sm]/menu-button:top-1\",\n        \"peer-data-[size=default]/menu-button:top-1.5\",\n        \"peer-data-[size=lg]/menu-button:top-2.5\",\n        \"group-data-[collapsible=icon]:hidden\",\n        showOnHover &&\n          \"group-focus-within/menu-item:opacity-100 group-hover/menu-item:opacity-100 data-[state=open]:opacity-100 peer-data-[active=true]/menu-button:text-sidebar-accent-foreground md:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarMenuAction.displayName = \"SidebarMenuAction\"\n\nconst SidebarMenuBadge = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    data-sidebar=\"menu-badge\"\n    className={cn(\n      \"absolute right-1 flex h-5 min-w-5 items-center justify-center rounded-md px-1 text-xs font-medium tabular-nums text-sidebar-foreground select-none pointer-events-none\",\n      \"peer-hover/menu-button:text-sidebar-accent-foreground peer-data-[active=true]/menu-button:text-sidebar-accent-foreground\",\n      \"peer-data-[size=sm]/menu-button:top-1\",\n      \"peer-data-[size=default]/menu-button:top-1.5\",\n      \"peer-data-[size=lg]/menu-button:top-2.5\",\n      \"group-data-[collapsible=icon]:hidden\",\n      className\n    )}\n    {...props}\n  />\n))\nSidebarMenuBadge.displayName = \"SidebarMenuBadge\"\n\nconst SidebarMenuSkeleton = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    showIcon?: boolean\n  }\n>(({ className, showIcon = false, ...props }, ref) => {\n  // Random width between 50 to 90%.\n  const width = React.useMemo(() => {\n    return `${Math.floor(Math.random() * 40) + 50}%`\n  }, [])\n\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"menu-skeleton\"\n      className={cn(\"rounded-md h-8 flex gap-2 px-2 items-center\", className)}\n      {...props}\n    >\n      {showIcon && (\n        <Skeleton\n          className=\"size-4 rounded-md\"\n          data-sidebar=\"menu-skeleton-icon\"\n        />\n      )}\n      <Skeleton\n        className=\"h-4 flex-1 max-w-[--skeleton-width]\"\n        data-sidebar=\"menu-skeleton-text\"\n        style={\n          {\n            \"--skeleton-width\": width,\n          } as React.CSSProperties\n        }\n      />\n    </div>\n  )\n})\nSidebarMenuSkeleton.displayName = \"SidebarMenuSkeleton\"\n\nconst SidebarMenuSub = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    data-sidebar=\"menu-sub\"\n    className={cn(\n      \"mx-3.5 flex min-w-0 translate-x-px flex-col gap-1 border-l border-sidebar-border px-2.5 py-0.5\",\n      \"group-data-[collapsible=icon]:hidden\",\n      className\n    )}\n    {...props}\n  />\n))\nSidebarMenuSub.displayName = \"SidebarMenuSub\"\n\nconst SidebarMenuSubItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ ...props }, ref) => <li ref={ref} {...props} />)\nSidebarMenuSubItem.displayName = \"SidebarMenuSubItem\"\n\nconst SidebarMenuSubButton = React.forwardRef<\n  HTMLAnchorElement,\n  React.ComponentProps<\"a\"> & {\n    asChild?: boolean\n    size?: \"sm\" | \"md\"\n    isActive?: boolean\n  }\n>(({ asChild = false, size = \"md\", isActive, className, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"menu-sub-button\"\n      data-size={size}\n      data-active={isActive}\n      className={cn(\n        \"flex h-7 min-w-0 -translate-x-px items-center gap-2 overflow-hidden rounded-md px-2 text-sidebar-foreground outline-none ring-sidebar-ring hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 aria-disabled:pointer-events-none aria-disabled:opacity-50 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0 [&>svg]:text-sidebar-accent-foreground\",\n        \"data-[active=true]:bg-sidebar-accent data-[active=true]:text-sidebar-accent-foreground\",\n        size === \"sm\" && \"text-xs\",\n        size === \"md\" && \"text-sm\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarMenuSubButton.displayName = \"SidebarMenuSubButton\"\n\nexport {\n  Sidebar,\n  SidebarContent,\n  SidebarFooter,\n  SidebarGroup,\n  SidebarGroupAction,\n  SidebarGroupContent,\n  SidebarGroupLabel,\n  SidebarHeader,\n  SidebarInput,\n  SidebarInset,\n  SidebarMenu,\n  SidebarMenuAction,\n  SidebarMenuBadge,\n  SidebarMenuButton,\n  SidebarMenuItem,\n  SidebarMenuSkeleton,\n  SidebarMenuSub,\n  SidebarMenuSubButton,\n  SidebarMenuSubItem,\n  SidebarProvider,\n  SidebarRail,\n  SidebarSeparator,\n  SidebarTrigger,\n  useSidebar,\n}\n","size_bytes":23367},"kisan/src/components/ui/skeleton.tsx":{"content":"import { cn } from \"@/lib/utils\"\n\nfunction Skeleton({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) {\n  return (\n    <div\n      className={cn(\"animate-pulse rounded-md bg-muted\", className)}\n      {...props}\n    />\n  )\n}\n\nexport { Skeleton }\n","size_bytes":261},"kisan/src/components/ui/slider.tsx":{"content":"import * as React from \"react\"\nimport * as SliderPrimitive from \"@radix-ui/react-slider\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Slider = React.forwardRef<\n  React.ElementRef<typeof SliderPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SliderPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <SliderPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative flex w-full touch-none select-none items-center\",\n      className\n    )}\n    {...props}\n  >\n    <SliderPrimitive.Track className=\"relative h-2 w-full grow overflow-hidden rounded-full bg-secondary\">\n      <SliderPrimitive.Range className=\"absolute h-full bg-primary\" />\n    </SliderPrimitive.Track>\n    <SliderPrimitive.Thumb className=\"block h-5 w-5 rounded-full border-2 border-primary bg-background ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50\" />\n  </SliderPrimitive.Root>\n))\nSlider.displayName = SliderPrimitive.Root.displayName\n\nexport { Slider }\n","size_bytes":1077},"kisan/src/components/ui/sonner.tsx":{"content":"import { useTheme } from \"next-themes\"\nimport { Toaster as Sonner, toast } from \"sonner\"\n\ntype ToasterProps = React.ComponentProps<typeof Sonner>\n\nconst Toaster = ({ ...props }: ToasterProps) => {\n  const { theme = \"system\" } = useTheme()\n\n  return (\n    <Sonner\n      theme={theme as ToasterProps[\"theme\"]}\n      className=\"toaster group\"\n      toastOptions={{\n        classNames: {\n          toast:\n            \"group toast group-[.toaster]:bg-background group-[.toaster]:text-foreground group-[.toaster]:border-border group-[.toaster]:shadow-lg\",\n          description: \"group-[.toast]:text-muted-foreground\",\n          actionButton:\n            \"group-[.toast]:bg-primary group-[.toast]:text-primary-foreground\",\n          cancelButton:\n            \"group-[.toast]:bg-muted group-[.toast]:text-muted-foreground\",\n        },\n      }}\n      {...props}\n    />\n  )\n}\n\nexport { Toaster, toast }\n","size_bytes":894},"kisan/src/components/ui/switch.tsx":{"content":"import * as React from \"react\"\nimport * as SwitchPrimitives from \"@radix-ui/react-switch\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Switch = React.forwardRef<\n  React.ElementRef<typeof SwitchPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof SwitchPrimitives.Root>\n>(({ className, ...props }, ref) => (\n  <SwitchPrimitives.Root\n    className={cn(\n      \"peer inline-flex h-6 w-11 shrink-0 cursor-pointer items-center rounded-full border-2 border-transparent transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 focus-visible:ring-offset-background disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=unchecked]:bg-input\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  >\n    <SwitchPrimitives.Thumb\n      className={cn(\n        \"pointer-events-none block h-5 w-5 rounded-full bg-background shadow-lg ring-0 transition-transform data-[state=checked]:translate-x-5 data-[state=unchecked]:translate-x-0\"\n      )}\n    />\n  </SwitchPrimitives.Root>\n))\nSwitch.displayName = SwitchPrimitives.Root.displayName\n\nexport { Switch }\n","size_bytes":1139},"kisan/src/components/ui/table.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Table = React.forwardRef<\n  HTMLTableElement,\n  React.HTMLAttributes<HTMLTableElement>\n>(({ className, ...props }, ref) => (\n  <div className=\"relative w-full overflow-auto\">\n    <table\n      ref={ref}\n      className={cn(\"w-full caption-bottom text-sm\", className)}\n      {...props}\n    />\n  </div>\n))\nTable.displayName = \"Table\"\n\nconst TableHeader = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <thead ref={ref} className={cn(\"[&_tr]:border-b\", className)} {...props} />\n))\nTableHeader.displayName = \"TableHeader\"\n\nconst TableBody = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tbody\n    ref={ref}\n    className={cn(\"[&_tr:last-child]:border-0\", className)}\n    {...props}\n  />\n))\nTableBody.displayName = \"TableBody\"\n\nconst TableFooter = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tfoot\n    ref={ref}\n    className={cn(\n      \"border-t bg-muted/50 font-medium [&>tr]:last:border-b-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableFooter.displayName = \"TableFooter\"\n\nconst TableRow = React.forwardRef<\n  HTMLTableRowElement,\n  React.HTMLAttributes<HTMLTableRowElement>\n>(({ className, ...props }, ref) => (\n  <tr\n    ref={ref}\n    className={cn(\n      \"border-b transition-colors hover:bg-muted/50 data-[state=selected]:bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nTableRow.displayName = \"TableRow\"\n\nconst TableHead = React.forwardRef<\n  HTMLTableCellElement,\n  React.ThHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <th\n    ref={ref}\n    className={cn(\n      \"h-12 px-4 text-left align-middle font-medium text-muted-foreground [&:has([role=checkbox])]:pr-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableHead.displayName = \"TableHead\"\n\nconst TableCell = React.forwardRef<\n  HTMLTableCellElement,\n  React.TdHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <td\n    ref={ref}\n    className={cn(\"p-4 align-middle [&:has([role=checkbox])]:pr-0\", className)}\n    {...props}\n  />\n))\nTableCell.displayName = \"TableCell\"\n\nconst TableCaption = React.forwardRef<\n  HTMLTableCaptionElement,\n  React.HTMLAttributes<HTMLTableCaptionElement>\n>(({ className, ...props }, ref) => (\n  <caption\n    ref={ref}\n    className={cn(\"mt-4 text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nTableCaption.displayName = \"TableCaption\"\n\nexport {\n  Table,\n  TableHeader,\n  TableBody,\n  TableFooter,\n  TableHead,\n  TableRow,\n  TableCell,\n  TableCaption,\n}\n","size_bytes":2765},"kisan/src/components/ui/tabs.tsx":{"content":"import * as React from \"react\"\nimport * as TabsPrimitive from \"@radix-ui/react-tabs\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Tabs = TabsPrimitive.Root\n\nconst TabsList = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.List\n    ref={ref}\n    className={cn(\n      \"inline-flex h-10 items-center justify-center rounded-md bg-muted p-1 text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsList.displayName = TabsPrimitive.List.displayName\n\nconst TabsTrigger = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"inline-flex items-center justify-center whitespace-nowrap rounded-sm px-3 py-1.5 text-sm font-medium ring-offset-background transition-all focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=active]:bg-background data-[state=active]:text-foreground data-[state=active]:shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsTrigger.displayName = TabsPrimitive.Trigger.displayName\n\nconst TabsContent = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"mt-2 ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsContent.displayName = TabsPrimitive.Content.displayName\n\nexport { Tabs, TabsList, TabsTrigger, TabsContent }\n","size_bytes":1883},"kisan/src/components/ui/textarea.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nexport interface TextareaProps\n  extends React.TextareaHTMLAttributes<HTMLTextAreaElement> {}\n\nconst Textarea = React.forwardRef<HTMLTextAreaElement, TextareaProps>(\n  ({ className, ...props }, ref) => {\n    return (\n      <textarea\n        className={cn(\n          \"flex min-h-[80px] w-full rounded-md border border-input bg-background px-3 py-2 text-sm ring-offset-background placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50\",\n          className\n        )}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nTextarea.displayName = \"Textarea\"\n\nexport { Textarea }\n","size_bytes":772},"kisan/src/components/ui/toast.tsx":{"content":"import * as React from \"react\"\nimport * as ToastPrimitives from \"@radix-ui/react-toast\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ToastProvider = ToastPrimitives.Provider\n\nconst ToastViewport = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Viewport>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Viewport>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Viewport\n    ref={ref}\n    className={cn(\n      \"fixed top-0 z-[100] flex max-h-screen w-full flex-col-reverse p-4 sm:bottom-0 sm:right-0 sm:top-auto sm:flex-col md:max-w-[420px]\",\n      className\n    )}\n    {...props}\n  />\n))\nToastViewport.displayName = ToastPrimitives.Viewport.displayName\n\nconst toastVariants = cva(\n  \"group pointer-events-auto relative flex w-full items-center justify-between space-x-4 overflow-hidden rounded-md border p-6 pr-8 shadow-lg transition-all data-[swipe=cancel]:translate-x-0 data-[swipe=end]:translate-x-[var(--radix-toast-swipe-end-x)] data-[swipe=move]:translate-x-[var(--radix-toast-swipe-move-x)] data-[swipe=move]:transition-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[swipe=end]:animate-out data-[state=closed]:fade-out-80 data-[state=closed]:slide-out-to-right-full data-[state=open]:slide-in-from-top-full data-[state=open]:sm:slide-in-from-bottom-full\",\n  {\n    variants: {\n      variant: {\n        default: \"border bg-background text-foreground\",\n        destructive:\n          \"destructive group border-destructive bg-destructive text-destructive-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Toast = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Root> &\n    VariantProps<typeof toastVariants>\n>(({ className, variant, ...props }, ref) => {\n  return (\n    <ToastPrimitives.Root\n      ref={ref}\n      className={cn(toastVariants({ variant }), className)}\n      {...props}\n    />\n  )\n})\nToast.displayName = ToastPrimitives.Root.displayName\n\nconst ToastAction = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Action>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Action>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Action\n    ref={ref}\n    className={cn(\n      \"inline-flex h-8 shrink-0 items-center justify-center rounded-md border bg-transparent px-3 text-sm font-medium ring-offset-background transition-colors hover:bg-secondary focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 group-[.destructive]:border-muted/40 group-[.destructive]:hover:border-destructive/30 group-[.destructive]:hover:bg-destructive group-[.destructive]:hover:text-destructive-foreground group-[.destructive]:focus:ring-destructive\",\n      className\n    )}\n    {...props}\n  />\n))\nToastAction.displayName = ToastPrimitives.Action.displayName\n\nconst ToastClose = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Close>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Close>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Close\n    ref={ref}\n    className={cn(\n      \"absolute right-2 top-2 rounded-md p-1 text-foreground/50 opacity-0 transition-opacity hover:text-foreground focus:opacity-100 focus:outline-none focus:ring-2 group-hover:opacity-100 group-[.destructive]:text-red-300 group-[.destructive]:hover:text-red-50 group-[.destructive]:focus:ring-red-400 group-[.destructive]:focus:ring-offset-red-600\",\n      className\n    )}\n    toast-close=\"\"\n    {...props}\n  >\n    <X className=\"h-4 w-4\" />\n  </ToastPrimitives.Close>\n))\nToastClose.displayName = ToastPrimitives.Close.displayName\n\nconst ToastTitle = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Title>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Title>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Title\n    ref={ref}\n    className={cn(\"text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nToastTitle.displayName = ToastPrimitives.Title.displayName\n\nconst ToastDescription = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Description>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Description>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Description\n    ref={ref}\n    className={cn(\"text-sm opacity-90\", className)}\n    {...props}\n  />\n))\nToastDescription.displayName = ToastPrimitives.Description.displayName\n\ntype ToastProps = React.ComponentPropsWithoutRef<typeof Toast>\n\ntype ToastActionElement = React.ReactElement<typeof ToastAction>\n\nexport {\n  type ToastProps,\n  type ToastActionElement,\n  ToastProvider,\n  ToastViewport,\n  Toast,\n  ToastTitle,\n  ToastDescription,\n  ToastClose,\n  ToastAction,\n}\n","size_bytes":4845},"kisan/src/components/ui/toaster.tsx":{"content":"import { useToast } from \"@/hooks/use-toast\"\nimport {\n  Toast,\n  ToastClose,\n  ToastDescription,\n  ToastProvider,\n  ToastTitle,\n  ToastViewport,\n} from \"@/components/ui/toast\"\n\nexport function Toaster() {\n  const { toasts } = useToast()\n\n  return (\n    <ToastProvider>\n      {toasts.map(function ({ id, title, description, action, ...props }) {\n        return (\n          <Toast key={id} {...props}>\n            <div className=\"grid gap-1\">\n              {title && <ToastTitle>{title}</ToastTitle>}\n              {description && (\n                <ToastDescription>{description}</ToastDescription>\n              )}\n            </div>\n            {action}\n            <ToastClose />\n          </Toast>\n        )\n      })}\n      <ToastViewport />\n    </ToastProvider>\n  )\n}\n","size_bytes":772},"kisan/src/components/ui/toggle-group.tsx":{"content":"import * as React from \"react\"\nimport * as ToggleGroupPrimitive from \"@radix-ui/react-toggle-group\"\nimport { type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\nimport { toggleVariants } from \"@/components/ui/toggle\"\n\nconst ToggleGroupContext = React.createContext<\n  VariantProps<typeof toggleVariants>\n>({\n  size: \"default\",\n  variant: \"default\",\n})\n\nconst ToggleGroup = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, children, ...props }, ref) => (\n  <ToggleGroupPrimitive.Root\n    ref={ref}\n    className={cn(\"flex items-center justify-center gap-1\", className)}\n    {...props}\n  >\n    <ToggleGroupContext.Provider value={{ variant, size }}>\n      {children}\n    </ToggleGroupContext.Provider>\n  </ToggleGroupPrimitive.Root>\n))\n\nToggleGroup.displayName = ToggleGroupPrimitive.Root.displayName\n\nconst ToggleGroupItem = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Item> &\n    VariantProps<typeof toggleVariants>\n>(({ className, children, variant, size, ...props }, ref) => {\n  const context = React.useContext(ToggleGroupContext)\n\n  return (\n    <ToggleGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        toggleVariants({\n          variant: context.variant || variant,\n          size: context.size || size,\n        }),\n        className\n      )}\n      {...props}\n    >\n      {children}\n    </ToggleGroupPrimitive.Item>\n  )\n})\n\nToggleGroupItem.displayName = ToggleGroupPrimitive.Item.displayName\n\nexport { ToggleGroup, ToggleGroupItem }\n","size_bytes":1739},"kisan/src/components/ui/toggle.tsx":{"content":"import * as React from \"react\"\nimport * as TogglePrimitive from \"@radix-ui/react-toggle\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst toggleVariants = cva(\n  \"inline-flex items-center justify-center rounded-md text-sm font-medium ring-offset-background transition-colors hover:bg-muted hover:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=on]:bg-accent data-[state=on]:text-accent-foreground\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-transparent\",\n        outline:\n          \"border border-input bg-transparent hover:bg-accent hover:text-accent-foreground\",\n      },\n      size: {\n        default: \"h-10 px-3\",\n        sm: \"h-9 px-2.5\",\n        lg: \"h-11 px-5\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nconst Toggle = React.forwardRef<\n  React.ElementRef<typeof TogglePrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof TogglePrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, ...props }, ref) => (\n  <TogglePrimitive.Root\n    ref={ref}\n    className={cn(toggleVariants({ variant, size, className }))}\n    {...props}\n  />\n))\n\nToggle.displayName = TogglePrimitive.Root.displayName\n\nexport { Toggle, toggleVariants }\n","size_bytes":1435},"kisan/src/components/ui/tooltip.tsx":{"content":"import * as React from \"react\"\nimport * as TooltipPrimitive from \"@radix-ui/react-tooltip\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst TooltipProvider = TooltipPrimitive.Provider\n\nconst Tooltip = TooltipPrimitive.Root\n\nconst TooltipTrigger = TooltipPrimitive.Trigger\n\nconst TooltipContent = React.forwardRef<\n  React.ElementRef<typeof TooltipPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TooltipPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <TooltipPrimitive.Content\n    ref={ref}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 overflow-hidden rounded-md border bg-popover px-3 py-1.5 text-sm text-popover-foreground shadow-md animate-in fade-in-0 zoom-in-95 data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=closed]:zoom-out-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2\",\n      className\n    )}\n    {...props}\n  />\n))\nTooltipContent.displayName = TooltipPrimitive.Content.displayName\n\nexport { Tooltip, TooltipTrigger, TooltipContent, TooltipProvider }\n","size_bytes":1145},"kisan/src/components/ui/use-toast.ts":{"content":"import { useToast, toast } from \"@/hooks/use-toast\";\n\nexport { useToast, toast };\n","size_bytes":82},"kisan/src/pages/MyFertilizerGuidance.tsx":{"content":"import { useState, useEffect } from 'react';\nimport { \n  ArrowLeft,\n  CheckCircle,\n  Clock,\n  Droplets,\n  Leaf,\n  Calendar,\n  Beaker,\n  ChevronDown,\n  ChevronUp\n} from 'lucide-react';\nimport { useNavigate } from 'react-router-dom';\nimport { Button } from '@/components/ui/button';\nimport { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';\n\nconst MyFertilizerGuidance = () => {\n  const navigate = useNavigate();\n  const [savedGuidance, setSavedGuidance] = useState<string[]>([]);\n  const [appliedGuidance, setAppliedGuidance] = useState<string[]>(() => {\n    const applied = localStorage.getItem('kisanmitra_applied_guidance');\n    return applied ? JSON.parse(applied) : [];\n  });\n  const [expandedCards, setExpandedCards] = useState<string[]>([]);\n\n  // Load saved fertilizer guidance\n  useEffect(() => {\n    const saved = localStorage.getItem('kisanmitra_saved_fertilizer_guides');\n    setSavedGuidance(saved ? JSON.parse(saved) : []);\n  }, []);\n\n  const cropData = {\n    'tomato': {\n      name: 'Tomato',\n      image: '🍅',\n      season: 'Kharif/Rabi',\n      fertilizers: [\n        { name: 'NPK (10:26:26)', quantity: '200 kg/acre', timing: 'At planting', method: 'Basal application', notes: 'Mix with soil before transplanting' },\n        { name: 'Urea (46% N)', quantity: '50 kg/acre', timing: '20 days after transplant', method: 'Side dressing', notes: 'Apply around plant base, avoid stems' },\n        { name: 'Calcium Nitrate', quantity: '25 kg/acre', timing: 'Flowering stage', method: 'Foliar spray', notes: 'Prevents blossom end rot' }\n      ],\n      steps: [\n        'Prepare field with proper drainage',\n        'Apply basal fertilizer 1 week before transplanting',\n        'Transplant healthy seedlings',\n        'Apply first top dressing after 20 days',\n        'Monitor plant growth and adjust as needed'\n      ]\n    },\n    'wheat': {\n      name: 'Wheat',\n      image: '🌾',\n      season: 'Rabi',\n      fertilizers: [\n        { name: 'DAP (18:46:0)', quantity: '150 kg/acre', timing: 'At sowing', method: 'Drill with seed', notes: 'Place 2-3 cm below seed level' },\n        { name: 'Urea (46% N)', quantity: '65 kg/acre', timing: '1st irrigation (21 days)', method: 'Broadcasting', notes: 'Apply before irrigation' },\n        { name: 'Urea (46% N)', quantity: '65 kg/acre', timing: '2nd irrigation (45 days)', method: 'Broadcasting', notes: 'Apply during tillering stage' }\n      ],\n      steps: [\n        'Test soil pH (ideal 6.0-7.5)',\n        'Apply basal dose with seed drilling',\n        'Ensure proper seed depth (4-5 cm)',\n        'First top dressing at crown root stage',\n        'Second top dressing at tillering',\n        'Monitor for nutrient deficiency signs'\n      ]\n    },\n    'rice': {\n      name: 'Rice',\n      image: '🌾',\n      season: 'Kharif',\n      fertilizers: [\n        { name: 'NPK (12:32:16)', quantity: '125 kg/acre', timing: 'Before transplanting', method: 'Broadcasting', notes: 'Mix thoroughly with puddled soil' },\n        { name: 'Urea (46% N)', quantity: '45 kg/acre', timing: '15 days after transplant', method: 'Broadcasting', notes: 'Apply in standing water' },\n        { name: 'Urea (46% N)', quantity: '45 kg/acre', timing: 'At panicle initiation', method: 'Broadcasting', notes: 'Apply during tillering stage' }\n      ],\n      steps: [\n        'Prepare puddled field with standing water',\n        'Apply basal fertilizer 2-3 days before transplanting',\n        'Transplant 21-day old seedlings',\n        'Maintain water level at 2-5 cm',\n        'Apply nitrogen in split doses',\n        'Drain field 10 days before harvest'\n      ]\n    },\n    'cotton': {\n      name: 'Cotton',\n      image: '☁️',\n      season: 'Kharif',\n      fertilizers: [\n        { name: 'NPK (17:17:17)', quantity: '100 kg/acre', timing: 'At sowing', method: 'Side placement', notes: 'Place 3-4 cm away from seed' },\n        { name: 'Urea (46% N)', quantity: '60 kg/acre', timing: '30-35 days after sowing', method: 'Side dressing', notes: 'Apply during square formation' },\n        { name: 'MOP (60% K2O)', quantity: '35 kg/acre', timing: 'At flowering', method: 'Broadcasting', notes: 'Helps in boll development' }\n      ],\n      steps: [\n        'Select well-drained black cotton soil',\n        'Apply pre-sowing fertilizers',\n        'Sow seeds at proper depth (2-3 cm)',\n        'First top dressing during square stage',\n        'Second application at flowering',\n        'Monitor for pink bollworm'\n      ]\n    },\n    'maize': {\n      name: 'Maize',\n      image: '🌽',\n      season: 'Kharif/Rabi',\n      fertilizers: [\n        { name: 'NPK (12:32:16)', quantity: '125 kg/acre', timing: 'At sowing', method: 'Band placement', notes: 'Place 5 cm away and below seed' },\n        { name: 'Urea (46% N)', quantity: '65 kg/acre', timing: '25-30 days after sowing', method: 'Side dressing', notes: 'Apply at knee-high stage' },\n        { name: 'Urea (46% N)', quantity: '65 kg/acre', timing: 'Pre-tasseling stage', method: 'Side dressing', notes: 'Apply 50-55 days after sowing' }\n      ],\n      steps: [\n        'Choose well-drained fertile soil',\n        'Apply basal dose at time of sowing',\n        'Maintain plant spacing of 60x20 cm',\n        'First top dressing at knee-high stage',\n        'Second top dressing before tasseling',\n        'Ensure adequate moisture throughout'\n      ]\n    }\n  };\n\n  const toggleAppliedStatus = (cropId: string) => {\n    const updatedApplied = appliedGuidance.includes(cropId)\n      ? appliedGuidance.filter(id => id !== cropId)\n      : [...appliedGuidance, cropId];\n    \n    setAppliedGuidance(updatedApplied);\n    localStorage.setItem('kisanmitra_applied_guidance', JSON.stringify(updatedApplied));\n  };\n\n  const toggleExpandCard = (cropId: string) => {\n    setExpandedCards(prev => \n      prev.includes(cropId) \n        ? prev.filter(id => id !== cropId)\n        : [...prev, cropId]\n    );\n  };\n\n  const savedCrops = savedGuidance.map(id => ({\n    id,\n    ...cropData[id as keyof typeof cropData]\n  })).filter(crop => crop.name);\n\n  return (\n    <div className=\"min-h-screen bg-gradient-to-br from-green-50 to-blue-50\">\n      {/* Header */}\n      <div className=\"bg-white shadow-sm border-b border-green-100 sticky top-0 z-10\">\n        <div className=\"px-6 py-4\">\n          <div className=\"flex items-center space-x-4\">\n            <button\n              onClick={() => navigate('/advisory')}\n              className=\"p-2 hover:bg-gray-100 rounded-xl transition-colors\"\n            >\n              <ArrowLeft className=\"w-6 h-6 text-gray-600\" />\n            </button>\n            <div className=\"p-3 bg-green-100 rounded-xl\">\n              <Beaker className=\"w-7 h-7 text-green-600\" />\n            </div>\n            <div>\n              <h1 className=\"text-2xl font-bold text-gray-900\">My Fertilizer Guidance</h1>\n              <p className=\"text-sm text-gray-600\">Your saved crop fertilizer recommendations</p>\n            </div>\n          </div>\n        </div>\n      </div>\n\n      {/* Content */}\n      <div className=\"px-6 py-8 space-y-8\">\n        {savedCrops.length > 0 ? (\n          <div className=\"space-y-6\">\n            {savedCrops.map((crop) => {\n              const isApplied = appliedGuidance.includes(crop.id);\n              const isExpanded = expandedCards.includes(crop.id);\n              \n              return (\n                <Card key={crop.id} className=\"bg-white rounded-3xl shadow-lg border border-gray-100 overflow-hidden\">\n                  {/* Crop Header */}\n                  <CardHeader className={`${\n                    isApplied \n                      ? 'bg-gradient-to-r from-green-50 to-green-100 border-b border-green-200' \n                      : 'bg-gradient-to-r from-gray-50 to-gray-100 border-b border-gray-200'\n                  }`}>\n                    <div className=\"flex items-center justify-between\">\n                      <div className=\"flex items-center space-x-4\">\n                        <div className=\"text-4xl\">{crop.image}</div>\n                        <div>\n                          <CardTitle className=\"text-2xl font-bold text-gray-900\">{crop.name}</CardTitle>\n                          <div className=\"flex items-center space-x-2 mt-1\">\n                            <Calendar className=\"w-4 h-4 text-green-600\" />\n                            <span className=\"text-green-700 font-medium\">{crop.season} Season</span>\n                          </div>\n                        </div>\n                      </div>\n                      <div className=\"flex items-center space-x-3\">\n                        {isApplied && (\n                          <div className=\"flex items-center space-x-1 text-green-600 bg-green-100 px-3 py-1 rounded-full\">\n                            <CheckCircle className=\"w-4 h-4\" />\n                            <span className=\"text-sm font-medium\">Applied</span>\n                          </div>\n                        )}\n                      </div>\n                    </div>\n                  </CardHeader>\n\n                  {/* Fertilizer Table */}\n                  <CardContent className=\"p-6\">\n                    <div className=\"space-y-4\">\n                      <h3 className=\"text-xl font-bold text-gray-900 mb-4 flex items-center space-x-2\">\n                        <Droplets className=\"w-5 h-5 text-blue-600\" />\n                        <span>Fertilizer Schedule</span>\n                      </h3>\n                      \n                      <div className=\"space-y-3\">\n                        {crop.fertilizers.map((fertilizer, index) => (\n                          <div key={index} className=\"bg-gray-50 rounded-2xl p-4 border border-gray-200\">\n                            <div className=\"flex items-start justify-between mb-3\">\n                              <div className=\"flex-1\">\n                                <h4 className=\"font-bold text-gray-900 text-lg\">{fertilizer.name}</h4>\n                                <p className=\"text-green-600 font-bold text-base\">{fertilizer.quantity}</p>\n                              </div>\n                              <div className=\"text-right\">\n                                <div className=\"flex items-center space-x-1 text-blue-600\">\n                                  <Clock className=\"w-4 h-4\" />\n                                  <span className=\"text-sm font-medium\">{fertilizer.timing}</span>\n                                </div>\n                              </div>\n                            </div>\n                            \n                            <div className=\"grid grid-cols-1 gap-2\">\n                              <div className=\"flex items-center space-x-2\">\n                                <span className=\"text-sm font-medium text-gray-600\">Method:</span>\n                                <span className=\"text-sm text-gray-800 font-medium\">{fertilizer.method}</span>\n                              </div>\n                              <div className=\"flex items-start space-x-2\">\n                                <span className=\"text-sm font-medium text-gray-600 mt-0.5\">Notes:</span>\n                                <span className=\"text-sm text-gray-700 leading-relaxed\">{fertilizer.notes}</span>\n                              </div>\n                            </div>\n                          </div>\n                        ))}\n                      </div>\n                    </div>\n\n                    {/* Expandable Steps */}\n                    <div className=\"mt-6\">\n                      <button\n                        onClick={() => toggleExpandCard(crop.id)}\n                        className=\"w-full flex items-center justify-between p-4 bg-gradient-to-r from-blue-50 to-purple-50 rounded-2xl hover:from-blue-100 hover:to-purple-100 transition-colors\"\n                      >\n                        <div className=\"flex items-center space-x-3\">\n                          <Leaf className=\"w-5 h-5 text-green-600\" />\n                          <span className=\"font-bold text-gray-900\">Step-by-Step Instructions</span>\n                        </div>\n                        {isExpanded ? (\n                          <ChevronUp className=\"w-5 h-5 text-gray-600\" />\n                        ) : (\n                          <ChevronDown className=\"w-5 h-5 text-gray-600\" />\n                        )}\n                      </button>\n\n                      {isExpanded && (\n                        <div className=\"mt-4 space-y-3\">\n                          {crop.steps.map((step, index) => (\n                            <div key={index} className=\"flex items-start space-x-3 p-3 bg-white rounded-xl border border-gray-200\">\n                              <div className=\"flex-shrink-0 w-6 h-6 bg-green-100 rounded-full flex items-center justify-center\">\n                                <span className=\"text-xs font-bold text-green-600\">{index + 1}</span>\n                              </div>\n                              <p className=\"text-gray-700 text-sm leading-relaxed\">{step}</p>\n                            </div>\n                          ))}\n                        </div>\n                      )}\n                    </div>\n\n                    {/* Apply Status Button */}\n                    <div className=\"mt-6\">\n                      <Button\n                        onClick={() => toggleAppliedStatus(crop.id)}\n                        className={`w-full py-4 rounded-2xl font-bold text-lg transition-all duration-300 ${\n                          isApplied\n                            ? 'bg-gray-100 text-gray-700 border-2 border-gray-300 hover:bg-gray-200'\n                            : 'bg-gradient-to-r from-green-500 to-green-600 hover:from-green-600 hover:to-green-700 text-white shadow-lg hover:shadow-xl'\n                        }`}\n                      >\n                        <div className=\"flex items-center justify-center space-x-3\">\n                          {isApplied ? (\n                            <>\n                              <Clock className=\"w-6 h-6\" />\n                              <span>Mark as Pending</span>\n                            </>\n                          ) : (\n                            <>\n                              <CheckCircle className=\"w-6 h-6\" />\n                              <span>Mark as Applied</span>\n                            </>\n                          )}\n                        </div>\n                      </Button>\n                    </div>\n                  </CardContent>\n                </Card>\n              );\n            })}\n          </div>\n        ) : (\n          <Card className=\"bg-white rounded-3xl shadow-lg border border-gray-100 overflow-hidden\">\n            <CardContent className=\"p-8 text-center\">\n              <div className=\"p-4 bg-gray-100 rounded-xl w-20 h-20 mx-auto mb-4 flex items-center justify-center\">\n                <Beaker className=\"w-10 h-10 text-gray-400\" />\n              </div>\n              <h3 className=\"font-bold text-gray-900 text-xl mb-2\">No Saved Guidance</h3>\n              <p className=\"text-gray-500 text-base mb-6\">\n                Save fertilizer guidance from the Fertilizer Guide page to see them here\n              </p>\n              <Button \n                onClick={() => navigate('/fertilizer-guide')}\n                className=\"bg-gradient-to-r from-green-500 to-green-600 hover:from-green-600 hover:to-green-700 text-white py-3 px-6 rounded-2xl font-semibold\"\n              >\n                Browse Fertilizer Guide\n              </Button>\n            </CardContent>\n          </Card>\n        )}\n      </div>\n    </div>\n  );\n};\n\nexport default MyFertilizerGuidance;","size_bytes":15577}},"version":1}